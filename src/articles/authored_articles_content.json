[
  {
    "_id": "deploy_ghpages_actions",
    "_body": "<h2 id=\"create-github-actions-yaml-file.\">Create GitHub Actions YAML file.</h2>\n<p>Will use James Ives‚Äô github-pages-deploy-action</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode yml\"><code class=\"sourceCode yaml\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># .github/workflows/gh_pages_deploy.yml</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Build and Deploy</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">on</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">push</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">branches</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> main</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">jobs</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">build-and-deploy</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">runs-on</span><span class=\"kw\">:</span><span class=\"at\"> ubuntu-latest</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">steps</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Checkout üõéÔ∏è</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> actions/checkout@v2.3.1</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Install and Build üîß</span><span class=\"co\"> # This example project is built using </span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">      # npm and outputs the result to the &#39;build&#39; folder. Replace with </span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">      # the commands required to build your project, or remove this step </span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">      # entirely if your site is pre-built.</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">        run</span><span class=\"kw\">: </span><span class=\"ch\">|</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>          npm install</span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>          npm run lint</span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>          npm run build</span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Deploy üöÄ</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> JamesIves/github-pages-deploy-action@4.1.4</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">with</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">branch</span><span class=\"kw\">:</span><span class=\"at\"> gh-pages</span><span class=\"co\"> # The branch the action should deploy to.</span></span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">folder</span><span class=\"kw\">:</span><span class=\"at\"> dist</span><span class=\"co\"> # The folder the action should deploy.</span></span></code></pre></div>\n<p>You can then navigate to your repositories <code>Settings</code> -&gt; <code>Pages</code> where you can select that the <code>gh-pages</code> branch should be selected as the source for the GitHub Pages deployment.</p>\n<h2 id=\"handling-multiple-projects-under-the-username.github.io-domain\">Handling multiple projects under the <code>&lt;username&gt;.github.io</code> domain</h2>\n<p>You can specify a project to be deployed to specific subfolders under your <code>&lt;username&gt;.github.io</code> domain. For example, I can add the following configuration to the <code>vue.config.js</code> file in a Vue project so that my application will be deployed at https://brombaut.github.io/game-of-life/</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode js\"><code class=\"sourceCode javascript\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">// vue.config.js</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">const</span> { defineConfig } <span class=\"op\">=</span> <span class=\"pp\">require</span>(<span class=\"st\">&#39;@vue/cli-service&#39;</span>)</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>module<span class=\"op\">.</span><span class=\"at\">exports</span> <span class=\"op\">=</span> <span class=\"fu\">defineConfig</span>({</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">publicPath</span><span class=\"op\">:</span> <span class=\"st\">&#39;/game-of-life/&#39;</span><span class=\"op\">,</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>})</span></code></pre></div>\n<h2 id=\"add-any-environment-variables\">Add any environment variables</h2>\n<p><strong>Note:</strong> There is almost certainly a better way to do this. Should probably look into it at some point.</p>\n<ul>\n<li><ol type=\"1\">\n<li>Add any key-value pairs as repository secrets in your repo‚Äôs <b>Settings -&gt; Secrets</b> page. I guess this only makes them available in the pipeline, but not available from the <code>process</code>, which is why you have to do the next step.</li>\n</ol></li>\n<li><ol start=\"2\" type=\"1\">\n<li>Add a <code>Create .env File</code> step before the <code>Install and Build</code> step</li>\n</ol></li>\n</ul>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode yml\"><code class=\"sourceCode yaml\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># .github/workflows/gh_pages_deploy.yml snippet</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Create .env File</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">  run</span><span class=\"kw\">: </span><span class=\"ch\">|</span></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    touch .env</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    echo API_KEY=${{ secrets.API_KEY }} &gt;&gt; .env</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    echo AUTH_DOMAIN=${{ secrets.AUTH_DOMAIN }} &gt;&gt; .env</span></code></pre></div>\n<h2 id=\"references\">References</h2>\n<ul>\n<li>https://github.blog/2020-09-25-github-action-hero-james-ives-and-github-pages-deploy/</li>\n<li>https://github.com/JamesIves/github-pages-deploy-action</li>\n<li>https://github.com/marketplace/actions/deploy-to-github-pages</li>\n</ul>\n"
  },
  {
    "_id": "init_npm_project",
    "_body": "<h2 id=\"initialize-project\">Initialize Project</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">mkdir</span> my_project</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">cd</span> my_project</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">git</span> init</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">echo</span> <span class=\"st\">&quot;node_modules&quot;</span> <span class=\"op\">&gt;&gt;</span> .gitignore</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">echo</span> <span class=\"st\">&quot;build&quot;</span> <span class=\"op\">&gt;&gt;</span> .gitignore</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> init <span class=\"at\">-y</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">mkdir</span> src <span class=\"kw\">&amp;&amp;</span> <span class=\"fu\">touch</span> src/index.ts</span></code></pre></div>\n<h2 id=\"update-package.json\">Update <code>package.json</code></h2>\n<p>Set your package.json to look similar to the example below.</p>\n<p>Note the <code>main</code> and <code>types</code> attributes. Other things (like the npm <code>scripts</code>) depend on them</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode json\"><code class=\"sourceCode json\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"er\">//</span> <span class=\"er\">package.json</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">{</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;name&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;my_project&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;version&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;0.0.1&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;description&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;my_project&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;main&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;build/index.js&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;types&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;build/index.d.ts&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;scripts&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;build&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;rimraf ./build &amp;&amp; tsc&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;start&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;npm run build &amp;&amp; node build/index.js&quot;</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">},</span></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;repository&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;type&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;git&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;url&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;git+https://github.com/brombaut/my_project.git&quot;</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">},</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;keywords&quot;</span><span class=\"fu\">:</span> <span class=\"ot\">[]</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;author&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;Ben Rombaut&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;license&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;ISC&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;private&quot;</span><span class=\"fu\">:</span> <span class=\"kw\">false</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;bugs&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;url&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;https://github.com/brombaut/my_project/issues&quot;</span></span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">},</span></span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;homepage&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;https://github.com/brombaut/my_project#readme&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">}</span></span></code></pre></div>\n<h2 id=\"install-basic-dependencies\">Install basic dependencies</h2>\n<p>TypeScript has Implicit, Explicit, and Ambient types. Ambient types are types that get added to the global execution scope. Since we‚Äôre using Node, it would be good if we could get type safety and auto-completion on the Node apis like <code>file</code>, <code>path</code>, <code>process</code>, etc. That‚Äôs what installing the DefinitelyTyped type definition for Node will do.</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> install typescript <span class=\"at\">--save-dev</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> install @types/node <span class=\"at\">--save-dev</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> install rimraf</span></code></pre></div>\n<h2 id=\"create-tsconfig.json\">Create <code>tsconfig.json</code></h2>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">tsc</span> <span class=\"at\">--init</span></span></code></pre></div>\n<ul>\n<li><strong>target</strong>: We want to compile to es5 since we want to build a package with browser compatibility.</li>\n<li><strong>module</strong>: Use commonjs for compatibility.</li>\n<li><strong>declaration</strong>: When you building packages, this should be true. Typescript will then also export type definitions together with the compiled javascript code so the package can be used with both Typescript and Javascript.</li>\n<li><strong>outDir</strong>: The javascript will be compiled to the lib folder.</li>\n<li><strong>include</strong>: All source files in the src folder</li>\n<li><strong>exclude</strong>: We don‚Äôt want to transpile node_modules, neither tests since these are only used during development.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode json\"><code class=\"sourceCode json\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"er\">//</span> <span class=\"er\">minimum</span> <span class=\"er\">tsconfig.json</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"er\">//</span> <span class=\"er\">if</span> <span class=\"er\">you</span> <span class=\"er\">use</span> <span class=\"er\">tsc</span> <span class=\"er\">--init,</span> <span class=\"er\">it</span> <span class=\"er\">will</span> <span class=\"er\">look</span> <span class=\"er\">different,</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"er\">//</span> <span class=\"er\">but</span> <span class=\"er\">you</span> <span class=\"er\">should</span> <span class=\"er\">make</span> <span class=\"er\">sure</span> <span class=\"er\">to</span> <span class=\"er\">copy</span> <span class=\"er\">the</span> <span class=\"er\">&quot;outDir&quot;,</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"er\">//</span> <span class=\"er\">&quot;include&quot;,</span> <span class=\"er\">and</span> <span class=\"er\">&quot;exclude&quot;</span> <span class=\"er\">attributes.</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">{</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;compilerOptions&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;target&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;es5&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;module&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;commonjs&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;declaration&quot;</span><span class=\"fu\">:</span> <span class=\"kw\">true</span><span class=\"fu\">,</span></span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;outDir&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;./build&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;rootDir&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;./src&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;strict&quot;</span><span class=\"fu\">:</span> <span class=\"kw\">true</span></span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">},</span></span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;include&quot;</span><span class=\"fu\">:</span> <span class=\"ot\">[</span><span class=\"st\">&quot;src&quot;</span><span class=\"ot\">]</span><span class=\"fu\">,</span></span>\n<span id=\"cb5-15\"><a href=\"#cb5-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;exclude&quot;</span><span class=\"fu\">:</span> <span class=\"ot\">[</span><span class=\"st\">&quot;node_modules&quot;</span><span class=\"ot\">,</span> <span class=\"st\">&quot;**/__tests__/*&quot;</span><span class=\"ot\">]</span></span>\n<span id=\"cb5-16\"><a href=\"#cb5-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">}</span></span></code></pre></div>\n"
  },
  {
    "_id": "publish_npm_project",
    "_body": "<h1>\nPublish a TypeScript project to NPM\n</h1>\n<h2 id=\"add-publishing-related-scripts\">Add publishing related scripts</h2>\n<p>Only take what you need form this (e.g., if you don‚Äôt have linting, you don‚Äôt need <code>preversion</code>). At a minimum, you should have <code>prepare</code>, <code>version</code>, and <code>postversion</code>.</p>\n<ul>\n<li><strong>prepare</strong> will run both BEFORE the package is packed and published, and on local npm install. Perfect for running building the code. Add this script to package.json</li>\n<li><strong>prepublishOnly</strong> will run BEFORE prepare and ONLY on npm publish. Here we will run our test and lint to make sure we don‚Äôt publish bad code</li>\n<li><strong>preversion</strong> will run before bumping a new package version. To be extra sure that we‚Äôre not bumping a version with bad code, why not run lint here as well?</li>\n<li><strong>version</strong> will run after a new version has been bumped. If your package has a git repository, like in our case, a commit and a new version-tag will be made every time you bump a new version. This command will run BEFORE the commit is made. One idea is to run the formatter here and so no ugly code will pass into the new version:</li>\n<li><strong>postversion</strong> will run after the commit has been made. A perfect place for pushing the commit as well as the tag.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode json\"><code class=\"sourceCode json\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"er\">//</span> <span class=\"er\">...package.json</span> <span class=\"er\">snippet</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">{</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;scripts&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;prepare&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;npm run build&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;prepublishOnly&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;npm test &amp;&amp; npm run lint&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;preversion&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;npm run lint&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;version&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;npm run format &amp;&amp; git add -A src&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;postversion&quot;</span> <span class=\"fu\">:</span> <span class=\"st\">&quot;git push &amp;&amp; git push --tags&quot;</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">}</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">}</span></span></code></pre></div>\n<h2 id=\"only-include-what-you-need-in-your-npm-package\">Only include what you need in your npm package</h2>\n<p>Add the files attribute to package.json. This assumes your output build folder is <code>lib</code>.</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode json\"><code class=\"sourceCode json\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"er\">//</span> <span class=\"er\">...package.json</span> <span class=\"er\">snippet</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">{</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;files&quot;</span><span class=\"fu\">:</span> <span class=\"ot\">[</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"st\">&quot;lib/**/*&quot;</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"ot\">]</span><span class=\"fu\">,</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">}</span></span></code></pre></div>\n<h2 id=\"commit-and-push-to-git\">Commit and push to git</h2>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">git</span> add <span class=\"at\">-A</span> <span class=\"kw\">&amp;&amp;</span> <span class=\"fu\">git</span> commit <span class=\"at\">-m</span> <span class=\"st\">&quot;Setup Package&quot;</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">git</span> push</span></code></pre></div>\n<h2 id=\"publish-to-npm\">Publish to NPM</h2>\n<p>First login in console</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> login</span></code></pre></div>\n<p>Then publish. If you are using scoped packages, you have to add the <code>--access public</code> flag.</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> publish <span class=\"at\">--access</span> public</span></code></pre></div>\n<h2 id=\"bump-version\">Bump version</h2>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> version patch</span></code></pre></div>\n<p>Our preversion, version, and postversion will run, create a new tag in git and push it to our remote repository. Now publish again.</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> publish <span class=\"at\">--access</span> public</span></code></pre></div>\n"
  },
  {
    "_id": "practical_statistics",
    "_body": "<h1 id=\"practical-analysis-for-data-scientists\">Practical Analysis for Data Scientists</h1>\n<p>Key term and ideas from the book.</p>\n<h1 id=\"chapter-1---exploratory-data-analysis\">Chapter 1 - Exploratory Data Analysis</h1>\n<h2 id=\"data-types\">Data Types</h2>\n<h3 id=\"key-terms\">Key Terms</h3>\n<ul>\n<li><p><strong>Numeric</strong></p>\n<p>Data that is expressed on a numeric scale</p>\n<ul>\n<li><p><strong>Continuous</strong></p>\n<p>Data that can take on any value in an interval (Synonyms: interval, float, numeric)</p></li>\n<li><p><strong>Discrete</strong></p>\n<p>Data that can take on only integer values, such as counts. (Synonyms: integer, count)</p></li>\n</ul></li>\n<li><p><strong>Categorical</strong></p>\n<p>Data that can take on only a specific set of values representing a set of possible categories. (Synonyms: enum, enumerated, factors, nominal)</p>\n<ul>\n<li><p><strong>Binary</strong></p>\n<p>A special case of categorical data with just two categories of values, e.g., 0/1, true/false. (Synonyms: dichotomous, logical, indicator, boolean)</p></li>\n<li><p><strong>Ordinal</strong></p>\n<p>Categorical data that has an explicit ordering. (Synonym: ordered factor)</p></li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas\">Key Ideas</h3>\n<ul>\n<li>Data is typically classified in software by type.</li>\n<li>Data types include numeric (continuous, discrete) and categorical (binary, ordinal).</li>\n<li>Data typing in software acts as a signal to the software on how to process the data.</li>\n</ul>\n<h2 id=\"rectangular-data\">Rectangular Data</h2>\n<h3 id=\"key-terms-1\">Key Terms</h3>\n<ul>\n<li><p><strong>Data frame</strong></p>\n<p>Rectangular data (like a spreadsheet) is the basic data structure for statistical and machine learning models.</p></li>\n<li><p><strong>Feature</strong></p>\n<p>A column within a table is commonly regerred to as a feature. (Synonyms: attribute, input, predictor, variable)</p></li>\n<li><p><strong>Outcome</strong></p>\n<p>Many data science projects involve predicting an outcome - often a yes/no outcome. The <em>features</em> are sometimes used to predict the <em>outcome</em> in an experiment or a study. (Synonyms: dependent variable, response, target, output)</p></li>\n<li><p><strong>Records</strong></p>\n<p>A row within a table is commonly referred to as a record. (Synonyms: case, example, instance obersvation pattern, sample)</p></li>\n</ul>\n<h3 id=\"key-ideas-1\">Key Ideas</h3>\n<ul>\n<li>The basic data structure in data science is a rectangular matrix in which rows are records and columns are variables (features).</li>\n<li>Terminology can be confusing: there are a variety of synonyms arising from the different disciplines that contribute to data science (statistics, computer science, and IT).</li>\n</ul>\n<h2 id=\"estimates-of-location\">Estimates of Location</h2>\n<h3 id=\"key-terms-2\">Key Terms</h3>\n<ul>\n<li><p><strong>Mean</strong></p>\n<p>The sum of all values divided by the number of values. (Synonym: average)</p></li>\n<li><p><strong>Weighted Mean</strong></p>\n<p>The sum of all values times a weight divided by the sum of the weights. (Synonym: weighted average)</p></li>\n<li><p><strong>Median</strong></p>\n<p>The value sucht hat one-half of the data lies above and below. (Synonym: 50th percentile)</p></li>\n<li><p><strong>Percentile</strong></p>\n<p>The value such that P percent of the data lies below. (Synonym: quantile)</p></li>\n<li><p><strong>Weighted Median</strong></p>\n<p>The value such that one-half of the sum of the weights lies aboe and below the sorted data.</p></li>\n<li><p><strong>Trimmed Mean</strong></p>\n<p>The average of all values after dropping a fixed number of extreme values. (Synonym: truncated mean)</p></li>\n<li><p><strong>Robust</strong></p>\n<p>Not sensitive to extreme values. (Synonym: resistant)</p></li>\n<li><p><strong>Outlier</strong></p>\n<p>A data value that is very different from most of the data. (Synonym: extreme value)</p></li>\n</ul>\n<h3 id=\"key-ideas-2\">Key Ideas</h3>\n<ul>\n<li>The basic metric for location is the mean, but it can be sensitive to extreme values (outliers).</li>\n<li>Other metrics (median, trimmed mean) are less sensitive to outliers and unusual distributions and hence are more robust.</li>\n</ul>\n<h2 id=\"variability-metrics\">Variability Metrics</h2>\n<h3 id=\"key-terms-3\">Key Terms</h3>\n<ul>\n<li><p><strong>Deviations</strong></p>\n<p>The difference between the observed values and the estimate of location. (Synonyms: errors, residuals)</p></li>\n<li><p><strong>Variance</strong></p>\n<p>The sum of squared deviations from the mean divided by <em>n-1</em> where <em>n</em> is the number of data values. (Synonym: mean-squared error)</p></li>\n<li><p><strong>Standard Deviation</strong></p>\n<p>The square root of the variance.</p></li>\n<li><p><strong>Mean Absolute Deviation</strong></p>\n<p>The mean of the absolute values of the deviations from the mean. (Synonyms: l1-norm, Manhattan norm)</p></li>\n<li><p><strong>Median Absolute deviation from the median</strong></p>\n<p>The median of the absolute values of the deviations from the median.</p></li>\n<li><p><strong>Range</strong></p>\n<p>The difference between the largest and the smallest values in the data set.</p></li>\n<li><p><strong>Order Statistics</strong></p>\n<p>Metrics based on the data values sorted from smallest to biggest. (Synonym: rank)</p></li>\n<li><p><strong>Percentile</strong></p>\n<p>The value such that P percent of the values take on this value or less and (100-P) percent take on this value or more. (Synonym: quantile)</p></li>\n<li><p><strong>Interquartile Range</strong></p>\n<p>The difference between the 75th percentile and the 25th percentile. (Synonym: IQR)</p></li>\n</ul>\n<h3 id=\"key-ideas-3\">Key Ideas</h3>\n<ul>\n<li>Variance and standard deviation are the most widespread and routinely reported statistics of variability</li>\n<li>Both are sensitive to outliers.</li>\n<li>More robust metrics include mean absolute deviation, median absolute deviation from the median, and percentiles (quantiles)</li>\n</ul>\n<h2 id=\"exploring-the-distribution\">Exploring the Distribution</h2>\n<h3 id=\"key-terms-4\">Key Terms</h3>\n<ul>\n<li><p><strong>Boxplot</strong></p>\n<p>A plot introduced by Turkey as a quick way to visualize the distribution of data. (Synonym: box and whiskers plot)</p></li>\n<li><p><strong>Frequency Table</strong></p>\n<p>A tally of the count of numeric data values that fall into a set of intervals (bins)</p></li>\n<li><p><strong>Histogram</strong></p>\n<p>A plot of the frequency table with the bins on the x-axis and the count (or proportion) on the y-axis. While visually similar, bar charts should not be confused with histograms.</p></li>\n<li><p><strong>Density plot</strong></p>\n<p>A smoothed version of the histogram, often based on a <em>kernel density estimate</em>.</p></li>\n</ul>\n<h3 id=\"key-ideas-4\">Key Ideas</h3>\n<ul>\n<li>A freqency histogram plots frequency counts on the y-axis and variable values on the x-axis: it gives a sense of the distribution of the data at a glance</li>\n<li>A frequency table is a tabular version of the frequency counts found in a histogram.</li>\n<li>A boxplot - with the top and bottom of the box at the 75th and 25th percentiles, respectively - also gives a quick sens of the distribution of the data; it is often used in side-by-side displays to compare distributions.</li>\n<li>A density plot is a smoothed version of a histogram; it requires a function to estimate a plot based on the data (multiple estimates are possible, of course)</li>\n</ul>\n<h2 id=\"exploring-categorical-data\">Exploring Categorical Data</h2>\n<h3 id=\"key-terms-5\">Key Terms</h3>\n<ul>\n<li><p><strong>Mode</strong></p>\n<p>The most commonly occuring category or value in a data set.</p></li>\n<li><p><strong>Expected value</strong></p>\n<p>When the categories can be associated with a numeric value, this gives an average value based on a category‚Äôs probability of occurence.</p></li>\n<li><p><strong>Bar Charts</strong></p>\n<p>The frequency or proportion for each category plotted as bars.</p></li>\n<li><p><strong>Pie Charts</strong></p>\n<p>The frequency or proportion for each category plotted as wedges in a pie.</p></li>\n</ul>\n<h3 id=\"key-ideas-5\">Key Ideas</h3>\n<ul>\n<li>Categorical data is typically summed up in proportions and can be visualized in a bar chart.</li>\n<li>Categories might represent distinct things (apples and oranges, male and female), levels of a factor variable (low, medium, high), or numeric data that has been binned.</li>\n<li>Expected value is the sum of values times their probability of occurrence, often used to sum up factor variable lengths.</li>\n</ul>\n<h2 id=\"correlation\">Correlation</h2>\n<h3 id=\"key-terms-6\">Key Terms</h3>\n<ul>\n<li><p><strong>Correlation Coefficient</strong></p>\n<p>A metric that measures the extent to which numeric variables are associated with one another (ranges from -1 to +1).</p></li>\n<li><p><strong>Correlation Matrix</strong></p>\n<p>A table where the variables are shown on both rows and columns, and the cell values are the correlations between variables.</p></li>\n<li><p><strong>Scatterplot</strong></p>\n<p>A plot in which the x-axis is the value of one variable, and the y-axis the value of another.</p></li>\n</ul>\n<h3 id=\"key-ideas-6\">Key Ideas</h3>\n<ul>\n<li>The correlation coefficient measures the extent to which two paired variables (e.g.¬†height and weight for individuals) are associated with one another.</li>\n<li>When high values of v1 go with high values of v2, v1 and v2 are positively associated.</li>\n<li>When high values of v1 go with low values of v2, v1 and v2 are negatively associated.</li>\n<li>The correlation coefficient is a standardized metric, so that it always ranges from -1 (perfect negative correlation) to +1 (perfect positive correlation).</li>\n<li>A correlation coefficient of zero indicates no correlation, but be aware that random arrangements of data will produce both positive and negative values for the correlation coefficient just by chance.</li>\n</ul>\n<h2 id=\"exploring-two-or-more-variables\">Exploring Two or more Variables</h2>\n<h3 id=\"key-terms-7\">Key Terms</h3>\n<ul>\n<li><p><strong>Contingency Table</strong></p>\n<p>A tally of counts between two eor more categorical variables.</p></li>\n<li><p><strong>Hexagonal Binning</strong></p>\n<p>A plot of two numeric variables with the records binned into hexagons.</p></li>\n<li><p><strong>Contour Plot</strong></p>\n<p>A plot showing the density of two numeric variables like a topographical map.</p></li>\n<li><p><strong>Violin Plot</strong></p>\n<p>Similar to a boxplot but showing the density estimate.</p></li>\n</ul>\n<h3 id=\"key-ideas-7\">Key Ideas</h3>\n<ul>\n<li>Hexagonal binning and contour plots are useful tools that permit graphical examination of two numeric variables at a time, without being overwhelmed by huge amounts of data.</li>\n<li>Contingency tables are the standard tool for looking at the counts of two categorical variables.</li>\n<li>Boxplots and violin plots allow you to plot a numeric variable against a categorical variable.</li>\n</ul>\n<h1 id=\"chapter-2---data-and-sampling-distributions\">Chapter 2 - Data and Sampling Distributions</h1>\n<h2 id=\"random-sampling\">Random Sampling</h2>\n<h3 id=\"key-terms-8\">Key Terms</h3>\n<ul>\n<li><p><strong>Sample</strong></p>\n<ul>\n<li>A subset from a larger data set.</li>\n</ul></li>\n<li><p><strong>Population</strong></p>\n<ul>\n<li>The larger data set or idea of a data set.</li>\n</ul></li>\n<li><p><strong>N (n)</strong></p>\n<ul>\n<li>The size of the population (sample).</li>\n</ul></li>\n<li><p><strong>Random Sampling</strong></p>\n<ul>\n<li>Drawing elements into a sample at random.</li>\n</ul></li>\n<li><p><strong>Stratified Sampling</strong></p>\n<ul>\n<li>Dividing the population into strata and randomly sampling from each strata.</li>\n</ul></li>\n<li><p><strong>Stratum (pl., strata)</strong></p>\n<ul>\n<li>A homogeneous subgroup of a population with common characteristics.</li>\n</ul></li>\n<li><p><strong>Simple Random Sample</strong></p>\n<ul>\n<li>The sample that results from random sampling without stratifying the population.</li>\n</ul></li>\n<li><p><strong>Bias</strong></p>\n<ul>\n<li>Systematic error.</li>\n</ul></li>\n<li><p><strong>Sample Bias</strong></p>\n<ul>\n<li>A sample that misrepresents the population.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-8\">Key Ideas</h3>\n<ul>\n<li>Even in the era of big data, random sampling remains an important arrow in the data scientist‚Äôs quiver.</li>\n<li>Bias occurs when measurements or observations are systematically in error because they are not representative of the full population.</li>\n<li>Data quality is often more important than data quantity, and random sampling can reduce bias and facilitate quality improvements that would otherwise be prohibitively expensive.</li>\n</ul>\n<h2 id=\"selection-bias\">Selection Bias</h2>\n<h3 id=\"key-terms-9\">Key Terms</h3>\n<ul>\n<li><p><strong>Selection Bias</strong></p>\n<ul>\n<li>Bias resulting from the way in which observations are selected.</li>\n</ul></li>\n<li><p><strong>Data Snooping</strong></p>\n<ul>\n<li>Extensive hunting through data in search of something interesting.</li>\n</ul></li>\n<li><p><strong>Vast search effect</strong></p>\n<ul>\n<li>Bias or nonreproducibility resulting from repeated data modeling, or modeling data with large numbers of predictor variables.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-9\">Key Ideas</h3>\n<ul>\n<li>Specifying a hypothesis and then collecting data following randomization and random sampling principles ensures against bias.</li>\n<li>All other forms of data analysis run the risk of bias resulting from the data collection/analysis process (repeated running of models in data mining, data snooping in research, and after-the-fact selection of interesting events).</li>\n</ul>\n<h2 id=\"sampling-distribution\">Sampling Distribution</h2>\n<h3 id=\"key-terms-10\">Key Terms</h3>\n<ul>\n<li><p><strong>Sample Statistic</strong></p>\n<ul>\n<li>A metric calculated for a sample of data drawn from a larger population.</li>\n</ul></li>\n<li><p><strong>Data Distribution</strong></p>\n<ul>\n<li>The frequency distribution of individual values in a data set.</li>\n</ul></li>\n<li><p><strong>Sampling Distribution</strong></p>\n<ul>\n<li>The frequency distribution of a sample statistic over many samples or resamples.</li>\n</ul></li>\n<li><p><strong>Central Limit Theorem</strong></p>\n<ul>\n<li>The tendency of the sampling distribution to take on a normal shape as a sample size rises.</li>\n</ul></li>\n<li><p><strong>Standard Error</strong></p>\n<ul>\n<li>The variability (standard deviation) of a sample <em>statistic</em> over many values (not to be confused wuth <em>standard deviation</em>, which by itself, refers to variability of individual data <em>values</em>).</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-10\">Key Ideas</h3>\n<ul>\n<li>The frequency distribution of a sample statistic tells us how that metric would turn out differently from sample to sample.</li>\n<li>This sampling distribution can be estimated via the bootstrap, or via formulas that rely on the central limit theorem.</li>\n<li>A key metric that sums up the variability of a sample statistic is its standard error.</li>\n</ul>\n<h2 id=\"the-bootstrap\">The Bootstrap</h2>\n<h3 id=\"key-terms-11\">Key Terms</h3>\n<ul>\n<li><p><strong>Bootstrap Sample</strong></p>\n<ul>\n<li>A sample taken with replacement from an observed data set.</li>\n</ul></li>\n<li><p><strong>Resampling</strong></p>\n<ul>\n<li>The process of taking repeated samples from observed data; includes both bootstrap and permutation (shuffling) procedures.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-11\">Key Ideas</h3>\n<ul>\n<li>The bootstrap (sampling with replacement from a data set) is a powerful tool for assessing the variability of a sample statistic.</li>\n<li>The bootstrap can be applied in similar fashion in a wide variety of circumstances, without extensive study of mathematical approxumations to sampling distributions.</li>\n<li>It also allows us to estimate sampling distributions for statistics where no mathematical approximation has been developed.</li>\n<li>When applied to predictive models, aggregating multiple bootstrap sample predictions (bagging) outperforms the use of a single model.</li>\n</ul>\n<h2 id=\"confidence-intervals\">Confidence Intervals</h2>\n<h3 id=\"key-terms-12\">Key Terms</h3>\n<ul>\n<li><p><strong>Confidence Level</strong></p>\n<ul>\n<li>The percentage of confidence intervals, constructed in the same way from the same population, that are expected to contain the statistic of interest.</li>\n</ul></li>\n<li><p><strong>Interval Endpoints</strong></p>\n<ul>\n<li>The top and bottom of the confidence interval.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-12\">Key Ideas</h3>\n<ul>\n<li>Confidence intervals are the typical way to present estimates as an interval range.</li>\n<li>The more data you have, the less variable a sample estimate will be.</li>\n<li>The lower the level of confidence you can tolerate, the narrower the confidence interval will be.</li>\n<li>The bootstrap is an effective way to construct confidence intervals.</li>\n</ul>\n<h2 id=\"normal-distribution\">Normal Distribution</h2>\n<h3 id=\"key-terms-13\">Key Terms</h3>\n<ul>\n<li><p><strong>Error</strong></p>\n<ul>\n<li>The difference between a data point and a predicted or average value.</li>\n</ul></li>\n<li><p><strong>Standardize</strong></p>\n<ul>\n<li>Subtract the mean and divide by the standard deviation.</li>\n</ul></li>\n<li><p><strong>z-score</strong></p>\n<ul>\n<li>The result of standardizing an individual data point.</li>\n</ul></li>\n<li><p><strong>Standard normal</strong></p>\n<ul>\n<li>A normal distribution with mean = 0 and standard deviation = 1.</li>\n</ul></li>\n<li><p><strong>QQ-Plot</strong></p>\n<ul>\n<li>A plot to visualize how close a sample distribution is to a specified distribution. e.g.¬†normal distribution.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-13\">Key Ideas</h3>\n<ul>\n<li>The normal distribution was essential to the historical development of statistics, as it permitted mathematical approximations of uncertainty and variability.</li>\n<li>While raw data is typically not normally distributed, errors often are, as are averages and totals in large samples.</li>\n<li>To convert data to <em>z-scores</em>, you subtract the mean of the data and divide by the standard deviation; you can then compare the data to a normal distribution.</li>\n</ul>\n<h2 id=\"long-tailed-distribution\">Long-Tailed Distribution</h2>\n<h3 id=\"key-terms-14\">Key Terms</h3>\n<ul>\n<li><p><strong>Tail</strong></p>\n<ul>\n<li>The long narrow portion of a frequency distribution, where relatively extreme values occure at low frequency.</li>\n</ul></li>\n<li><p><strong>Skew</strong></p>\n<ul>\n<li>Where one tail of a distribution is longer than the other.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-14\">Key Ideas</h3>\n<ul>\n<li>Most data is not normally distributed.</li>\n<li>Assuming a normal distribution can lead to underestimates of extreme events (‚Äúblack swans‚Äù).</li>\n</ul>\n<h2 id=\"students-t-distribution\">Students t-Distribution</h2>\n<h3 id=\"key-terms-15\">Key Terms</h3>\n<ul>\n<li><p><strong>n</strong></p>\n<ul>\n<li>Sample size.</li>\n</ul></li>\n<li><p><strong>Degrees of Freedom</strong></p>\n<ul>\n<li>A parameter that allows the t-distribution to adjust to different sample sizes, statistics, and numbers of groups.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-15\">Key Ideas</h3>\n<ul>\n<li>The t-distribution is actually a family of distributions resembling the normal distribution but with thicker tails.</li>\n<li>The t-distribution is widely used as a reference basis for the distribution of sample means, differences between two sample means, regression parameters, and more.</li>\n</ul>\n<h2 id=\"binomial-distribution\">Binomial Distribution</h2>\n<h3 id=\"key-terms-16\">Key Terms</h3>\n<ul>\n<li><p><strong>Trial</strong></p>\n<ul>\n<li>An event with a discrete outcome (e.g.¬†a coin flip).</li>\n</ul></li>\n<li><p><strong>Success</strong></p>\n<ul>\n<li>The outcome of interest for a trial. (Synonym: ‚Äú1‚Äù as opposed to ‚Äú0‚Äù)</li>\n</ul></li>\n<li><p><strong>Binomial</strong></p>\n<ul>\n<li>Having two outcomes.</li>\n</ul></li>\n<li><p><strong>Binomial Trial</strong></p>\n<ul>\n<li>A trial with two outcomes. (Synonym: Bernoulli trial)</li>\n</ul></li>\n<li><p><strong>Binomial Distribution</strong></p>\n<ul>\n<li>Distribution of number of successes in <em>x</em> trials. (Synonym: Bernoulli distribution).</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-16\">Key Ideas</h3>\n<ul>\n<li>Binamial outcomes are important to model, since they represent, among other things, fundamental decisions (buy or don‚Äôt buy, click or don‚Äôt click, survive or die, etc.).</li>\n<li>A binomial trial is an experiment with two possible outcomes: one with probability <em>p</em> and the other with probability <em>1 - p</em>.</li>\n<li>With large <em>n</em>, and provided <em>p</em> is not too close to 0 or 1, the binomial distribution can be approximated by the normal distribution.</li>\n</ul>\n<h2 id=\"chi-square-distribution\">Chi-Square Distribution</h2>\n<h3 id=\"key-ideas-17\">Key Ideas</h3>\n<ul>\n<li>The chi-square distribution is typically concerned with counts of subjects or items falling into categories.</li>\n<li>The chi-square statistic measures the extent of departure from what you would expect in a null model.</li>\n</ul>\n<h2 id=\"f-distribution\">F-Distribution</h2>\n<h3 id=\"key-ideas-18\">Key Ideas</h3>\n<ul>\n<li>The F-distribution is used with experiments and linear models involving measured data.</li>\n<li>The F-statistic compares variation due to factors of interest to overall variation.</li>\n</ul>\n<h2 id=\"poisson-and-related-distributions\">Poisson and Related Distributions</h2>\n<h3 id=\"key-terms-17\">Key Terms</h3>\n<ul>\n<li><p><strong>Lambda</strong></p>\n<ul>\n<li>The rate (per unit of time or space) at which events occur.</li>\n</ul></li>\n<li><p><strong>Poisson Distribution</strong></p>\n<ul>\n<li>The frequency distribution of the number of events in sampled units of time or space.</li>\n</ul></li>\n<li><p><strong>Exponential Distribution</strong></p>\n<ul>\n<li>The frequency distribution of the time or distance from one event to the next event.</li>\n</ul></li>\n<li><p><strong>Weibull Distribution</strong></p>\n<ul>\n<li>A generalized version of the exponential distribution in which the event rate is allowed to shift over time.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-19\">Key Ideas</h3>\n<ul>\n<li>For events that occur at a constant rate, the number of events per unit time or space can be modeled as a Poisson distribution.</li>\n<li>You can also model the time or distance between one event and the next as an exponential distribution.</li>\n<li>A changing event rate over time (e.g., an increasing probability of device failure) can be modeled with the Weibull distribution.</li>\n</ul>\n<h1 id=\"chapter-3---statistical-experiments-and-significance-testing\">Chapter 3 - Statistical Experiments and Significance Testing</h1>\n<h2 id=\"ab-testiing\">A/B Testiing</h2>\n<h3 id=\"key-terms-18\">Key Terms</h3>\n<ul>\n<li><p><strong>Treatment</strong></p>\n<ul>\n<li>Something (drug, price, web headline) to which a subject is exposed.</li>\n</ul></li>\n<li><p><strong>Treatment Group</strong></p>\n<ul>\n<li>A group of subjects exposed to a specific treatment.</li>\n</ul></li>\n<li><p><strong>Control Group</strong></p>\n<ul>\n<li>A group of subjects exposed to no (or standard) treatment.</li>\n</ul></li>\n<li><p><strong>Randomization</strong></p>\n<ul>\n<li>The process of randomly assigning subjects to treatment.</li>\n</ul></li>\n<li><p><strong>Subjects</strong></p>\n<ul>\n<li>The items (web visitors, patients, etc.) that are exposed to treatment.</li>\n</ul></li>\n<li><p><strong>Test Statistics</strong></p>\n<ul>\n<li>The metric used to measure the effect of the treatment.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-20\">Key Ideas</h3>\n<ul>\n<li>Subjects are assigned to two (or more) groups that are treated exactly alike, except that the treatment under study differs from one group to another.</li>\n<li>Ideally, subjects are assigned randomly to the groups.</li>\n</ul>\n<h2 id=\"hypothesis-tests\">Hypothesis Tests</h2>\n<h3 id=\"key-terms-19\">Key Terms</h3>\n<ul>\n<li><p><strong>Null hypothesis</strong></p>\n<ul>\n<li>The hypothesis that chance is to blame.</li>\n</ul></li>\n<li><p><strong>Alternative hypothesis</strong></p>\n<ul>\n<li>Counterpoint to the null (what you hope to prove).</li>\n</ul></li>\n<li><p><strong>One-way test</strong></p>\n<ul>\n<li>Hypothesis test that counts chance results only in one direction.</li>\n</ul></li>\n<li><p><strong>Two-way test</strong></p>\n<ul>\n<li>Hypothesis test that counts chance results in two directions.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-21\">Key Ideas</h3>\n<ul>\n<li>A null hypothesis is a logical contruct embodying the notion that nothing special gas gappened, and any effect you observe is due to random chance.</li>\n<li>The hypothesis test assumes that the null hypothesis is true, creates a ‚Äúnull model‚Äù (a probability model), and tests whether the effect you observe is a reasonable outcome of that model.</li>\n</ul>\n<h2 id=\"resampling\">Resampling</h2>\n<h3 id=\"key-terms-20\">Key Terms</h3>\n<ul>\n<li><p><strong>Permutation Test</strong></p>\n<ul>\n<li>The procedure of combining two or more samples together and randomly (or exhaustively) reallocating the observations to resamples. (Synonyms: Randomization test, random permutation test, exact test).</li>\n</ul></li>\n<li><p><strong>Resampling</strong></p>\n<ul>\n<li>Drawing additionsl samples (‚Äúresamples‚Äù) from an observed data set.</li>\n</ul></li>\n<li><p><strong>With or without replacement</strong></p>\n<ul>\n<li>In sampling, whether or not an item is returned to the sample before the next draw.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-22\">Key Ideas</h3>\n<ul>\n<li>In a permutation test, multiple samples are combined and then shuffled.</li>\n<li>The shuffled values are then divided into resamples, and the statistic of interest is calculated.</li>\n<li>This process is then repeated, and the resampled statistic is tabulated.</li>\n<li>Comparing the observed value of the statistic to the resampled distribution allows you to judge whether an observed difference between samples might occur by chance.</li>\n</ul>\n<h2 id=\"statistical-significant-and-p-values\">Statistical Significant and p-Values</h2>\n<h3 id=\"key-terms-21\">Key Terms</h3>\n<ul>\n<li><p><strong>p-value</strong></p>\n<ul>\n<li>Given a chance model that embodies the null hypothesis, the p-value is the probability of obtaining results as unusual or extreme as the observed results.</li>\n</ul></li>\n<li><p><strong>Alpha</strong></p>\n<ul>\n<li>The probability threshold of ‚Äúunusualness‚Äù that chance results must surpass for actual outcomes to be deemed statistically significant.</li>\n</ul></li>\n<li><p><strong>Type 1 error</strong></p>\n<ul>\n<li>Mistakenly concluding an effect is real (when it is due to chance).</li>\n</ul></li>\n<li><p><strong>Type 2 error</strong></p>\n<ul>\n<li>Mistakenly concluding an effect is due to chance (when it is real).</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-23\">Key Ideas</h3>\n<ul>\n<li>Significant tests are used to determine whether an observed effect is within the range of chance variation for a null hypothesis.</li>\n<li>The p-value is the probability that results as extreme as the observed results might occur, given a null hypothesis model.</li>\n<li>The alpha value is the threshold of ‚Äúunusualness‚Äù in a null hypothesis chance model.</li>\n<li>Significance testing has been much more relevant for formal reporting of research than for data science (but has been fading recently, even for the former).</li>\n</ul>\n<h2 id=\"t-tests\">t-Tests</h2>\n<h3 id=\"key-terms-22\">Key Terms</h3>\n<ul>\n<li><p><strong>Test statistic</strong></p>\n<ul>\n<li>A metric for the difference or effect of interest.</li>\n</ul></li>\n<li><p><strong>t-statistic</strong></p>\n<ul>\n<li>A standardized version of common test statistic such as means.</li>\n</ul></li>\n<li><p><strong>t-distribution</strong></p>\n<ul>\n<li>A reference distribution (in this case derived from the null hypothesis), to which the observed t-statistic can be compared.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-24\">Key Ideas</h3>\n<ul>\n<li>Before the advent of computers, resampling tests were not practical, and statisticians used standard reference distributions.</li>\n<li>A test statistic could then be standardized and compared to the reference distribution.</li>\n<li>One such widely used standardized statistic is the t-statistic.</li>\n</ul>\n<h2 id=\"multiple-testing\">Multiple Testing</h2>\n<h3 id=\"key-terms-23\">Key Terms</h3>\n<ul>\n<li><p><strong>Type 1 error</strong></p>\n<ul>\n<li>Mistakenly concluding that an effect is statistically significant.</li>\n</ul></li>\n<li><p><strong>False recovery rate</strong></p>\n<ul>\n<li>Across multiple tests, the rate of making a Type 1 error.</li>\n</ul></li>\n<li><p><strong>Alpha inflation</strong></p>\n<ul>\n<li>The multiple testing phenomenon, in whic alpha, the probability of making a Type 1 error, increases as you conduct more tests.</li>\n</ul></li>\n<li><p><strong>Adjustment of p-values</strong></p>\n<ul>\n<li>Accounting for doing multiple tests on the same data.</li>\n</ul></li>\n<li><p><strong>Overfitting</strong></p>\n<ul>\n<li>Fitting the noise.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-25\">Key Ideas</h3>\n<ul>\n<li>Multiplicity in a research study or data mining project (multiple comparisons, many variables, many models, etc.) increase the risk of concluding that something is significant just by chance.</li>\n<li>For situations involving multiple statistical comparisons (i.e.¬†multiple tests of significant), there are statistical adjustment procedures.</li>\n<li>In a data mining situation, use of a holdout sample with labeled outcome variables can help avoid misleading results.</li>\n</ul>\n<h2 id=\"degrees-of-freedom\">Degrees of Freedom</h2>\n<h3 id=\"key-terms-24\">Key Terms</h3>\n<ul>\n<li><p><strong>n or sample size</strong></p>\n<ul>\n<li>The number of observations (also called rows or records) in the data.</li>\n</ul></li>\n<li><p><strong>d.f.</strong></p>\n<ul>\n<li>Degrees of freedom.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-26\">Key Ideas</h3>\n<ul>\n<li>The number of degrees of freedom (d.f.) forms part of the calculation to standardize test statistics so they can be compared to reference distributions (t-distributions, F-distributions, etc.).</li>\n<li>The conecpt of degrees of freedom lies behind factoring of categorical variables into n - 1 indicator or dummy variables when doing a regression (to avoid multicollinearity).</li>\n</ul>\n<h2 id=\"anova-analysis-of-variance\">ANOVA (Analysis of Variance)</h2>\n<h3 id=\"key-terms-25\">Key Terms</h3>\n<ul>\n<li><p><strong>Pairwise comparison</strong></p>\n<ul>\n<li>A hypothesis test (e.g.¬†of means) between two groups among multiple groups.</li>\n</ul></li>\n<li><p><strong>Omnibus test</strong></p>\n<ul>\n<li>A single hypothesis test of the overall variance among multiple group means.</li>\n</ul></li>\n<li><p><strong>Decomposition of variance</strong></p>\n<ul>\n<li>Separation of components contributing to an individual value (e.g.¬†from the overall average, from a treatment mean, and from a residual error).</li>\n</ul></li>\n<li><p><strong>F-statistic</strong></p>\n<ul>\n<li>A standardized statistic that measures the extent to which differences among group means exceed what might be expected in a chance model.</li>\n</ul></li>\n<li><p><strong>SS</strong></p>\n<ul>\n<li>‚ÄúSum of squares‚Äù, referring to deviations from some average value.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-27\">Key Ideas</h3>\n<ul>\n<li>ANOVA is a statistical procedure for analysing the results of an experiment with multiple groups.</li>\n<li>It is the extension of similar procedures for the A/B test, used to assess whether the overall variation among groups is within the range of chance variation.</li>\n<li>A useful outcome of ANOVA is the identification of variance components associated with group treatments, interaction effects, and errors</li>\n</ul>\n<h2 id=\"chi-square-test\">Chi-Square test</h2>\n<h3 id=\"key-terms-26\">Key Terms</h3>\n<ul>\n<li><p><strong>Chi-square statistic</strong></p>\n<ul>\n<li>A measure of the exten to which some observed data departs from expectation.</li>\n</ul></li>\n<li><p><strong>Expectation or expected</strong></p>\n<ul>\n<li>How we would expect the data to turn out under some assumption, typically the null hypothesis.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-28\">Key Ideas</h3>\n<ul>\n<li>A common procedure in statistics is to test whether observed data counts are consistent with an assumption of independence (e.g., propensity to buy a particular item is independent of gender).</li>\n<li>The chi-square distribution is the reference distribution (which embodies the assumption of independence) to which the observed calculate chi-square statistic must be compared.</li>\n</ul>\n<h2 id=\"multi-arm-bandits\">Multi-Arm Bandits</h2>\n<h3 id=\"key-terms-27\">Key Terms</h3>\n<ul>\n<li><p><strong>Multi-arm bandit</strong></p>\n<ul>\n<li>An imaginary slot machine with multiple arms for the customer to choose from, each with different payoffs, here taken to be an analogy for a multitreatment experiment.</li>\n</ul></li>\n<li><p><strong>Arm</strong></p>\n<ul>\n<li>A treatment in an experiment (e.g., ‚Äúheadline A in a web test‚Äù).</li>\n</ul></li>\n<li><p><strong>Win</strong></p>\n<ul>\n<li>The experimental analog of a win at the slot machine (e.g., ‚Äúcustomer clicks on the link‚Äù).</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-29\">Key Ideas</h3>\n<ul>\n<li>Traditional A/B tests envision a random sampling process, which can lead to excessive exposure to the inferior treatment.</li>\n<li>Multi-arm bandits, in contrast, alter the sampling process to incorporate information learned during the experiment and reduce the frequency of the inferior treatment.</li>\n<li>They also facilitate efficient treatment of more than two treatments.</li>\n<li>There are different algorithms for shifting sampling probability away from the inferior treatment(s) and to the p(presumed) superior one.</li>\n</ul>\n<h2 id=\"power-and-sample-size\">Power and Sample Size</h2>\n<h3 id=\"key-terms-28\">Key Terms</h3>\n<ul>\n<li><p><strong>Effect Size</strong></p>\n<ul>\n<li>The minimum size of the effect that you hope to be able to detect in a statistical test, such as ‚Äú20% improvement in click rates‚Äù.</li>\n</ul></li>\n<li><p><strong>Power</strong></p>\n<ul>\n<li>The probability of detecting a given effect size with a given sample size.</li>\n</ul></li>\n<li><p><strong>Significance level</strong></p>\n<ul>\n<li>The statistical significance level at which the test will be conducted.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-30\">Key Ideas</h3>\n<ul>\n<li>Finding out how big a sample size you need requires thinking ahead to the statistical test you plan to conduct.</li>\n<li>You must specify the minimum size of the effect that you want to detect.</li>\n<li>You must also specify the required probability of detecting that effect size (power).</li>\n<li>Finally, you must specify the significance level (alpha) at which the test will be conducted.</li>\n</ul>\n<h1 id=\"chapter-4---regression-and-prediction\">Chapter 4 - Regression and Prediction</h1>\n<h2 id=\"simple-linear-regression\">Simple Linear Regression</h2>\n<h3 id=\"key-terms-29\">Key Terms</h3>\n<ul>\n<li><p><strong>Response</strong></p>\n<ul>\n<li>The variable we are trying to predict. (Synonys: dependent variable, Y variable, target, outcome)</li>\n</ul></li>\n<li><p><strong>Independent Variable</strong></p>\n<ul>\n<li>The variable used to predict the response. (Synonyms: X variable, feature, attribute, predictor)</li>\n</ul></li>\n<li><p><strong>Record</strong></p>\n<ul>\n<li>The vector of predictor and outcome values for a specific individual or case. (Synonym: row, case, instance, example)</li>\n</ul></li>\n<li><p><strong>Intercept</strong></p>\n<ul>\n<li>The intercept of the regression line - that is, the predicted value when X = 0.</li>\n</ul></li>\n<li><p><strong>Regression coefficient</strong></p>\n<ul>\n<li>The slope of the regression line. (Synonyms: Parameter estimates, weights)</li>\n</ul></li>\n<li><p><strong>Fitted Values</strong></p>\n<ul>\n<li>The estimates obtained from the regression line. (Synonym: predicted values)</li>\n</ul></li>\n<li><p><strong>Residuals</strong></p>\n<ul>\n<li>The difference between the observed values and the fitted values. (Synonym: errors)</li>\n</ul></li>\n<li><p><strong>Least Squares</strong></p>\n<ul>\n<li>The method of fitting a regression by minimizing the sum of squared residuals. (Synonyms: ordinary least squares, OLS)</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-31\">Key Ideas</h3>\n<ul>\n<li>The regression equation models the relationship between a response variable Y and a predictor variable X as a line.</li>\n<li>A regression model yields fitted values and residuals - predictions of the response and the errors of the predictions.</li>\n<li>Regression models are typically fit by the method of least squares.</li>\n<li>Regression is used both for prediction and explanation.</li>\n</ul>\n<h2 id=\"multiple-linear-regression\">Multiple Linear Regression</h2>\n<h3 id=\"key-terms-30\">Key Terms</h3>\n<ul>\n<li><p><strong>Root mean square error</strong></p>\n<ul>\n<li>The square root of the average squared error of the regression (this is the most widely used metric to compare regression models). (Synonym: RMSE)</li>\n</ul></li>\n<li><p><strong>Residual standard error</strong></p>\n<ul>\n<li>The same as the root mean squared error, but adjusted for degrees of freedom. (Synonym: RSE)</li>\n</ul></li>\n<li><p><strong>R-squared</strong></p>\n<ul>\n<li>The proportion of variance explained by the model, from 0 to 1. (Synonym: coefficient of determination)</li>\n</ul></li>\n<li><p><strong>t-statistic</strong></p>\n<ul>\n<li>The coefficient for a predictor, divided by the standard error of the coefficient, giving a metric to compare the importance of variables in the model.</li>\n</ul></li>\n<li><p><strong>Weighted regression</strong></p>\n<ul>\n<li>Regression with the records having different weights.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-32\">Key Ideas</h3>\n<ul>\n<li>Multiple linear regression models the relationship between a response variable Y and multiple predictor variables X1 ‚Ä¶ Xp.</li>\n<li>The most important metrics to evaluate a model are root mean squared error (RMSE) and R-squared (R^2).</li>\n<li>The standard error of the coefficients can be used to measure the reliability of a variable‚Äôs contribution to a model.</li>\n<li>Stepwise regression is a way to automatically determine which variables should be included in the model.</li>\n<li>Weighted regression is used to give certain records more or less weight in fitting the equation.</li>\n</ul>\n<h2 id=\"prediction-using-regression\">Prediction Using Regression</h2>\n<h3 id=\"key-terms-31\">Key Terms</h3>\n<ul>\n<li><p><strong>Prediction Interval</strong></p>\n<ul>\n<li>An uncertainty interval around an individual predicted value.</li>\n</ul></li>\n<li><p><strong>Extrapolation</strong></p>\n<ul>\n<li>Extension of a model beyond the range of the data used to fit it.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-33\">Key Ideas</h3>\n<ul>\n<li>Extrapolation beyond the range of the data can lead to error.</li>\n<li>Confidence intervals quantify uncertainty around regression coefficients.</li>\n<li>Prediction intervals quantify uncertainty in individual predictions.</li>\n<li>Most software, R included, will produce prediction and confidence intervals in default or specified output, using formulas.</li>\n<li>The bootstrap can also be used to produce prediction and confidence intervals; the interpretation and idea are the same.</li>\n</ul>\n<h2 id=\"factor-variables\">Factor Variables</h2>\n<h3 id=\"key-terms-32\">Key Terms</h3>\n<ul>\n<li><p><strong>Dummy Variables</strong></p>\n<ul>\n<li>Binary 0-1 variables derived by recording factor data for use in regression and other models.</li>\n</ul></li>\n<li><p><strong>Reference coding</strong></p>\n<ul>\n<li>The most common type of coding used by statisticians, in which one level of a factor is used as a reference and other factors are compared to that level. (Synonym: treatment coding)</li>\n</ul></li>\n<li><p><strong>One hot encoder</strong></p>\n<ul>\n<li>A common type of coding used in the machine learning community in which all factor levels are retained. While useful for certain machine learning algorithms, this approach is not appropriate for multiple linear regression.</li>\n</ul></li>\n<li><p><strong>Deviation coding</strong></p>\n<ul>\n<li>A type of coding that compares each level against the overall mean as opposed to the reference level. (Synonym: sum contrast)</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-34\">Key Ideas</h3>\n<ul>\n<li>Factor variables need to be converted into numeric variables for us in a regression.</li>\n<li>The most common method to encode a factor variable with P distinct values is to represent them using P - 1 dummy variables.</li>\n<li>A factor variable with many levels, even in very big data sets, may need to be consolidated into a variable with fewer levels.</li>\n<li>Some factors have levels that are ordered and can be represented as a single numeric variable.</li>\n</ul>\n<h2 id=\"interpreting-the-regression-equation\">Interpreting the Regression Equation</h2>\n<h3 id=\"key-terms-33\">Key Terms</h3>\n<ul>\n<li><p><strong>Correlated Variables</strong></p>\n<ul>\n<li>When the predictor variables are highly correlated, it is difficult to interpret the individual coefficients.</li>\n</ul></li>\n<li><p><strong>Multicollinearity</strong></p>\n<ul>\n<li>When the predictor variables have perfect, or near perfect, correlation, the regression can be unstable or impossible to compute. (Synonym: collinearity)</li>\n</ul></li>\n<li><p><strong>Confounding Variables</strong></p>\n<ul>\n<li>An important predictor that, when omitted, leads to spurious relationships in a regression equation.</li>\n</ul></li>\n<li><p><strong>Main Effects</strong></p>\n<ul>\n<li>The relationship between a predictor and the outcome variable, independent of other variables.</li>\n</ul></li>\n<li><p><strong>Interactions</strong></p>\n<ul>\n<li>An interdependent relationship between two or more predictors and the response.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-35\">Key Ideas</h3>\n<ul>\n<li>Because of correlation between predictors, care must be taken in the interpretation of the coefficients in multiple linear regression.</li>\n<li>Multicollinearity can cause numerical instability in fitting the regression equation.</li>\n<li>A confounding variable is an important predictor that is omitted from a model and can lead to a regression equation with spurious relationships.</li>\n<li>An interaction term between two variables is needed if the relationship between the variables and the response is interdependent.</li>\n</ul>\n<h2 id=\"regression-diagnostics\">Regression Diagnostics</h2>\n<h3 id=\"key-terms-34\">Key Terms</h3>\n<ul>\n<li><p><strong>Standardized Residuals</strong></p>\n<ul>\n<li>Residuals divided by the standard error of the residuals.</li>\n</ul></li>\n<li><p><strong>Outliers</strong></p>\n<ul>\n<li>Records (or outcome values) that are distant from the rest of the data (or the predicted outcome).</li>\n</ul></li>\n<li><p><strong>Influential Value</strong></p>\n<ul>\n<li>A value or record whose presence or absence makes a big difference in the regression equation.</li>\n</ul></li>\n<li><p><strong>Leverage</strong></p>\n<ul>\n<li>The degree of influence that a single record has on a regression equation. (Synonym: hat-value)</li>\n</ul></li>\n<li><p><strong>Non-normal residuals</strong></p>\n<ul>\n<li>Non-normally distributed residuals can invalidate some technical requirements of regression but are usually not a concern in data science.</li>\n</ul></li>\n<li><p><strong>Heteroskedasticity</strong></p>\n<ul>\n<li>When some ranges of the outcome experience residuals with higher variance (may indicate a predictor missing from the equation).</li>\n</ul></li>\n<li><p><strong>Partial Residual Plots</strong></p>\n<ul>\n<li>A diagnostic plot to illuminate the relationship between the outcome variable and a single predictor. (Synonym: added variable plot)</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-36\">Key Ideas</h3>\n<ul>\n<li>While outliers can cause problems for small data sets, the primary interest with outliers it to identify problems with the data, or locate anomalies.</li>\n<li>Single records (including regression outliers) can have a big influence on a regression equation with small data, but this effect washes out in big data.</li>\n<li>If the regression model is used for formal inference (p-values and the like), then certain assumptions about the distribution of the residuals should be checked. In general, however, the distribution of redisuals is not critical in data science.</li>\n<li>The partial residuals plot can be used to qualitatively assess the fit for each regression term, possibly leading to alternative model specifications.</li>\n</ul>\n<h2 id=\"nonlinear-regression\">Nonlinear Regression</h2>\n<h3 id=\"key-terms-35\">Key Terms</h3>\n<ul>\n<li><p><strong>Polynomial regression</strong></p>\n<ul>\n<li>Adds polynomial terms (squares, cubes, etc.) to a regression.</li>\n</ul></li>\n<li><p><strong>Spline regression</strong></p>\n<ul>\n<li>Fitting a smooth curve with a series of polynomial segments.</li>\n</ul></li>\n<li><p><strong>Knots</strong></p>\n<ul>\n<li>Values that separate spline segments.</li>\n</ul></li>\n<li><p><strong>Generalized additive models</strong></p>\n<ul>\n<li>Spline models with automated selection of knots. (Synonym: GAM)</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-37\">Key Ideas</h3>\n<ul>\n<li>Outliers in regression are records with a large residual.</li>\n<li>Multicollinearity can cause numerical instability in fitting the regression equation.</li>\n<li>A confounding variable is an important predictor that is omitted from a model and can lead to a regression equation with spurious relationships.</li>\n<li>An interaction term between two bariables is needed if the effect of one variable depends on the level or magnitude of the other.</li>\n<li>Polynomial regression can fit nonlinear relationships between predictos and the outcome variable.</li>\n<li>Splines are series of polynomial segments strung together, joining at knots.</li>\n<li>We can automate the process of specifying the knots in splines using generalized additive models (GAM).</li>\n</ul>\n<h1 id=\"chapter-5---classification\">Chapter 5 - Classification</h1>\n<h2 id=\"naive-bayes\">Naive Bayes</h2>\n<h3 id=\"key-terms-36\">Key Terms</h3>\n<ul>\n<li><p><strong>Conditional Probability</strong></p>\n<ul>\n<li>The probability of observing some event (say, x = i) given some other event (say, Y = i), written as P(X<sub>i</sub>|Y<sub>i</sub>)</li>\n</ul></li>\n<li><p><strong>Posterior Probability</strong></p>\n<ul>\n<li>The probability of an outcome after the predictor information has been incorporated (in contrast to the <em>prior probability</em> of outcomes, not taking predictor information into account).</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-38\">Key Ideas</h3>\n<ul>\n<li>Naive Bayes works with categorical (factor) predictors and outcomes.</li>\n<li>It asks, ‚ÄúWithin each outcome category, which predictor categories are most probable?‚Äù</li>\n<li>That information is then inverted to estimate probabilities of outcome categories, given predictor values.</li>\n</ul>\n<h2 id=\"discriminant-analysis\">Discriminant Analysis</h2>\n<h3 id=\"key-terms-37\">Key Terms</h3>\n<ul>\n<li><p><strong>Covariance</strong></p>\n<ul>\n<li>A measure of the extent to which one variable varies in concert with another (i.e., similar magnitude and direction).</li>\n</ul></li>\n<li><p><strong>Discriminant function</strong></p>\n<ul>\n<li>The function that, when applied to the predictor variables, maximizes the separation of the classes.</li>\n</ul></li>\n<li><p><strong>Discriminant weights</strong></p>\n<ul>\n<li>The scores that result from the applications of the discriminant function and are used to estimate probabilities belonging to one class or another.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-39\">Key Ideas</h3>\n<ul>\n<li>Discriminant analysis works with continuous or categorical predictors, as well as with categorical outcomes.</li>\n<li>Using the covariance matrix, it calculates a <em>linear discriminant function</em>, which is used to distinguish records belonging to one class from those belonging to another.</li>\n<li>This function is applied to the records to derive weights, or scores, for each record (one weight for each possible class), which determines its estimated class.</li>\n</ul>\n<h2 id=\"logistic-regression\">Logistic Regression</h2>\n<h3 id=\"key-terms-38\">Key Terms</h3>\n<ul>\n<li><p><strong>Logit</strong></p>\n<ul>\n<li>The function that maps class membership probability to a range from plus/minus infinity (instead of 0 to 1).</li>\n</ul></li>\n<li><p><strong>Odds</strong></p>\n<ul>\n<li>The ration of ‚Äúsuccess‚Äù (1) to ‚Äúnot success‚Äù (0).</li>\n</ul></li>\n<li><p><strong>Log odds</strong></p>\n<ul>\n<li>The response in the transformed model (now linear), which gets mapped back to a probability.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-40\">Key Ideas</h3>\n<ul>\n<li>Logistic regression is like linear regression, except that the outcomes ia a binary variable.</li>\n<li>Several transformations are needed to get the model into a form that can be fit as a linear model, with the log of the odds ration as the response variable.</li>\n<li>After the linear model is fit (by an iterative process), the log odds is mapped back to a probability.</li>\n<li>Logistic regression is popular because it is computationally fast and produces a model that can be scored to new data with only a few arithmetic operations.</li>\n</ul>\n<h2 id=\"evaluating-classification-models\">Evaluating Classification Models</h2>\n<h3 id=\"key-terms-39\">Key Terms</h3>\n<ul>\n<li><p><strong>Accuracy</strong></p>\n<ul>\n<li>The percent (or proportion) of cases classified correctly.</li>\n</ul></li>\n<li><p><strong>Confusion Matrix</strong></p>\n<ul>\n<li>A tabular display (2x2 in the binary case) of the record counts by their predicted and actual classification status.</li>\n</ul></li>\n<li><p><strong>Sensitivity</strong></p>\n<ul>\n<li>The percent (or proportion) of all 1s that are correctly classified as 1s. (Synonym: Recall)</li>\n</ul></li>\n<li><p><strong>Specificity</strong></p>\n<ul>\n<li>The percent (or proportion) of all 0s that are correctly classified as 0s.</li>\n</ul></li>\n<li><p><strong>Precision</strong></p>\n<ul>\n<li>The percent (proportion) of predicted 1s that are actually 1s.</li>\n</ul></li>\n<li><p><strong>ROC Curve</strong></p>\n<ul>\n<li>A plot of sensitivity versus specificity.</li>\n</ul></li>\n<li><p><strong>Lift</strong></p>\n<ul>\n<li>A measure of how effective the model is at identifying (comparatively rare) 1s at different probability cutoffs.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-41\">Key Ideas</h3>\n<ul>\n<li>Accuracy (the percent of predicted classifications that are correct) is but a first step in evaluating a model.</li>\n<li>Other metrics (recall, specificity, precision) focus on more specific performance characteristics (e.g., recall measures how good a model is at correctly identifying 1s).</li>\n<li>AUC (area under the ROC curve) is a common metric for the ability of a model to distinguish 1s from 0s.</li>\n<li>Similarly, lift measures how effective a model is in identifying the 1s, and it is often calculated decile by decile, starting with the most probable 1s.</li>\n</ul>\n<h2 id=\"imbalanced-data\">Imbalanced Data</h2>\n<h3 id=\"key-terms-40\">Key Terms</h3>\n<ul>\n<li><p><strong>Undersample</strong></p>\n<ul>\n<li>Use fewer of the prevalent class records in the classification model. (Synonym: Downsample)</li>\n</ul></li>\n<li><p><strong>Oversample</strong></p>\n<ul>\n<li>Use more of the rare class recprds in the classification model, bootstrapping if necessary. (Synonym: Upsample)</li>\n</ul></li>\n<li><p><strong>Up weight or down weight</strong></p>\n<ul>\n<li>Attach more (or less) weight to the rare (or prevalent) class in the model.</li>\n</ul></li>\n<li><p><strong>Data generation</strong></p>\n<ul>\n<li>Like bootstrapping, except each new bootstrapped record is slightly different from its source.</li>\n</ul></li>\n<li><p><strong>z-score</strong></p>\n<ul>\n<li>The value that results after standardization.</li>\n</ul></li>\n<li><p><strong>K</strong></p>\n<ul>\n<li>The number of neighbors considered in the nearest neighbor calculation.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-42\">Key Ideas</h3>\n<ul>\n<li>Highly imbalanced data (i.e., where the interesting outcomes, the 1s, are rare) are problematic for classification algorithms.</li>\n<li>One strategy for working with imbalanced data is to balance the training data via undersampling the abundant case (or oversampling the rare case).</li>\n<li>If using all the 1s still leaves you with too few 1s, you can bootstrap the rare cases, or use SMOTE to create synthetic data similar to existing rare cases.</li>\n<li>Imbalanced data usually indicates that correctly classifying one class (the 1s) has higher value, and that value ration should be built into the assessment metric.</li>\n</ul>\n<h1 id=\"chapter-6---statistical-machine-learning\">Chapter 6 - Statistical Machine Learning</h1>\n<h2 id=\"k-nearest-neighbors\">K-Nearest Neighbors</h2>\n<h3 id=\"key-terms-41\">Key Terms</h3>\n<ul>\n<li><p><strong>Neighbor</strong></p>\n<ul>\n<li>A record that has similar predictor values to another record.</li>\n</ul></li>\n<li><p><strong>Distance Metrics</strong></p>\n<ul>\n<li>Measures that sum up in a single number how far one record is from another.</li>\n</ul></li>\n<li><p><strong>Standardization</strong></p>\n<ul>\n<li>Subtract the mean and divide by the standard deviation. (Synonym: Normalization)</li>\n</ul></li>\n<li><p><strong>z-score</strong></p>\n<ul>\n<li>The value that results after standardization.</li>\n</ul></li>\n<li><p><strong>K</strong></p>\n<ul>\n<li>The number of neighbors considered in the nearest neighbor calculation.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-43\">Key Ideas</h3>\n<ul>\n<li>K-Nearest Neighbors (KNN) classifies a record by assigning it to the class that similar records belong to.</li>\n<li>Similarity (distance) is determined by Euclidian distance or other related metrics.</li>\n<li>The number of nearest neighbors to compare a record to, K, is determined by how well the algorithm performs on training data, using different values for K.</li>\n<li>Typically, the predictor variables are standardized so that variables of large scale do not dominate the distance metric.</li>\n<li>KNN is often used as a first stage in predictive modeling, and the <em>predictor</em> value is added back into the data as a predictor for second-stage (non-KNN) modeling</li>\n</ul>\n<h2 id=\"trees\">Trees</h2>\n<h3 id=\"key-terms-42\">Key Terms</h3>\n<ul>\n<li><p><strong>Recursive partitioning</strong></p>\n<ul>\n<li>Repeatedly dividing and subdividing the data with the goal of making the outcomes in each final subdivision as homogeneous as possible.</li>\n</ul></li>\n<li><p><strong>Split value</strong></p>\n<ul>\n<li>A predictor value that divides the records into those where that predictor is less than the split value, and those where it is more.</li>\n</ul></li>\n<li><p><strong>Node</strong></p>\n<ul>\n<li>In the decision tree, or in the set of corresponding branching rules, a node is the graphical or rule representation of a split value.</li>\n</ul></li>\n<li><p><strong>Leaf</strong></p>\n<ul>\n<li>The end of a set of if-then rules, or branches of a tree - the rules that bring you to that leaf provide one of the classification rules for any record in a tree.</li>\n</ul></li>\n<li><p><strong>Loss</strong></p>\n<ul>\n<li>The number of misclassifications at a stage in the splitting process; the more losses, the more impurity.</li>\n</ul></li>\n<li><p><strong>Impurity</strong></p>\n<ul>\n<li>The extent to which a mix of classes is found in a subpartition of the data (the more mixed, the more impure). (Synonym: Heterogeneity) (Antonyms: Homogeneity, purity)</li>\n</ul></li>\n<li><p><strong>Pruning</strong></p>\n<ul>\n<li>The process of taking a fully grown tree and progressively cutting its branches back to reduce overfitting.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-44\">Key Ideas</h3>\n<ul>\n<li>Decision trees produce a set of rules to classify or predict an outcome.</li>\n<li>The rules correspond to successive partitioning of the data into subpartitions.</li>\n<li>Each partition, or split, references a specific value of a predictor variable and divides the data into records where that predictor value is above or below that split value.</li>\n<li>At each stage, the tree algorithm chooses the split that minimizes the outcome impurity within each subpartition.</li>\n<li>When no further splits can be made, the tree is fully grown and each terminal node, or leaf, has records of a single class; new cases folling that rule (split) path would be assigned that class.</li>\n<li>A fully grown tree overfits data and must be pruned back so that it captures signal and not noise.</li>\n<li>Multiple-tree algorithms like random forests and boosted trees yield better predictive performance, but they lose the rule-based communicative power of single trees</li>\n</ul>\n<h2 id=\"bagging-and-the-random-forst\">Bagging and the Random Forst</h2>\n<h3 id=\"key-terms-43\">Key Terms</h3>\n<ul>\n<li><p><strong>Ensemble</strong></p>\n<ul>\n<li>Forming a prediction by using a collection of models. (Synonym: Model averaging)</li>\n</ul></li>\n<li><p><strong>Bagging</strong></p>\n<ul>\n<li>A general technique to form a collection of models by bootstrapping the data. (Synonym: Bootstrap aggregation)</li>\n</ul></li>\n<li><p><strong>Random Forest</strong></p>\n<ul>\n<li>A type of bagged estimate based on decision tree models. (Synonym: Bagged decision trees)</li>\n</ul></li>\n<li><p><strong>Variable Importance</strong></p>\n<ul>\n<li>A measure of the importance of a precitor variable in the performance of the model.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-45\">Key Ideas</h3>\n<ul>\n<li>Ensemble models improve model accuracy by combining the results from many models.</li>\n<li>Bagging is a particular type of ensemble model based on fitting many models to bootstrapped samples of the data and averaging the models.</li>\n<li>Random forest is a special type of bagging applied to decision trees. In addition to resampling the data, the random forest algorithm samples the predictor variables when splitting the trees.</li>\n<li>A useful output from the random forest is a measure of variable importance that ranks the predictors in terms of their contribution to model accuracy.</li>\n<li>The random forest has a set of hyperparameters that should be tuned using cross-validation to avoid overfitting.</li>\n</ul>\n<h2 id=\"boosting\">Boosting</h2>\n<h3 id=\"key-terms-44\">Key Terms</h3>\n<ul>\n<li><p><strong>Ensemble</strong></p>\n<ul>\n<li>Forming a prediction by using a collection of models. (Synonym: Model averaging)</li>\n</ul></li>\n<li><p><strong>Boosting</strong></p>\n<ul>\n<li>A general technique to fit a sequence of models by giving more weight to the records with large residuals for each successive round.</li>\n</ul></li>\n<li><p><strong>Adaboost</strong></p>\n<ul>\n<li>An early version of boosting that reqeights the data based on the residuals.</li>\n</ul></li>\n<li><p><strong>Gradient Boosting</strong></p>\n<ul>\n<li>A more general form of boosting that is cast in terms of minimizing a cost function.</li>\n</ul></li>\n<li><p><strong>Stochastic Gradient Boosting</strong></p>\n<ul>\n<li>The most general algorithm for boosting that incorporates resampling of records and columns in each round.</li>\n</ul></li>\n<li><p><strong>Regularization</strong></p>\n<ul>\n<li>A technique to avoid overfitting by adding a penalty term to the cost function on the number of parameters in the model.</li>\n</ul></li>\n<li><p><strong>Hyperparameters</strong></p>\n<ul>\n<li>Parameters that need to be set before fitting the algorithm.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-46\">Key Ideas</h3>\n<ul>\n<li>Boosting is a class of ensemble models based on fitting a sequence of models, with more weight given to records with large errors in successive rounds.</li>\n<li>Stochastic gradient boosting is the most general type of boosting and offers the best performance. The most common form of stochastic gradient boosting uses tree models.</li>\n<li>XGBoost is a popular and computationally efficient software package for stochastic gradient boosting: it is available is all commong languages used in data science.</li>\n<li>Boosting is prone to overfitting the data, and the hyperparameters need to be tuned to avoid this.</li>\n<li>Regularization is one way to avoid overfitting by including a penalty term on the number of parameters (e.g., tree size) in a model.</li>\n<li>Cross-validation is especially important for boosting due to the large number of hyperparameters that need to be set.</li>\n</ul>\n<h1 id=\"chapter-7---unsupervised-learning\">Chapter 7 - Unsupervised Learning</h1>\n<h2 id=\"principal-component-analysis\">Principal Component Analysis</h2>\n<h3 id=\"key-terms-45\">Key Terms</h3>\n<ul>\n<li><p><strong>Principal Component</strong></p>\n<ul>\n<li>A linear combination of the predictor variables.</li>\n</ul></li>\n<li><p><strong>Loadings</strong></p>\n<ul>\n<li>The weights that transform the predictors into the components. (Synonym: Weights)</li>\n</ul></li>\n<li><p><strong>Screeplot</strong></p>\n<ul>\n<li>A plot of the variances of the components, showing the relative importance of the components, either as explained variance or as proportion of explained variance.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-47\">Key Ideas</h3>\n<ul>\n<li>Principal components are linear combinations of the predictor variables (numeric data only).</li>\n<li>Principal components are calculated so as to minimize correlation between components, reducing redundancy.</li>\n<li>A limited number of components will typically explain most of the variance in the outcome variable.</li>\n<li>The limited set of principal components can then be used in place of the (more numerous) original predictors, reducing dimensionality.</li>\n<li>A superficially similar technique for categorical data is correspondence analysis, but it is not useful in a big data context.</li>\n</ul>\n<h2 id=\"k-means-clustering\">K-Means Clustering</h2>\n<h3 id=\"key-terms-46\">Key Terms</h3>\n<ul>\n<li><p><strong>Cluster</strong></p>\n<ul>\n<li>A group of records that are similar.</li>\n</ul></li>\n<li><p><strong>Cluster mean</strong></p>\n<ul>\n<li>The vector of variable means for the records in a cluster.</li>\n</ul></li>\n<li><p><strong>K</strong></p>\n<ul>\n<li>The nuber of clusters.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-48\">Key Ideas</h3>\n<ul>\n<li>The number of desired clusters, K, is chosen by the user.</li>\n<li>The algorithm develops clusters by iteratively assigning records to the nearest cluster mean until clust assignments do not chance.</li>\n<li>Practical considerations usually dominate the choice of K; there is no statistically determined optimal number of clusters.</li>\n</ul>\n<h2 id=\"hierarchical-clustering\">Hierarchical Clustering</h2>\n<h3 id=\"key-terms-47\">Key Terms</h3>\n<ul>\n<li><p><strong>Dendrogram</strong></p>\n<ul>\n<li>A visual representation of the records and the hierarchy of clusters to which they belong.</li>\n</ul></li>\n<li><p><strong>Distance</strong></p>\n<ul>\n<li>A measure of how close one record is to another.</li>\n</ul></li>\n<li><p><strong>Dissimilarity</strong></p>\n<ul>\n<li>A measure of how close one cluster is to another.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-49\">Key Ideas</h3>\n<ul>\n<li>Hierarchical clustering starts with every record in its own cluster.</li>\n<li>Progressively, clusters are joined to nerby clusters until all records belong to a single cluster (the agglomerative algorithm).</li>\n<li>The agglomeration history is retained and plotted, and the user (without specifying the number of clusters beforehand) can visualize the number and the structure of clusters at different stages.</li>\n<li>Inter-cluster distances are computed in different ways, all relying on the set of all inter-record distances.</li>\n</ul>\n<h2 id=\"model-based-clustering\">Model-Based Clustering</h2>\n<h3 id=\"key-ideas-50\">Key Ideas</h3>\n<ul>\n<li>Clusters are assumed to derive from different data-generating processes with different probability distributions.</li>\n<li>Different models are fit, assuming different numbers of (typically normal) distributions.</li>\n<li>The method chooses the model (and the associated number of clusters) that fits the data well without using too many parameters (i.e., overfitting).</li>\n</ul>\n<h2 id=\"scaling-data\">Scaling Data</h2>\n<h3 id=\"key-terms-48\">Key Terms</h3>\n<ul>\n<li><p><strong>Scaling</strong></p>\n<ul>\n<li>Squashing or expanding data, usually to bring multiple variables to the same scale.</li>\n</ul></li>\n<li><p><strong>Normalization</strong></p>\n<ul>\n<li>One method of scaling - subtracting the mean and dividing by the standard deviation. (Synonym: Standardization)</li>\n</ul></li>\n<li><p><strong>Gower‚Äôs Distance</strong></p>\n<ul>\n<li>A scaling algorithm applied to mixed numeric and categorical data to bring all variables to a 0-1 range.</li>\n</ul></li>\n</ul>\n<h3 id=\"key-ideas-51\">Key Ideas</h3>\n<ul>\n<li>Variables measured on different scaled need to be transformed to similar scales so that their impact on algorithms is not determined mainly by their scale.</li>\n<li>A common scaling method is normalization (standardization) - subtracting the mean and dividing by the standard deviation.</li>\n<li>Another method is Gower‚Äôs distance, which scales all variables to the 0-1 range (it is often used with mixed numeric and categorical data).</li>\n</ul>\n"
  },
  {
    "_id": "design_patterns",
    "_body": "<h1 id=\"design-principles\">Design Principles</h1>\n<ul>\n<li><h3 id=\"encapsulate-what-varies\">Encapsulate What Varies</h3>\n<p>Identify the aspects of your application that vary and separate them from what stays the same. Take what varies and ‚Äúencapsulate‚Äù it so it won‚Äôt affect the rest of your code. This results in fewer unintended consequences from code changes and more flexibility in the system.</p></li>\n<li><h3 id=\"program-to-an-interface-not-an-implementation\">Program to an Interface, NOT an Implementation</h3></li>\n<li><h3 id=\"favor-composition-over-inheritance\">Favor Composition over Inheritance</h3></li>\n<li><h3 id=\"loose-coupling\">Loose Coupling</h3>\n<p>Strive for loosely coupled designes between objects that interact. Loosely coupled designes allow us to build flexible systems that can handle change because they minimize the interdependency between objects.</p></li>\n<li><h3 id=\"open-closed-principle\">Open-Closed Principle</h3>\n<p>Class should be open for extension, but closed for modification. The goal is to allow classes to be easily extended to incorporate new behavior without modifying existing code. What do we get if we accomplish this? Designes that are resilient to change and flexible enough to take on new functionality to meet changing requirements. Be careful when choosing the areas of code that need to be extended: applying the Open-Closed Principle everywhere is wasteful and unnecessary, and can lead to complex, hard-to-understand code.</p></li>\n<li><h3 id=\"dependency-inversion-principle\">Dependency Inversion Principle</h3>\n<p>Depend upon abstractions. Do not depend upon concrete classes. High-level components should not depend on low-level components; rather, they should both depend on abstractions.</p></li>\n<li><h3 id=\"principle-of-least-knowledge\">Principle of Least Knowledge</h3>\n<p>Talk only to your immediate friends. When you are designing a system, be careful of the number of classes it interacts with and also how it comes to interact with those classes. This prevents us from creating designs that have a large number of classes coupled together so that changes in one part of the system cascade to other parts, When you build a lot of dependencoes between many classes, you are building a fragile system that will be costly to maintain and complicated for others to understand. The principle provides some guidelines (Law of Demeter): take any object; now from any method in that object, the principle tells us that we should only invoke methods that belong to:</p>\n<ul>\n<li>The object itself</li>\n<li>Objects passed in as a parameter to the method</li>\n<li>Any object the method creates or instantiates</li>\n<li>Any components of the object</li>\n</ul></li>\n<li><h3 id=\"the-hollywood-principle\">The Hollywood Principle</h3>\n<p>‚ÄúDon‚Äôt call us, we‚Äôll call you‚Äù The Hollywood Principle gives us a way to prevent ‚Äúdependency rot.‚Äù Dependency rot happens when you have high-level components depending on low-level components depending on high-level components depending on side-ways components depending on low-level components, and so on. When rot sets in, no one can easily understand the way a system is designed. With the Hollywood principle, we allow low-level components to hook themselves into a system, but the high-level components determine when they are needed, and how. In other words, the high-level components give the low-level components a ‚Äúdon‚Äôt call us, we‚Äôll call you‚Äù treatment.</p></li>\n<li><h3 id=\"single-responsibility-principle\">Single Responsibility Principle</h3>\n<p>A class should have only one reason to change. Every responsibility of a class is an area of potential change, More than one responsibility means more than one area of change. This principle guides us to keep each class to a single responsibility.</p></li>\n</ul>\n<h1 id=\"design-patterns\">Design Patterns</h1>\n<p>NOTE: Code examples and classes that are referenced are found <a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns\">here</a>.</p>\n<h2 id=\"creational-patterns\">Creational Patterns</h2>\n<hr />\n<h3 id=\"simple-factory\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/simplefactory\">Simple Factory</a></strong></h3>\n<p>Simple Factory isn‚Äôt an actual design pattern, more of a programming idiom that is commonly used.</p>\n<h3 id=\"abstract-factory\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/abstractfactory\">Abstract Factory</a></strong></h3>\n<p>The Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.</p>\n<h3 id=\"factory-method\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/factorymethod\">Factory Method</a></strong></h3>\n<p>The Factory Method Pattern defines an interface for creating an object, but lets subclasses decide which clas to instantiate. Factory method lets a class defer instantiation to subclasses.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">abstract</span> Product <span class=\"fu\">factoryMethod</span><span class=\"op\">(</span><span class=\"bu\">String</span> type<span class=\"op\">)</span></span></code></pre></div>\n<h3 id=\"singleton\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/singleton\">Singleton</a></strong></h3>\n<p>The Singleton Pattern ensures a class has only one instannce, and provides a global point of access to it.</p>\n<p>The <code>getInstance()</code> method is static, which means it‚Äôs a class method, so you can conveniently access this method from anywhere in your code using <code>Singleton.getInstance()</code>. That‚Äôs just as easy as accessing a global variable, but we get benefits like lazy initialization from the Singleton. The <code>uniqueInstance</code> class variable holds our one and only instance of Singleton. A class implementing the Singleton pattern is more than a Singleton; it is a general purpose class with its own set of data and methods.</p>\n<h4 id=\"handling-multithreading-issues\">Handling Multithreading Issues</h4>\n<p><em>SynchronizedSingleton</em> - By adding the synchronized keyword to <code>getInstance()</code>, we force every thread to wait its turn before it can enter the method. That is, notwo threads may enter the method at the same time. Keep in mind that synchronizing a method can decrease performance by a factor of 100, so if a high-traffic part of your code begins using <code>getInstance()</code>, another option might have to be considered.</p>\n<p><em>EagerSingleton</em> - If your application always creates and uses an instance of the Singleton or the overhead of creation and runtime aspects of the Singleton are not onerous, you may want to create your Singleton eagerly.</p>\n<p><em>DoubleCheckedLockingSingleton</em> - With double-checked locking, we first check to see if an instance is created, and if not, THEN we synchronize. This way, we only synchronize the first time through. The <code>volatile</code> keyword ensure that multiple threads handle the <code>uniqueInstance</code> variable correctly when it is being initialized to the Singleton instance</p>\n<h2 id=\"structural-patterns\">Structural Patterns</h2>\n<hr />\n<h3 id=\"adapter\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/adapter\">Adapter</a></strong></h3>\n<p>The Adapter Pattern converts the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn‚Äôt otherwise because of incompatible interfaces.</p>\n<h3 id=\"composite\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/composite\">Composite</a></strong></h3>\n<p>The Composite Pattern allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. Using a composite structures, we can apply the same operations over both composites and individual objects. In other words, in most cases, we can ignore the differences between compositions of objects and individual objects.</p>\n<h3 id=\"decorator\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/decorator\">Decorator</a></strong></h3>\n<p>The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p>\n<p>The java.io package heavily uses the decorator design pattern.</p>\n<p>Each decorator HAS-A (wraps) a components, which means the decorator has an instance variable that holds a reference to a components. Decorators implement the same interface or abstract class as the component they are going to decorate.</p>\n<h3 id=\"facade\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/facade\">Facade</a></strong></h3>\n<p>The Facade Pattern provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.</p>\n<h2 id=\"behavioral-patterns\">Behavioral Patterns</h2>\n<hr />\n<h3 id=\"command\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/command\">Command</a></strong></h3>\n<p>The Command pattern encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations.</p>\n<p>Command declares an interface for all commands. A command is invoked through its <code>execute()</code> method, which asks a receiver to perform an action. It can also perform <code>undo()</code> actions.</p>\n<h3 id=\"iterator\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/iterator\">Iterator</a></strong></h3>\n<p>The Iterator Pattern provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. It also places the task of traversal on the iterator object, not on the aggregate, which simplifies the aggregate interface and implementation, and places the responsibility where it should be.</p>\n<p>The Iterator interface provides the interface that all iterators must implement, and a set of methods for traversing over elements of a collection. Here we‚Äôre using the java.util.Iterator. If you don‚Äôt want to use Java‚Äôs Iterator interface, you can always create your own.</p>\n<h3 id=\"observer\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/observer\">Observer</a></strong></h3>\n<p>The Oberver Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependets are notified and updated automatically.</p>\n<p>Objects use the Subject interface to register as observers and also to remove themselves from being observers. Each Subject can have many observers.</p>\n<p>A concrete subject always implements the Subject interface. In addition to the register and remove methods, the concrete subject implements a notifyObservers() method that is used to updateall the current observers whenever state changes. The concrete subject may also have mthods for setting and getting its state.</p>\n<p>All potential observers need to implement the Observer interface. This interface just has one method, update(), that gets called when the Subject‚Äôs state changes.</p>\n<p>Concrete observers can be any class that implements the Observer interface. Each observer registers with a concrete subject to recieve updates.</p>\n<h3 id=\"state\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/state\">State</a></strong></h3>\n<p>The State Pattern allows an object to alter its behavior when its internal state changes. The object will appear to change its class.</p>\n<p>The Context is the class that cna have a number of internal states. In our example, the GumballMachine is the Context. Whenever the request() is made on the Context it is delegated to the state to hande.</p>\n<p>The State interface defines a common interface for all concrete states; the states all implement the same interface so they are interchangeable. State</p>\n<p>ConcreteStates handle requests from the Context. Each ConcreteState provides its own implementation for a request. In this way, when the Context changes state, its behavior will change as well</p>\n<p>Many concrete states are possible</p>\n<h3 id=\"strategy\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/strategy\">Strategy</a></strong></h3>\n<p>The Strategy pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary indepentently from clients that use it.</p>\n<h3 id=\"template-method\"><strong><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/templatemethod\">Template Method</a></strong></h3>\n<p>The Template Method Pattern defines the skelwton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm‚Äôs structure</p>\n<p>The AbstractClass contains the template method and abstract versions of the operations used in the template method. The template method makes use of the primitiveOperations to implement an algorithm. It is decoupled from the actual implementation of these operations.</p>\n<p>There may be many ConcreteClasses, each implementing the full set of operations required by the template method. The ConcreteClass implements the abstract operations, which are called when the templateMethod() needs them.</p>\n<p>A hook is a method that is declared in the abstract class, but only given an empty or default implementation. This gives subclasses the ability to ‚Äúhook into‚Äù the algorithm at various points, if they wish; a subclass is also free to ignore the hook.</p>\n<h2 id=\"compound---a-collection-of-design-patterns-used-together\"><a href=\"https://github.com/brombaut/BEC/tree/master/design-patterns/compound\">Compound</a> - A collection of design patterns used together</h2>\n<hr />\n<p><em>What did we do?</em></p>\n<p><strong>We started with a bunch of Quackables‚Ä¶</strong></p>\n<p><strong>A goose came along and wanted to act like a Quackable too.</strong> So we used the <em>Adapter Pattern</em> to adapt the goose to a Quackable. Now, you can call quack() on a goose wrapped in the adapter and it will honk!</p>\n<p><strong>Then, the Quackologists decided they wanred to count quacks.</strong> So we used the <em>Decorator Pattern</em> to add a QuackCounter decorator that keeps track of the number of times quack() is called, and then delegates the quack to the Quackable it‚Äôs wrapping.</p>\n<p><strong>But the Quackologists were worried they‚Äôd forget to add the QuackCounter decorator.</strong> So we used the <em>Abstract Factory Pattern</em> to create ducks for them. Now, whenever they want a duck, they ask the factory for one, and it hands back a decorated duck. (And don‚Äôt forget, they can also use another duck factory if they want an undecorated duck.)</p>\n<p><strong>We had management problems keeping track of all those ducks and geese and quackables.</strong> So we used the <em>Composite Pattern</em> to group Quackables into Flocks. The pattern also allows the Quackologist to create sub-flocks to manage duck families. We used the <em>Iterator Pattern</em> in our implementation by using java.util‚Äôs iterator in ArrayList.</p>\n<p><strong>The Quackologists also wanted to be notified when any Quackable quacked.</strong> So we used the <em>Observer Pattern</em> to let the Quackologists register as Quackable Observers. Now they‚Äôre notified every time any Quackable quacks. We used iterator again in this implementation. The Quackologists can even use the Observer Pattern with their composites.</p>\n"
  },
  {
    "_id": "publish_npm_from_actions",
    "_body": "<h2 id=\"add-npm-access-token\">Add NPM access token</h2>\n<p>Follow the steps at <a href=\"https://docs.npmjs.com/about-access-tokens\">https://docs.npmjs.com/about-access-tokens</a>.</p>\n<h2 id=\"create-a-dispatchable-github-actions-yaml-file.\">Create a dispatchable GitHub Actions YAML file.</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode yml\"><code class=\"sourceCode yaml\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># .github/workflows/npm_publish.yml</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Publish new version to NPM</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">on</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">workflow_dispatch</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">inputs</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"fu\">version_update_type</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">description</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"st\">&quot;SemVer update version type (patch, minor, or major)&quot;</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">required</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"ch\">true</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">default</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"st\">&quot;patch&quot;</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">jobs</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">publish_to_npm</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">runs-on</span><span class=\"kw\">:</span><span class=\"at\"> ubuntu-latest</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">steps</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> actions/checkout@v2</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">run</span><span class=\"kw\">:</span><span class=\"at\"> git config --global user.name &#39;Ben Rombaut&#39;</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">run</span><span class=\"kw\">:</span><span class=\"at\"> git config --global user.email &#39;rombaut.benj@gmail.com&#39;</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">run</span><span class=\"kw\">:</span><span class=\"at\"> npm ci</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">run</span><span class=\"kw\">:</span><span class=\"at\"> npm version ${{ github.event.inputs.version_update_type }}</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> actions/setup-node@v2</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">with</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">node-version</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"st\">&quot;16&quot;</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">registry-url</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"st\">&quot;https://registry.npmjs.org&quot;</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">run</span><span class=\"kw\">:</span><span class=\"at\"> npm publish --access public</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">env</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">NODE_AUTH_TOKEN</span><span class=\"kw\">:</span><span class=\"at\"> ${{ secrets.NPM_TOKEN }}</span></span></code></pre></div>\n<p>You can now manually trigger this GitHub Action from the Actions tab on the GiHub Repo, specifying whether you should bump a patch, minor, or major version of your package.</p>\n"
  },
  {
    "_id": "add_codecov_to_project",
    "_body": "<h2 id=\"install-codecov\">Install <a href=\"https://www.npmjs.com/package/codecov\">Codecov</a></h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> install codecov <span class=\"at\">--save-dev</span></span></code></pre></div>\n<h2 id=\"get-codecov-token-for-repo\">Get Codecov Token for Repo</h2>\n<p>Navigate directly to the specific repository using:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">https://codecov.io/</span><span class=\"op\">&lt;</span>repo-provider<span class=\"op\">&gt;</span>/<span class=\"op\">&lt;</span>account-name<span class=\"op\">&gt;</span>/<span class=\"op\">&lt;</span>repo-name<span class=\"op\">&gt;</span></span></code></pre></div>\n<p>E.g., <a href=\"https://app.codecov.io/gh/brombaut/article-scraper\">https://app.codecov.io/gh/brombaut/article-scraper</a></p>\n<h2 id=\"uploading-from-local-machine\">Uploading From Local Machine</h2>\n<p>Run the following command on your local machine to upload local coverage statistics:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">./node_modules/.bin/codecov</span> <span class=\"at\">--token</span><span class=\"op\">=&lt;</span>your_repo_token<span class=\"op\">&gt;</span></span></code></pre></div>\n<h2 id=\"uploading-from-github-actions\">Uploading From GitHub Actions</h2>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode yml\"><code class=\"sourceCode yaml\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># .github/workflows/publish_codecov.yml</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Publish coverage results to Codecov</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">on</span><span class=\"kw\">:</span><span class=\"at\"> workflow_dispatch</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">jobs</span><span class=\"kw\">:</span></span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">publish_to_npm</span><span class=\"kw\">:</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">runs-on</span><span class=\"kw\">:</span><span class=\"at\"> ubuntu-latest</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">steps</span><span class=\"kw\">:</span></span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Upload coverage to Codecov</span></span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> codecov/codecov-action@v1</span></span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">with</span><span class=\"kw\">:</span></span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">token</span><span class=\"kw\">:</span><span class=\"at\"> ${{ secrets.CODECOV_TOKEN }}</span></span></code></pre></div>\n<h2 id=\"adding-repository-badge\">Adding Repository Badge</h2>\n<p>The following markdown provides an example for how to add a badge to a README file for CodeCov.</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">[![Codecov]</span><span class=\"er\">(</span><span class=\"ex\">https://img.shields.io/codecov/c/github/brombaut/article-scraper</span><span class=\"kw\">)</span><span class=\"ex\">]</span><span class=\"er\">(</span><span class=\"ex\">https://app.codecov.io/gh/brombaut/article-scraper</span><span class=\"kw\">)</span></span></code></pre></div>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://docs.codecov.com/docs/quick-start\">https://docs.codecov.com/docs/quick-start</a></li>\n</ul>\n"
  },
  {
    "_id": "github_actions_scheduled",
    "_body": "<h2 id=\"create-a-scheduled-github-actions-yaml-file.\">Create a scheduled GitHub Actions YAML file.</h2>\n<p>You can schedule a workflow to run at specific UTC times using POSIX cron syntax. Scheduled workflows run on the latest commit on the default or base branch. The shortest interval you can run scheduled workflows is once every 5 minutes.</p>\n<p>This example triggers the workflow every day at 5:30 and 17:30 UTC:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode yml\"><code class=\"sourceCode yaml\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># .github/workflows/scheduled_action.yml</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Translate Goodreads to F3</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">on</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">schedule</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">    # * is a special character in YAML so you have to quote this string</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">cron</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"st\">&quot;30 5,17 * * *&quot;</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">jobs</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">goodreads_f3_translator</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">runs-on</span><span class=\"kw\">:</span><span class=\"at\"> ubuntu-latest</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">    </span><span class=\"fu\">steps</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> actions/checkout@v2</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> actions/setup-python@v2</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">with</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">python-version</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"st\">&quot;3.x&quot;</span><span class=\"co\"> # Version range or exact version of a Python version to use, using SemVer&#39;s version range syntax</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">architecture</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"st\">&quot;x64&quot;</span><span class=\"co\"> # optional x64 or x86. Defaults to x64 if not specified</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> actions/setup-node@v2</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">with</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">node-version</span><span class=\"kw\">:</span><span class=\"at\"> </span><span class=\"st\">&quot;16&quot;</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">uses</span><span class=\"kw\">:</span><span class=\"at\"> BSFishy/pip-action@v1</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">with</span><span class=\"kw\">:</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">          </span><span class=\"fu\">requirements</span><span class=\"kw\">:</span><span class=\"at\"> requirements.txt</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> NPM Clean Install</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">run</span><span class=\"kw\">:</span><span class=\"at\"> npm ci</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Run goodreads_translator.py</span></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        </span><span class=\"fu\">run</span><span class=\"kw\">:</span><span class=\"at\"> python goodreads_translator.py</span></span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">      </span><span class=\"kw\">-</span><span class=\"at\"> </span><span class=\"fu\">name</span><span class=\"kw\">:</span><span class=\"at\"> Run F3 Syncer</span></span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">        run</span><span class=\"kw\">: </span><span class=\"ch\">|</span></span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>          npm run build</span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>          npm run start</span></code></pre></div>\n<p>Cron syntax has five fields separated by a space, and each field represents a unit of time.</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</span> minute <span class=\"er\">(</span><span class=\"ex\">0</span> <span class=\"at\">-</span> 59<span class=\"kw\">)</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">‚îÇ</span> ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ hour <span class=\"er\">(</span><span class=\"ex\">0</span> <span class=\"at\">-</span> 23<span class=\"kw\">)</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">‚îÇ</span> ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the month <span class=\"er\">(</span><span class=\"ex\">1</span> <span class=\"at\">-</span> 31<span class=\"kw\">)</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">‚îÇ</span> ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ month <span class=\"er\">(</span><span class=\"ex\">1</span> <span class=\"at\">-</span> 12 or JAN-DEC<span class=\"kw\">)</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">‚îÇ</span> ‚îÇ ‚îÇ ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ day of the week <span class=\"er\">(</span><span class=\"ex\">0</span> <span class=\"at\">-</span> 6 or SUN-SAT<span class=\"kw\">)</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">‚îÇ</span> ‚îÇ ‚îÇ ‚îÇ ‚îÇ</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">‚îÇ</span> ‚îÇ ‚îÇ ‚îÇ ‚îÇ</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">‚îÇ</span> ‚îÇ ‚îÇ ‚îÇ ‚îÇ</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">*</span> <span class=\"pp\">*</span> <span class=\"pp\">*</span> <span class=\"pp\">*</span> <span class=\"pp\">*</span></span></code></pre></div>\n<p>Information on notifications for scheduled actions can be found at <a href=\"https://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration#notifications-for-workflow-runs\">https://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration#notifications-for-workflow-runs</a></p>\n<p>All information gathered at <a href=\"https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows\">https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows</a>.</p>\n<p>Other helpful references</p>\n<ul>\n<li>No assurance on scheduled jobs: <a href=\"https://github.community/t/no-assurance-on-scheduled-jobs/133753\">https://github.community/t/no-assurance-on-scheduled-jobs/133753</a></li>\n<li>GitHub Actions workflow not triggering at scheduled time: <a href=\"https://upptime.js.org/blog/2021/01/22/github-actions-schedule-not-working/\">https://upptime.js.org/blog/2021/01/22/github-actions-schedule-not-working/</a></li>\n</ul>\n"
  },
  {
    "_id": "linear_regression",
    "_body": "<h2 id=\"fitting-a-line\">Fitting a Line</h2>\n<p>Linear regression is the statistical method for fitting a line to data where the relationship between two variables, x and y, can be modeled by a straight line with some error:</p>\n<p>y = Œ≤<sub>0</sub> + Œ≤<sub>1</sub>x + Œµ</p>\n<p>The values Œ≤<sub>0</sub> and Œ≤<sub>1</sub> represent the model‚Äôs parameters (Œ≤ is the Greek letter beta), and the error is represented by Œµ (the Greek letter epsilon). The parameters are estimated using data, and we write their point estimates as b<sub>0</sub> and b<sub>1</sub>. When we use x to predict y, we usually call x the explanatory or predictor variable, and we call y the response; we also often drop the term when writing down the model since our main focus is often on the prediction of the average outcome.</p>\n<h2 id=\"residuals\">Residuals</h2>\n<p><strong>Residuals</strong> are the leftover variation in the data after accounting for the model fit:</p>\n<blockquote>\n<p>Data = Fit + Residual</p>\n</blockquote>\n<p>If an observation is above the regression line, then its residual, the vertical distance from the observation to the line, is positive. Observations below the line have negative residuals. One goal in picking the right linear model is for these residuals to be as small as possible.</p>\n<blockquote>\n<p><b>RESIDUAL: DIFFERENCE BETWEEN OBSERVED AND EXPECTED</b><br />\nThe residual of the i<sup>th</sup> observation (x<sup>i</sup>, y<sup>i</sup>) is the difference of the observed response (y<sup>i</sup>) and the response we would predict based on the model fit (y^<sup>i</sup>):<br />\ne<sup>i</sup> = y<sup>i</sup> ‚àí yÀÜ<sup>i</sup><br />\nWe typically identify y^<sup>i</sup> by plugging x<sup>i</sup> into the model.</p>\n</blockquote>\n<p>Residuals are helpful in evaluating how well a linear model fits a data set. We often display them in a <strong>residual plot</strong>. The residuals are plotted at their original horizontal locations but with the vertical coordinate as the residual. For instance, the point (85.0, 98.6) had a residual of 7.45, so in the residual plot it is placed at (85.0, 7.45)</p>\n<h2 id=\"correlation\">Correlation</h2>\n<blockquote>\n<p><b>CORRELATION: STRENGTH OF A LINEAR RELATIONSHIP</b><br />\n<b>Correlation</b>, which always takes values between -1 and 1, describes the strength of the linear relationship between two variables. We denote the correlation by <b>R</b>.</p>\n</blockquote>\n<p>Only when the relationship is perfectly linear is the correlation either -1 or 1. If the relationship is strong and positive, the correlation will be near +1. If it is strong and negative, it will be near -1. If there is no apparent linear relationship between the variables, then the correlation will be near zero. The correlation is intended to quantify the strength of a linear trend. Nonlinear trends, even when strong, sometimes produce correlations that do not reflect the strength of the relationship.</p>\n<h2 id=\"least-squares-regression\">Least Squares Regression</h2>\n<h3 id=\"an-objective-measure-for-finding-the-best-line\">An objective measure for finding the best line</h3>\n<p>We begin by thinking about what we mean by ‚Äúbest‚Äù. Mathematically, we want a line that has small residuals. The first option that may come to mind is to minimize the sum of the residual magnitudes:</p>\n<p>|e<sub>1</sub>| + |e<sub>2</sub>| + ¬∑¬∑¬∑ + |e<sub>n</sub>|</p>\n<p>However, a more common practice is to choose the line that minimizes the sum of the squared residuals:</p>\n<p>e<sub>1</sub><sup>2</sup> + e<sub>2</sub><sup>2</sup> + ¬∑¬∑¬∑ + e<sub>n</sub><sup>2</sup></p>\n<p>The line that minimizes this <strong>least squares criterion</strong> is commonly called the <strong>least squares line</strong>. It is usually chosen over minimizing the sum of residual magnitudes without any squaring because, in many applications, a residual twice as large as another residual is more than twice as bad. For example, being off by 4 is usually more than twice as bad as being off by 2. Squaring the residuals accounts for this discrepancy.</p>\n<h3 id=\"conditions-for-the-least-squares-line\">Conditions for the least squares line</h3>\n<p>When fitting a least squares line, we generally require:</p>\n<ul>\n<li>Linearity</li>\n<li>Nearly normal residuals</li>\n<li>Constant variability</li>\n<li>Independent observations</li>\n</ul>\n<h3 id=\"interpreting-regression-model-parameter-estimates.\">Interpreting regression model parameter estimates.</h3>\n<p>The slope describes the estimated difference in the y variable if the explanatory variable x for a case happened to be one unit larger. The intercept describes the average outcome of y if x = 0 and the linear model is valid all the way to x = 0, which in many applications is not the case.</p>\n<h3 id=\"extrapolation-is-treacherous\">Extrapolation is treacherous</h3>\n<p>Linear models can be used to approximate the relationship between two variables. However, these models have real limitations. Linear regression is simply a modeling framework. The truth is almost always much more complex than our simple line. For example, we do not know how the data outside of our limited window will behave.</p>\n<h2 id=\"using-r2-to-describe-the-strength-of-fit\">Using <i>R<sup>2</sup></i> to Describe the Strength of Fit</h2>\n<p>We evaluated the strength of the linear relationship between two variables earlier using the correlation, <em>R</em>. However, it is more common to explain the strength of a linear fit using <i>R<sup>2</sup></i>, called <strong>R-squared</strong>. If provided with a linear model, we might like to describe how closely the data cluster around the linear fit. The <i>R<sup>2</sup></i> of a linear model describes the amount of variation in the response that is explained by the least squares line.</p>\n<!-- TODO: Types of outliers in linear regression -->\n<hr>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://www.openintro.org/book/os/\">OpenIntro Statistics - Fourth Edition</a></li>\n</ul>\n"
  },
  {
    "_id": "shell_script_utilities",
    "_body": "<h2 id=\"common-shell-programs\">Common Shell Programs</h2>\n<h3 id=\"basename\">basename</h3>\n<p>If you need to strip the extension from a filename or get rid of the directories in a full pathname, use the <strong>basename</strong> command. Some examples:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> basename example.html .html</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> basename /usr/local/bin/example</span></code></pre></div>\n<p>In both cases, <strong>basename</strong> returns <em>example</em>. The firs command strips the <em>.html</em> suffix from <em>example.html</em>, and the second removes the directories from the full pathname.</p>\n<p>This example shows how you can use <strong>basename</strong> in a script to convert GIF image files to the PNG format:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">#!/bin/bash</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> file <span class=\"kw\">in</span> <span class=\"pp\">*</span>.gif<span class=\"kw\">;</span> <span class=\"cf\">do</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\"># exit if there are no files</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">if</span> <span class=\"bu\">[</span> <span class=\"ot\">!</span> <span class=\"ot\">-f</span> <span class=\"va\">$file</span> <span class=\"bu\">]</span><span class=\"kw\">;</span> <span class=\"cf\">then</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">exit</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">fi</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"va\">b</span><span class=\"op\">=</span><span class=\"va\">$(</span><span class=\"fu\">basename</span> <span class=\"va\">$file</span> .gif<span class=\"va\">)</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"bu\">echo</span> Converting <span class=\"va\">$b</span>.gif to <span class=\"va\">$b</span>.png</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"ex\">giftopnm</span> <span class=\"va\">$b</span>.gif <span class=\"kw\">|</span> <span class=\"ex\">pnmtopng</span> <span class=\"op\">&gt;</span> <span class=\"va\">$b</span>.png</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">done</span></span></code></pre></div>\n<h3 id=\"awk\">awk</h3>\n<p>The <strong>awk</strong> command is not a simple single-purpose command; it‚Äôs actually a powerful programming language. However, many people use <strong>awk</strong> only to do one thing - to pick a single field out of an input stream like this:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> ls <span class=\"at\">-l</span> <span class=\"kw\">|</span> <span class=\"fu\">awk</span> <span class=\"st\">&#39;{print $5}&#39;</span></span></code></pre></div>\n<p>This command prints the fifth field of the <strong>ls</strong> output (ths file size). The result is a list of file sizes.</p>\n<h3 id=\"sed\">sed</h3>\n<p>The <strong>sed</strong> (‚Äústream editor‚Äù) program is an automatic text editor that takes an input stream (a file or the standard input), alters it according to some expression, and prints the results to standard output. In general, <strong>sed</strong> takes an address and an operation as one argument. The address is a set of lines, and the command determines what to do with the lines.</p>\n<p>A very common task for <strong>sed</strong> is to substitute some text for a regular expression, like this:</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> sed <span class=\"st\">&#39;s/exp/text/&#39;</span></span></code></pre></div>\n<p>If you wanted to replace the first colon in each line of <em>/etc/passwd</em> with a <em>%</em> and send the result to the standard output, then you‚Äôd do it like this:</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> sed <span class=\"st\">&#39;s/:/%/&#39;</span> /etc/passwd</span></code></pre></div>\n<p>To substitute <em>all</em> colons in <em>/etc/passwd</em>, add the <strong>g</strong> (global) modifier to the end of the operation, like this:</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> sed <span class=\"st\">&#39;s/:/%/g&#39;</span> /etc/passwd</span></code></pre></div>\n<p>Here‚Äôs a command that operates on a per-line basis; it reads <em>/etc/passwd</em>, deletes lines three through six, and sends the result to the standard output:</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> sed 3,6d /etc/passwd</span></code></pre></div>\n<p>In this example, <strong>3,6</strong> is the address (a range of lines), and <strong>d</strong> is the operation (delete). If you omit the address, <strong>sed</strong> operates on all lines in its input stream. The two most common <strong>sed</strong> operations are probably <strong>s</strong> (search and replace) and <strong>d</strong>.</p>\n<p>You can also use a regular expression as the address. This command deletes any line that matches the regular expression <strong>exp</strong>.</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> sed <span class=\"st\">&#39;/exp/d&#39;</span></span></code></pre></div>\n<p>In all of these examples, <strong>sed</strong> writes to the standard output, and this is by far the most common usage. With no file arguments, <strong>sed</strong> reads from the standard input, a pattern that you‚Äôll frequently encounter in shell pipelines.</p>\n<h3 id=\"xargs\">xargs</h3>\n<p>When you have to run one command on a huge number of files, the command or shell may respond that it can‚Äôt fit all of the arguments in its buffer. Use <strong>xargs</strong> to get around this problem by running a command on each file name in its standard input stream.</p>\n<p>Many people use <strong>xargs</strong> with the <strong>find</strong> command. For example, the following script can help you verify that every file in the current directory tree that ends with <em>.gif</em> is actually a GIF image:</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> find . <span class=\"at\">-name</span> <span class=\"st\">&#39;*.gif&#39;</span> <span class=\"at\">-print</span> <span class=\"kw\">|</span> <span class=\"fu\">xargs</span> file</span></code></pre></div>\n<p>Here, <strong>xargs</strong> runs the <strong>file</strong> command. However, this invocation can cause errors or leave your system open to security problems, because filenames can include spaces and newlines. When writing a script, use the following form instead, which changes the <strong>find</strong> output separator and the <strong>xargs</strong> argument delimiter from a newline to a NULL character:</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> find . <span class=\"at\">-name</span> <span class=\"st\">&#39;*.gif&#39;</span> <span class=\"at\">-printO</span> <span class=\"kw\">|</span> <span class=\"fu\">xargs</span> <span class=\"at\">-O</span> file</span></code></pre></div>\n<p><strong>xargs</strong> starts a <em>lot</em> of processes, so don‚Äôt expect great performance if you have a large list of files.</p>\n<p>You may need to add two dashes (‚Äì) to the end of your <strong>xargs</strong> command if there‚Äôs a chance that any of the target files start with a single dash (-). The double dash (‚Äì) tells a program that any arguments that follow are filenames, not options. However, keep in mind that not all programs support the use of a double dash.</p>\n<p>When using <strong>find</strong>, there‚Äôs an alternative to <strong>xargs</strong>: the <strong>-exec</strong> option. However, the syntax is somewhat tricky because you need to supply braces, {}, to substitute the filename and a literal <strong>;</strong> to indicate the end of the command. Here‚Äôs how to perforom the preceding task using only <strong>find</strong>:</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> find . <span class=\"at\">-name</span> <span class=\"st\">&#39;*.gif&#39;</span> <span class=\"at\">-exec</span> file {} <span class=\"dt\">\\;</span></span></code></pre></div>\n<h3 id=\"expr\">expr</h3>\n<p>If you need to use arithmetic operations in your shell scripts, the <strong>expr</strong> command can help (and even do some string operations). For example, the command <strong>expr 1 + 2</strong> prints 3. (Run <strong>expr ‚Äìhelp</strong> for a full list of operations.)</p>\n<p>The <strong>expr</strong> command is a clumsy, slow way of doing math. If you find yourself using it frequently, you should probably be using a language like Python instead of a shell script.</p>\n<h3 id=\"exec\">exec</h3>\n<p>The <strong>exec</strong> command is a built-in shell feature that replaces the current shell process with the program you name after <strong>exec</strong>. It carries out the <strong>exec()</strong> system call. This feature is designed for saving system resources, but remember tgar rgere‚Äôs no return; when you run <strong>exec</strong> in a shell script, the script and shell running the script are gone, replaced by the new command.</p>\n<p>To test this in a shell window, try running <strong>exec cat</strong>. After you cress <strong>CTRL-D</strong> or <strong>CTRL-C</strong> to terminate the <strong>cat</strong> program, your window should disappear because its child process no longer exists.</p>\n<h2 id=\"archiving-and-compressing-files\">Archiving and Compressing Files</h2>\n<p>Two common utilities for compressing and bundling files and directories are <code>gzip</code> and <code>tar</code></p>\n<h3 id=\"gzip\">gzip</h3>\n<p>The program <code>gzip</code> (GNU Zip) is one of the current standard Unix compression programs. A file that ends with <em>.gz</em> is a GNU Zip archive. Use <code>gunzip file.gz</code> to uncompress <em>&lt;file&gt;.gz</em> and remove the suffix; to compress the file again, use <code>gzip file</code>.</p>\n<h3 id=\"tar\">tar</h3>\n<p>Unlike the ZIP programs for other operating systems, <code>gzip</code> does not create archives of files; that is, it doesn‚Äôt pack multiple files and directories into a single file. To create an archive, use <code>tar</code> instead:</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> tar cvf archive.tar file1 file2 ...</span></code></pre></div>\n<p>Archives created by <code>tar</code> usually have a <em>.tar</em> suffix. The <em>c</em> flag activates <em>create mode</em>. The <em>v</em> flag activates verbose output (you can also do <em>vv</em>). The <em>f</em> flag denotes the file option. The next argument on the command line after the <em>f</em> flag must be the archive file for <code>tar</code> to create. You <strong>must</strong> use this option followed by a filename at all times, except with tape drives. To use standard input or output, set the filename to a dash (-).</p>\n<h4 id=\"unpacking-.tar-files\">Unpacking .tar files</h4>\n<p>To unpack a <em>.tar</em> file with <code>tar</code> use the <em>x</em> flag:</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> tar xvf archive.tar</span></code></pre></div>\n<h3 id=\"compressed-archives-.tar.gz\">Compressed Archives (<em>.tar.gz</em>)</h3>\n<p>To unpack compressed archives, work from right to left; get rid of the <em>.gz</em> first and then worry about the <em>.tar</em>. For example:</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb14-1\"><a href=\"#cb14-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> gunzip file.tar.gz</span>\n<span id=\"cb14-2\"><a href=\"#cb14-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> tar xvf file.tar</span></code></pre></div>\n<h3 id=\"zcat\">zcat</h3>\n<p>A better way to do what was just shown is to combine archival and compression functions with a pipeline. For example, this command pipeline unpackage <em>&lt;file&gt;.tar.gz</em>:</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> zcat file.tar.gx <span class=\"kw\">|</span> <span class=\"fu\">tar</span> xvf <span class=\"at\">-</span></span></code></pre></div>\n<p>The <code>zcat</code> command is the same as <code>gunzip -dc</code>. The <em>-d</em> option decompresses and the <em>-c</em> option sends the result to standard output (in this case, to the <code>tar</code> command).</p>\n<p>Because it‚Äôs so common to use <code>zcat</code>, the version of <code>tar</code> that comes with Linux has a shortcut. You can use <em>z</em> as an option to automatically invoke <code>gzip</code> on the archive; this works both for extracting an archive (with the <em>x</em> or <em>t</em> modes in <code>tar</code>) and creating one (with <em>c</em>). For example, use the following command to verify (search for tar table-of-contents mode) a compressed archive:</p>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">$</span> tar ztvf file.tar.gz</span></code></pre></div>\n<p>However, try to remember that you‚Äôre actually performing two steps when taking the shortcut.</p>\n<blockquote>\n<p>NOTE: A .tgz file is the same as a .tar.gz file. The suffix is meant to fit into FAT (MS-DOS-based filesystems).</p>\n</blockquote>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://nostarch.com/howlinuxworks3\">How Linux Works - 3rd Edition</a></li>\n</ul>\n"
  },
  {
    "_id": "tensorflow_overview",
    "_body": "<h2 id=\"tensorflow-overview\">Tensorflow Overview</h2>\n<p>What does TensorFlow offer?</p>\n<ul>\n<li>Its core is very similar to NumPy, but with GPU support.</li>\n<li>It supports distributed computing (across multiple devices and servers).</li>\n<li>It includes a kind of just-in-time (JIT) compiler that allows it to optimize computations for speed and memory usage. It works by extracting the <em>computation graph</em> from a Python function, then optimizing it (e.g., by pruning unused nodes), and finally running it efficiently (e.g., by automatically running independent operations in parallel).</li>\n<li>Computation graphs can be exported to a portable format, so you can train a TensorFlow model in one environment (e.g., using Python on Linux) and run it in another (e.g., using Java on an Android device).</li>\n<li>It implements autodiff and provides some excellent optimizers so you can easily minimize all sorts of of loss functions.</li>\n</ul>\n<p>At the lowest level, each TensorFlow operation (<em>op</em> for short) is implemented using highly efficient C++ code. Many operations have multiple implementations called <em>kernels</em>: each kernel is dedicated to a specific device type, such as CPUs, GPUs, or even TPUs (<em>tensor processing units</em>). GPUs can dramatically speed up computations by splitting them into many smaller chuncks and running them in parallel across many GPU threads. TPUs are even faster: they are custom ASIC chips built specifically for Deep Learning operations.</p>\n<h3 id=\"high-level-deep-learning-apis\">High-level Deep Learning APIs</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/keras\">tf.keras</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/estimator\">tf.estimator</a></p>\n</blockquote>\n<h3 id=\"low-level-deep-learning-apis\">Low-level Deep Learning APIs</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/nn\">tf.nn</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/losses\">tf.losses</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/metrics\">tf.metrics</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/optimizers\">tf.optimizers</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/train\">tf.train</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/initializers\">tf.initializers</a></p>\n</blockquote>\n<h3 id=\"autodiff\">Autodiff</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/GradientTape\">tf.GradientTape</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/gradients\">tf.gradients()</a></p>\n</blockquote>\n<h3 id=\"io-and-preprocessing\">I/O and Preprocessing</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/data\">tf.data</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/feature_column\">tf.feature_column</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/audio\">tf.audio</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/image\">tf.image</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/io\">tf.io</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/queue\">tf.queue</a></p>\n</blockquote>\n<h3 id=\"visualization-with-tensorboard\">Visualization with TensorBoard</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/summary\">tf.summary</a><br />\n</p>\n</blockquote>\n<h3 id=\"deployment-and-optimization\">Deployment and Optimization</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/distribute\">tf.distribute</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/saved_model\">tf.saved_model</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/autograph\">tf.autograph</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/graph_util\">tf.graph_util</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/lite\">tf.lite</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/quantization\">tf.quantization</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/tpu\">tf.tpu</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/xla\">tf.xla</a></p>\n</blockquote>\n<h3 id=\"special-data-structures\">Special Data Structures</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/lookup\">tf.lookup</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/nest\">tf.nest</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/ragged\">tf.ragged</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/sets\">tf.sets</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/sparse\">tf.sparse</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/strings\">tf.strings</a></p>\n</blockquote>\n<h3 id=\"mathematics-including-linear-algebra-and-signal-processing\">Mathematics (including linear algebra and signal processing)</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/math\">tf.math</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/linalg\">tf.linalg</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/signal\">tf.signal</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/random\">tf.random</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/bitwise\">tf.bitwise</a></p>\n</blockquote>\n<h3 id=\"miscellaneous\">Miscellaneous</h3>\n<blockquote>\n<p><a href=\"https://www.tensorflow.org/api_docs/python/tf/compat\">tf.compat</a><br />\n<a href=\"https://www.tensorflow.org/api_docs/python/tf/config\">tf.config</a><br />\nand more‚Ä¶</p>\n</blockquote>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.tensorflow.org/api_docs/python/tf\">TensorFlow API Docs</a></li>\n<li><a href=\"https://www.oreilly.com/library/view/hands-on-machine-learning/9781492032632/\">Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition</a></li>\n</ul>\n"
  },
  {
    "_id": "progress_bars_in_jupyter",
    "_body": "<h2 id=\"tqdm\">TQDM</h2>\n<p>I‚Äôve found myself mapping functions onto large data sets lately, which sometimes takes minutes or even hours to complete. Using <a href=\"https://github.com/tqdm/tqdm\">TQDM</a> has been super helpful for giving me an idea of how long these operations can take. Of course the next step is to parallelize everything‚Ä¶</p>\n<h2 id=\"quick-bonus-pip-install-from-a-notebook\">[Quick Bonus] Pip Install from a Notebook</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> sys</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">!</span>{sys.executable} <span class=\"op\">-</span>m pip install ipywidgets</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># If using Jupyter Labs</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">!</span>{sys.executable} <span class=\"op\">-</span>m jupyter labextension install <span class=\"op\">@</span>jupyter<span class=\"op\">-</span>widgets<span class=\"op\">/</span>jupyterlab<span class=\"op\">-</span>manager</span></code></pre></div>\n<h2 id=\"import-tqdm-and-setup\">Import TQDM and Setup</h2>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> pandas <span class=\"im\">as</span> pd</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> tqdm.notebook <span class=\"im\">import</span> tqdm, trange</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>tqdm.pandas()</span></code></pre></div>\n<h2 id=\"now-you-can-use-progress-bars\">Now you can use progress bars</h2>\n<p>For loops:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> idx, row <span class=\"kw\">in</span> tqdm(df.iterrows()):</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\"># Do something on each row</span></span></code></pre></div>\n<p>Apply on DataFrame:</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> foo(row):</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\"># Do something on each row</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>df.progress_apply(foo, axis<span class=\"op\">=</span><span class=\"dv\">1</span>)</span></code></pre></div>\n"
  },
  {
    "_id": "linux_directory_hierarchy_essentials",
    "_body": "<p>The details of the Linux directory structure are outlines in the Filesystem Hierarchy Standard, or FHS (<a href=\"https://refspecs.linuxfoundation.org/fhs.shtml\">https://refspecs.linuxfoundation.org/fhs.shtml</a>). Below are the most important subdirectories in root:</p>\n<h3 id=\"bin\"><strong><em>/bin</em></strong></h3>\n<p>Contains ready-to-run programs (also known as <em>executables</em>), including most of the basic Unix commands such as <code>ls</code> and <code>cp</code>. Most of the programs in <em>/bin</em> are in binary format, having been created by a C compiler, but some are shell scripts in modern systems.</p>\n<h3 id=\"dev\"><strong><em>/dev</em></strong></h3>\n<p>Contains device files.</p>\n<h3 id=\"etc\"><strong><em>/etc</em></strong></h3>\n<p>This core system configuration directory contains the user password, boot, device, networking, and other setup files.</p>\n<h3 id=\"home\"><strong><em>/home</em></strong></h3>\n<p>Holds home (personal) directories for regular users.</p>\n<h3 id=\"lib\"><strong><em>/lib</em></strong></h3>\n<p>An abbreviation for <em>library</em>, this directory holds library files containing code that executables can use. There are two types of libraries: static and shared. The <em>lib</em> directory should contain only shared libraries, but other lib directories, such as <em>/usr/lib</em>, contain both varieties as well as other auxiliary files.</p>\n<h3 id=\"proc\"><strong><em>/proc</em></strong></h3>\n<p>Provides system statistics through a browsable directory-and-file interface. Much of the <em>/proc</em> subdirectory structure on Linux is unique, but many other Unix variants have similar features. The <em>/proc</em> directory contains information about currently running processes as well as some kernel parameters.</p>\n<h3 id=\"run\"><strong><em>/run</em></strong></h3>\n<p>Contains runtime data specific to the system, including certain process IDs, socket files, status records, and, in many cases, system logging. This is a relatively recent addition to the root directory; in older systems, you can find it in <em>/var/run</em>. On newer systems, <em>/var/run</em> is a symbolic link to <em>/run</em>.</p>\n<h3 id=\"sys\"><strong><em>/sys</em></strong></h3>\n<p>This directory is similar to <em>/proc</em> in that is provides a device and system interface.</p>\n<h3 id=\"sbin\"><strong><em>/sbin</em></strong></h3>\n<p>The place for system executables. Programs in <em>/sbin</em> directories relate to system management, so regular users usually do not have <em>/sbin</em> components in their command paths. Many of the utilities found here don‚Äôt work if not run as root.</p>\n<h3 id=\"tmp\"><strong><em>/tmp</em></strong></h3>\n<p>A storage area for smaller, temporary files that you don‚Äôt care much about. Any user may read to and write from <em>/tmp</em>, but many users may not have permission to access another user‚Äôs files there. Many programs use this directory as a workspace. If something is extremely important, don‚Äôt put it in <em>/tmp</em> because most distributions clear <em>/tmp</em> when the machine boots and some even remove its old files periodically. Also, don‚Äôt let <em>/tmp</em> fill up with garbage because its space is usually shared with something critical (the rest of <em>/</em>, for example).</p>\n<h3 id=\"usr\"><strong><em>/usr</em></strong></h3>\n<p>Although pronounced ‚Äúuser‚Äù, this subdirectory has no user files. Instead, it contains a large directory hierarchy, including the bulk of the Linux system. Many of the directory names in <em>/usr</em> are the same as those in the root directory (like <em>/usr/bin</em> and <em>/usr/lib</em>), and they hold the same type of files. (The reason that the root directory does not contain the complete system is primarily historic - in the past, it was to keep space requirements low for the root.)</p>\n<blockquote>\n<p>The <em>/usr</em> directory may look relatively clean at first glance, but a quick look at <em>/usr/bin</em> and <em>/usr/lib</em> reveals that there‚Äôs a lot here; <em>/usr</em> is where most of the user-space programs and date reside. In addition to <em>/usr/bin</em>, <em>/usr/sbin</em> and <em>/usr/lib</em>, <em>/usr</em> contains the following:</p>\n<h4 id=\"usrinclude\"><strong><em>/usr/include</em></strong></h4>\n<p>Holds header files used by the C compiler.</p>\n<h4 id=\"usrlocal\"><strong><em>/usr/local</em></strong></h4>\n<p>Is where admins can install their own software. Its structure should like like that of <em>/</em> and <em>/usr</em>.</p>\n<h4 id=\"usrman\"><strong><em>/usr/man</em></strong></h4>\n<p>Contains manual pages.</p>\n<h4 id=\"usrshare\"><strong><em>/usr/share</em></strong></h4>\n<p>Contains files that should work on other kinds of Unix machines with no loss of functionality. These are usually auxiliary data files that programs and libraries read as necessary. In the past, networks of machines would share this directory from a file server, but today a <em>share</em> directory used in this manner is rare because there are no realistic space restraints for these kinds of files on contemporary systems. Instead, on Linux distributions, you‚Äôll find <em>/man</em>, <em>/info</em>, and many other subdirectories here because it is an easily understood convention.</p>\n</blockquote>\n<h3 id=\"var\"><strong><em>/var</em></strong></h3>\n<p>The variable subdirectory, where programs record information that can change over the course of time. System logging, user tracking, caches, and other files that system programs create and manage are here. (You‚Äôll notice a <em>/var/tmp</em> directory here, but the system doesn‚Äôt wipe it on boot.)</p>\n<h3 id=\"boot\"><strong><em>/boot</em></strong></h3>\n<p>Contains kernel boot loader files. These files pertain only to the very first stage of the Linux startup procedure, so you won‚Äôt find information about how Linux starts up its services in this directory.</p>\n<h3 id=\"media\"><strong><em>/media</em></strong></h3>\n<p>A base attachment point for removable media such as flash drives that is found in many distributions.</p>\n<h3 id=\"opt\"><strong><em>/opt</em></strong></h3>\n<p>This may contain additional third-party software. Many systems don‚Äôt use <em>/opt</em>.</p>\n<h2 id=\"references\">References</h2>\n<ul>\n<li><a href=\"https://nostarch.com/howlinuxworks3\">How Linux Works - 3rd Edition</a></li>\n</ul>\n"
  },
  {
    "_id": "principal_component_analysis",
    "_body": "<p><em>Principal Component Analysis</em> (PCA) is by far the most popular dimensionality reduction algorithm. First it identifies the hyperplace that lies closest to the data, and then it projects the data onto it.</p>\n<h2 id=\"preserving-the-variance\">Preserving the Variance</h2>\n<p>Before you can project the training set onto a lower-dimensional hyperplace, you first need to choose the right hyperplace. For example, in the image below, a simple 2D dataset is represented on the left plot, along with three different axes (i.e., 1D hyperplanes). On the right is the result of the projection of the dataset onto each of these axes. It can be seen that the projection onto the solid line preserves the maximum variance, while the projection onto the dotted line preserves very little variance and the projection onto the dashed line preserves an intermediate amount of variance.</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/principal_component_analysis/selecting_subspace_to_project_on.png\" /></p>\n<p>It seems reasonable to select the axis that preserves the maximum amount of variance, as it will most likely lose less information than the other projections. Another way to justify this choice is that it is the axis that minimizes the mean squared distance between the original dataset and its projection onto that axis. This is the rather simple idea behind PCA.</p>\n<h2 id=\"principal-components\">Principal Components</h2>\n<p>PCA identifies the axis that accounts for the largest amount of variance in the training set. In the image above, it is the solid line. It also finds a second axis, orthogonal to the first one, that accounts for the largest amount of the remaining variance. In this 2D example there is no choice: it is the dotted line. If it were a higher-dimensional dataset, PCA would also find a third axis, orthogonal to both previous axes, and a fourth, and a fifth, and so on - as many axes as the number of dimensions in the dataset.</p>\n<p>The <em>i<sup>th</sup></em> axis is called the <em>i<sup>th</sup> principal component</em> (PC) of the data. In the example above, the first PC is the axis on which vector <strong>c<sub>1</sub></strong> lies, and the second PC is the axis on which vector <strong>c<sub>2</sub></strong> lies.</p>\n<p>So how can you find the principal components of a training set? Luckily, there is a standard matrix factorization technique called <em>Singular Value Decomposition</em> (SVD) that can decompose the training set matrix <strong>X</strong> into the matrix multiplication of three matrices <strong>U</strong> <strong>Œ£</strong> <strong>V</strong><sup>T</sup>, where <strong>V</strong> contains the unit vectors that define all principal components that we are looking for:</p>\n<blockquote>\n<p><strong>V</strong> = [<strong>c<sub>1</sub></strong> <strong>c<sub>2</sub></strong> ‚Ä¶ <strong>c<sub>n</sub></strong>]</p>\n</blockquote>\n<h2 id=\"projecting-down-to-d-dimensions\">Projecting Down to d Dimensions</h2>\n<p>Once you have identified all the principal components, you can reduce the dimensionality of the dataset down to <em>d</em> dimensions by projecting it onto the hyperplace defined by the first <em>d</em> principal components. Selecting this hyperplane ensures that the projection will preserve as much variance as possible.</p>\n<p>To project the training set onto the hyperplace and obtain a reduced dataset <strong>X</strong><sub><em>d</em>-proj</sub> of dimensionality <em>d</em>, compute the matrix multiplication of the training set matrix <strong>X</strong> by the matrix <strong>W</strong><sub>d</sub>, defined as the matrix containing the first <em>d</em> columns of <strong>V</strong>:</p>\n<blockquote>\n<p><strong>X</strong><sub><em>d</em>-proj</sub> = <strong>XW</strong><sub>d</sub></p>\n</blockquote>\n<h2 id=\"using-scikit-learn\">Using Scikit-Learn</h2>\n<p>Scikit-Learn‚Äôs PCA class uses SVD decomposition to implement PCA. The following code applies PCA to reduce the dimensionality of the dataset downt o two dimensions (note that it automatically takes care of centering the data):</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.decomposition <span class=\"im\">import</span> PCA</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>pca <span class=\"op\">=</span> PCA(n_components<span class=\"op\">=</span><span class=\"dv\">2</span>)</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>X2D <span class=\"op\">=</span> pca.fit_transform(x)</span></code></pre></div>\n<p>After fitting the PCA transformer to the dataset, its <code>components<em></code> attribute holds the transpose of <strong>W</strong><sub>d</sub> (e.g., the unit vectore that defines the first principal component is equal to <code>pca.components</em>.T[:, 0]</code>).</p>\n<h2 id=\"explained-variance-ratio\">Explained Variance Ratio</h2>\n<p>Another useful piece of information is the <em>explained variance ratio</em> of each principal component, available via the <code>explained<em>variance_ratio</em></code> variable. The ratio indicates the proportion of the dataset‚Äôs variance that lies along each principal component. For example:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;&gt;&gt;</span> pca.explained_variance_ratio_</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>array([<span class=\"fl\">0.84248607</span>, <span class=\"fl\">0.14631839</span>])</span></code></pre></div>\n<p>This output tells you that 84.2% of the dataset‚Äôs variance lies along the first PC, and 14.6% lies along the second PC. This leaves less than 1.2% for the third PC, so it is reasonable to assume that the third PC probably carries little information.</p>\n<h2 id=\"choosing-the-right-number-of-dimensions.\">Choosing the Right Number of Dimensions.</h2>\n<p>Instead of arbitrarily choosing the number of dimensions to reduce down to, it is simpler to choose the number of dimensions that add up to a sufficiently large portion of the variance (e.g., 95%). Unless, of course, you are reducing dimensionality for data visualization - in that case you will want to reduce the dimensionality down to 2 or 3.</p>\n<p>The following code performs PCA without reducing dimensionality, then computes the minimum number of dimensions required to preserve 95% of the traiing set‚Äôs variance:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>pca <span class=\"op\">=</span> PCA()</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>pca.fit(X_train)</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>cumsum <span class=\"op\">=</span> np.cumsum(pca.explained_variance_ratio_)</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>d <span class=\"op\">=</span> np.argmax(cumsum <span class=\"op\">&gt;=</span> <span class=\"fl\">0.95</span>) <span class=\"op\">+</span> <span class=\"dv\">1</span></span></code></pre></div>\n<p>You could then set <code>n_components=d</code> and run PCA again, But there is a much better option: instead of specifying the number of principal components you want to preserve, you can set <code>n_components</code> to be a float between 0.0. and 1.0, indicating the ratio of variance you wish to preserve:</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>pca <span class=\"op\">=</span> PCA(n_components<span class=\"op\">=</span><span class=\"fl\">0.95</span>)</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_reduced <span class=\"op\">=</span> pca.fit_transform(X_train)</span></code></pre></div>\n<p>Yet another option is to plot the explained variance as a function of the number of dimensions (simply plot <code>cumsum</code>). There will usually be an elbow in the curve, where the explained variance stops growing fast.</p>\n<h3 id=\"references\">References</h3>\n<ul>\n<li><a href=\"https://www.oreilly.com/library/view/hands-on-machine-learning/9781492032632/\">Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow, 2nd Edition</a></li>\n</ul>\n"
  },
  {
    "_id": "package_lock",
    "_body": "<h2 id=\"what-are-lock-files\">What are lock files?</h2>\n<p>A lock file describes the entire dependency tree as it is resolved when created including nested dependencies with specific versions. In <code>npm</code> these are called <code>package-lock.json</code> and in <code>yarn</code> they are called <code>yarn.lock</code>. In both <code>npm</code> and <code>yarn</code> they are placed alongside the <code>package.json</code> file.</p>\n<p>A <code>package-lock.json</code> looks similar to this:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode json\"><code class=\"sourceCode json\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">{</span></span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;name&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;lockfile-demo&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;version&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;1.0.0&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;lockfileVersion&quot;</span><span class=\"fu\">:</span> <span class=\"dv\">1</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;requires&quot;</span><span class=\"fu\">:</span> <span class=\"kw\">true</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"dt\">&quot;dependencies&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;ansi-styles&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"dt\">&quot;version&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;3.2.1&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"dt\">&quot;resolved&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"dt\">&quot;integrity&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"dt\">&quot;requires&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"dt\">&quot;color-convert&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;^1.9.0&quot;</span></span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"fu\">}</span></span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"fu\">},</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"dt\">&quot;chalk&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"dt\">&quot;version&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;2.4.2&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"dt\">&quot;resolved&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"dt\">&quot;integrity&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"dt\">&quot;requires&quot;</span><span class=\"fu\">:</span> <span class=\"fu\">{</span></span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"dt\">&quot;ansi-styles&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;^3.2.1&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"dt\">&quot;escape-string-regexp&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;^1.0.5&quot;</span><span class=\"fu\">,</span></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"dt\">&quot;supports-color&quot;</span><span class=\"fu\">:</span> <span class=\"st\">&quot;^5.3.0&quot;</span></span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"fu\">}</span></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"fu\">}</span></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">}</span></span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">}</span></span></code></pre></div>\n<p>A <code>yarn.lock</code> is formatted differently but contains similar information:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode yml\"><code class=\"sourceCode yaml\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.</span></span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># yarn lockfile v1</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">ansi-styles@^3.2.1</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  version &quot;3.2.1&quot;</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  resolved &quot;https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.2.1.tgz</span><span class=\"co\">#41fbb20243e50b12be0f04b8dedbf07520ce841d&quot;</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  integrity sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">dependencies</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        color-convert &quot;^1.9.0&quot;</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">chalk@^2.4.2</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  version &quot;2.4.2&quot;</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  resolved &quot;https://registry.yarnpkg.com/chalk/-/chalk-2.4.2.tgz</span><span class=\"co\">#cd42541677a54333cf541a49108c1432b44c9424&quot;</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  integrity sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">  </span><span class=\"fu\">dependencies</span><span class=\"kw\">:</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        ansi-styles &quot;^3.2.1&quot;</span></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        escape-string-regexp &quot;^1.0.5&quot;</span></span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"at\">        supports-color &quot;^5.3.0&quot;</span></span></code></pre></div>\n<p>Both of these contain some important pieces of information:</p>\n<ul>\n<li>The actual version of every dependency installed</li>\n<li>The dependencies of every dependency</li>\n<li>The resolved package including a checksum to verify the integrity of the package</li>\n</ul>\n<h2 id=\"why-do-we-need-lock-files\">Why do we need lock files?</h2>\n<p>Lock files are intended to pin down (i.e., lock) all versions for the entire dependency tree at the time that the lock file is created. Why is it important to use a package lock file and lock package versions?</p>\n<p>Without a package lock file, a package manager such as <code>Yarn</code> or <code>npm</code> will resolve the most current version of a package in real-time during the dependencies install of a package, rather than the version that was originally intended for the specific package.</p>\n<p>For example, if a project depends on package <code>dummy-pkg: ^1.0.0</code> then two separate installs executed at different times could retrieve different versions of <em>dummy-pkg</em>. This can happen if a user installs <em>dummy-pkg</em>, which retrieved version 1.0.0 and then that package releases a new version 1.0.1 several minutes later. Thereafter, a second user running an install in the project would end up retrieving dummy-pkg version 1.0.1 instead of version 1.0.0.</p>\n<p>Using lock files ensures that installations remain identical and reproducible throughout their entire dependency tree, across users, such as team members working together, and across systems, such as when running a CI build.</p>\n<h3 id=\"why-is-this-better-than-simply-locking-down-all-your-dependencies-in-the-package.json-file\">Why is this better than simply locking down all your dependencies in the <code>package.json</code> file?</h3>\n<p>For example, just specify:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode json\"><code class=\"sourceCode json\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"er\">&quot;express&quot;:</span> <span class=\"er\">&quot;4.14.0&quot;</span></span></code></pre></div>\n<p>In this example, <code>npm</code> will install <code>express</code> package, version <code>4.14.0</code>. But the thing that you won‚Äôt think about is ‚Äúwhat if express published new version with the same version number?‚Äù or ‚Äúwhat if express didn‚Äôt lock their package versions?‚Äù. These are the questions you can‚Äôt know an answer for.</p>\n<h3 id=\"what-about-npm-ci\">What about <code>npm ci</code>?</h3>\n<p><code>npm ci</code> bypasses a package‚Äôs <code>package.json</code> to install modules from a package‚Äôs lockfile. This ensures reproducible builds‚Äîyou are getting exactly what you expect on every install.</p>\n<p>This command is similar to <code>npm install</code>, except it‚Äôs meant to be used in automated environments such as test platforms, continuous integration, and deployment ‚Äì or any situation where you want to make sure you‚Äôre doing a clean install of your dependencies.</p>\n<p>In short, the main differences between using <code>npm install</code> and <code>npm ci</code> are:</p>\n<ul>\n<li>The project <strong>must</strong> have an existing <code>package-lock.json</code> or <code>npm-shrinkwrap.json</code>.</li>\n<li>If dependencies in the package lock do not match those in <code>package.json</code>, <code>npm ci</code> will exit with an error, instead of updating the package lock.</li>\n<li><code>npm ci</code> can only install entire projects at a time: individual dependencies cannot be added with this command.</li>\n<li>If a <code>node_modules</code> is already present, it will be automatically removed before <code>npm ci</code> begins its install.</li>\n<li>It will never write to <code>package.json</code> or any of the package-locks: installs are essentially frozen.</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode bash\"><code class=\"sourceCode bash\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">npm</span> ci <span class=\"co\"># will install exactly what&#39;s in the package-lock.json</span></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"ex\">yarn</span> install <span class=\"at\">--frozen-lock-file</span> <span class=\"co\"># will install exactly what&#39;s in yarn.lock without updating it</span></span></code></pre></div>\n<h4 id=\"references\">References:</h4>\n<ul>\n<li><a href=\"https://docs.npmjs.com/cli/v8/commands/npm-ci\">https://docs.npmjs.com/cli/v8/commands/npm-ci</a></li>\n</ul>\n<h3 id=\"what-about-transitive-dependencies\">What about transitive dependencies?</h3>\n<p>Both <code>yarn</code> and <code>npm</code> will never take into account lock files for transient dependencies; these are completely ignored by package managers. Only the top-level project, where an install action is performed, is looked up for its entire dependency tree through a lock file to which the package manager refers as the dependencies manifest.</p>\n<h4 id=\"references-1\">References</h4>\n<ul>\n<li><a href=\"https://snyk.io/blog/what-is-package-lock-json/\">https://snyk.io/blog/what-is-package-lock-json/</a></li>\n</ul>\n<h3 id=\"what-about-publishing-your-package\">What about publishing your package?</h3>\n<p>Contrary to what some people believe, the content that you publish to <code>npm</code> is not always the same as what‚Äôs on GitHub or overall in your project. The way that a module is published is that <code>npm</code> will determine the files that should be published by checking for a files key in your <code>package.json</code> and a <code>.npmignore</code> file or if none is present the <code>.gitignore</code> file. There are also some files that are always included and some that will always be excluded. You can find the entire list of those files on the npm page. For example the <code>.git</code> folder will always be ignored.</p>\n<p>Afterwards <code>npm</code> will take the list of files and will package them all up together into a tarball using <code>npm pack</code>. If you want to check out what files are packaged you can run in a project <code>npm pack --dry-run</code> and you‚Äôll see the output with all of the files.</p>\n<p>That <em>tarball</em> will then be uploaded to the <em>npm registry</em>. One thing you might notice when you run this command is that if you already have a <code>package-lock.json</code> it is actually not being bundled. This is because <code>package-lock.json</code> will always be ignored as specified by the list in the <code>npm</code> docs (and mentioned above).</p>\n<p>Subsequently this means that if another developer installs your published package (rather than say a developer cloning your git repo), they‚Äôll never download your package-lock.json and therefore it will be completely ignored during the installation.</p>\n<p>This might cause the ‚Äúworks on my machine‚Äù effect by accident since your CI and developer environment might pick up a different version of dependencies than your users.</p>\n<h4 id=\"references-2\">References</h4>\n<ul>\n<li><a href=\"https://www.twilio.com/blog/lockfiles-nodejs\">https://www.twilio.com/blog/lockfiles-nodejs</a></li>\n</ul>\n<h2 id=\"shrinkwrap-lock-files\">Shrinkwrap lock files</h2>\n<p>There is one case in which a special lock file exists that is taken into account even for transient dependencies. The <code>npm-shrinkwrap.json</code> file pins down the dependency tree like the other lock files do, but an <code>npm publish</code> process will also commit this file to the registry. More importantly, when end users consume the library in a typical application and run an npm install ‚Äì the library‚Äôs shrinkwrap file will decide on which versions to pull instead of the semver resolution, which happens during installation.</p>\n<p>What is a shrinkwrap file good for? Well, it allows library maintainers to pin down and curate their own library dependencies in order to ship known versions. It does, however, require careful maintenance for the entire dependency tree. Also, if a shrinkwrap file is used, there is no need for any other lock file to exist in the source control. A good example of a library that takes this approach is the well-known <a href=\"https://github.com/hapijs/hapi\">hapijs</a> project.</p>\n<p>The files have exactly the same content, but there are a handful of differences in how <code>npm</code> handles them, most of which are noted on the docs pages for <a href=\"https://docs.npmjs.com/cli/v8/configuring-npm/package-lock-json\">package-lock.json</a> and <a href=\"https://docs.npmjs.com/cli/v8/configuring-npm/npm-shrinkwrap-json\">npm-shrinkwrap.json</a>:</p>\n<ul>\n<li><code>package-lock.json</code> is never published to npm, whereas <code>npm-shrinkwrap</code> is by default</li>\n<li><code>package-lock.json</code> files that are not in the top-level package are ignored, but shrinkwrap files belonging to dependencies are respected</li>\n<li><code>npm-shrinkwrap.json</code> is backwards-compatible with <code>npm</code> versions 2, 3, and 4, whereas <code>package-lock.json</code> is only recognized by <code>npm</code> 5+</li>\n</ul>\n<p>You can convert an <code>existing package-lock.json</code> to an <code>npm-shrinkwrap.json</code> by running <code>npm shrinkwrap</code>.</p>\n<p>If you are publishing your package to npm, you have a choice between:</p>\n<ol type=\"1\">\n<li><p>using a <code>package-lock.json</code> to record exactly which versions of dependencies you installed, but allowing people installing your package to use any version of the dependencies that is compatible with the version ranges dictated by your <code>package.json</code>, or</p></li>\n<li><p>using an <code>npm-shrinkwrap.json</code> to guarantee that everyone who installs your package gets exactly the same version of all dependencies</p></li>\n</ol>\n<p>The official view described in the docs is that <strong>option 1 should be used for libraries (presumably in order to reduce the amount of package duplication caused when lots of a package‚Äôs dependencies all depend on slightly different versions of the same secondary dependency</strong>), but that option 2 might be reasonable for executables that are going to be installed globally.</p>\n<h3 id=\"issues-with-shrinkwrap-files\">Issues with shrinkwrap files</h3>\n<p>One issue is that the shrinkwrap.json file, which contains sensitive information about your dependencies, may be included when publishing a package. Another is that Shrinkwrap makes it more difficult to add new dependencies. There is also a security risk inherent in shrinkwrap, which is vulnerable to remote code execution attack if HTTPS URLs are not used.</p>\n<p>By using a shrinkwrap file you‚Äôll pin the exact version which can be great but it can also block people from getting critical patch fixes that would otherwise be installed automatically. npm strongly discourages the use case of shrinkwrap for libraries and recommends it more for CLIs or similar.</p>\n<blockquote>\n<p>Open Question: I wonder what the consequences are with using shrinkwrap files? For example, how often are they actually used in practice? How much dependency bloat is caused by using them? Would findings related to ‚Äú<em>technical lag</em>‚Äù and ‚Äú<em>pinning dependencies</em>‚Äù be similar?</p>\n</blockquote>\n<h4 id=\"references-3\">References</h4>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/46132512/5816686\">https://stackoverflow.com/a/46132512/5816686</a></li>\n<li><a href=\"https://snyk.io/blog/what-is-package-lock-json/\">https://snyk.io/blog/what-is-package-lock-json/</a></li>\n<li><a href=\"https://nodejs.org/de/blog/npm/managing-node-js-dependencies-with-shrinkwrap/\">https://nodejs.org/de/blog/npm/managing-node-js-dependencies-with-shrinkwrap/</a></li>\n<li><a href=\"https://jonnyreeves.co.uk/2016/npm-shrinkwrap-sucks/\">https://jonnyreeves.co.uk/2016/npm-shrinkwrap-sucks/</a></li>\n<li><a href=\"https://snyk.io/blog/npm-shrinkwrap-reloaded/\">https://snyk.io/blog/npm-shrinkwrap-reloaded/</a></li>\n</ul>\n<h2 id=\"so-which-should-i-use-package-lock.json-or-npm-shrinkwrap.json\">So which should I use? <code>package-lock.json</code> or <code>npm-shrinkwrap.json</code>?</h2>\n<h2 id=\"when-working-on-a-library\">When working on a library</h2>\n<p>If you‚Äôre working on a library (as in a package onto which others will depend on), you should use <code>package-lock.json</code>. An alternative is to use shrinkwrap but make sure it never gets published with the package (the new lock file is never published automatically). Why not publish the shrinkwrap? It‚Äôs because NPM respects shrinkwraps it finds within packages and since a shrinkwrap always points to a specific version of individual packages, you would not take advantage of the fact that NPM can use the same package to satisfy requirements from multiple packages if the <code>semver</code> range allows it. In other words, by not forcing NPM to install specific versions, you allow NPM to better reuse packages across the dependency tree and make the result smaller and faster to assemble.</p>\n<p>There‚Äôs one caveat to this however. When you‚Äôre working on your library, you get the exact same dependencies every time because either <code>package-lock.json</code> or <code>npm-shrinkwrap.json</code> is present in the repository. The same goes for your continuous integration server where you check out the same code. Now imagine your <code>package.json</code> specifies a dependency on some package as <code>^1.0.0</code> and that also happens to be the version specified in the lock file and installed every time. Everything works. Now what happens if a new version of the dependency is published, accidentally breaks semver and your package breaks because of it?</p>\n<p>Unfortunately, you might not be able to notice that until a bug report comes in. Without any lock files in the repository, your build would fail at least on the CI because it would always install the latest versions of the dependencies and thus run the tests with the new broken version (provided that the build is run periodically, not just for PRs). With the lock in place however, it will always install the working locked version.</p>\n<p>There‚Äôs a couple of solutions to this problem however. First, you could sacrifice the exact reproducibility and not add the lock file to your version control system. Second, you could make a separate build configuration which would run npm update prior running the tests. Third, you simply delete the lock before running the tests in the special build. How to actually deal with the broken dependency once discovered is another topic on its own mainly because semver as implemented by NPM doesn‚Äôt have a concept of allowing a wide range but also blacklisting specific versions.</p>\n<p>This of course begs the question whether it‚Äôs actually worth it to add the lock file into the version control when working on libraries. A thing to keep in mind however is that the lock file contains not only dependencies but also dev dependencies. In that sense working on a library is similar to working on an application (see the next section) and having the exact same dev dependencies over time and across multiple machines is an advantage.</p>\n<h3 id=\"when-working-on-an-application\">When working on an application</h3>\n<p>Alright, what about packages used by the end users in the terminal or bundled executables in general? In this case, the package is the final result, the application, and you want to make sure that the end users always get the exact dependencies you had while publishing it. This is where you want to use shrinkwrap and make sure to also publish it with the package so that it‚Äôs respected by NPM during install. Remember, you can always see what the package would look like if published using npm pack.</p>\n<p>Note that pointing to a specific version of a dependency in package.json is not good enough because you want to make sure the end users get the exact same dependency tree including all of its sub-dependencies. A specific version in package.json guarantees the version only at the top level.</p>\n<p>What about other types of applications, for example projects you start from within their repository? It doesn‚Äôt really matter that much in this case. All that matters is that the correct dependencies are installed and both of the locks can satisfy that. Your choice.</p>\n<ul>\n<li><a href=\"https://jpospisil.com/2017/06/02/understanding-lock-files-in-npm-5.html\">https://jpospisil.com/2017/06/02/understanding-lock-files-in-npm-5.html</a></li>\n</ul>\n<h3 id=\"other-references\">Other References</h3>\n<ul>\n<li><a href=\"https://greenkeeper.io/docs.html#lockfiles\">https://greenkeeper.io/docs.html#lockfiles</a></li>\n<li><a href=\"https://stackoverflow.com/questions/45022048/why-does-npm-install-rewrite-package-lock-json\">https://stackoverflow.com/questions/45022048/why-does-npm-install-rewrite-package-lock-json</a></li>\n<li><a href=\"https://github.com/npm/npm/issues/17979#issuecomment-332701215\">https://github.com/npm/npm/issues/17979#issuecomment-332701215</a> (Interesting historical comment on package-lock issue.)</li>\n</ul>\n"
  },
  {
    "_id": "latex_style_guide",
    "_body": "<h2 id=\"project-file-structure\">Project File Structure</h2>\n<pre class=\"less\"><code>my_project/\n‚îú‚îÄ images/\n‚îÇ ‚îú‚îÄ image1.jpg\n‚îú‚îÄ 00_main.tex\n‚îú‚îÄ 01_preamble.tex\n‚îú‚îÄ 02_title.tex\n‚îú‚îÄ 03_abstract.tex\n‚îú‚îÄ ...\n‚îú‚îÄ references.bib</code></pre>\n<h2 id=\"main-tex-file\">Main Tex File</h2>\n<p>How I structure the main project file. Having the <em></em>, <em></em>, and <em></em> just makes things easier if you ever need to move these documents into a larger parent project (e.g., a thesis).</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\chptroot</span>}{.}</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\lblroot</span>}{dbcs}</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\imgsroot</span>}{images}</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">% RQs - I&#39;m not convinced this is actually a good idea, but just leaving it here. Alternatively you can just do \\rqone, rqtwo, etc.</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand\\rqnumberX</span>{1<span class=\"fu\">\\xspace</span>}</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand\\rqX</span>{RQ1?}</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand\\rqnumberY</span>{2<span class=\"fu\">\\xspace</span>}</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand\\rqY</span>{RQ2?}</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand\\rqnumberZ</span>{3<span class=\"fu\">\\xspace</span>}</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand\\rqZ</span>{RQ3?}</span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">% Common helpful commands</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\floor</span>}[1]{<span class=\"fu\">\\lfloor</span>#1<span class=\"fu\">\\rfloor</span>}</span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\ceil</span>}[1]{<span class=\"fu\">\\lceil</span>#1<span class=\"fu\">\\rceil</span>}</span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\code</span>}[1]{<span class=\"fu\">\\texttt</span>{#1}}</span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\quotes</span>}[1]{``#1&#39;&#39;}</span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\fnu</span>}[1]{<span class=\"fu\">\\footnote</span>{<span class=\"fu\">\\url</span>{#1}}}</span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-22\"><a href=\"#cb2-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">% Whatever technologies and other pieces of text you&#39;ll use a lot in the paper</span></span>\n<span id=\"cb2-23\"><a href=\"#cb2-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand</span>{<span class=\"ex\">\\npm</span>}{<span class=\"fu\">\\textsf</span>{npm}<span class=\"fu\">\\xspace</span>}</span>\n<span id=\"cb2-24\"><a href=\"#cb2-24\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-25\"><a href=\"#cb2-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">% Reviewing</span></span>\n<span id=\"cb2-26\"><a href=\"#cb2-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\newcommand\\ben</span>[1]{<span class=\"fu\">\\nbc</span>{BEN}{#1}{blue}}</span>\n<span id=\"cb2-27\"><a href=\"#cb2-27\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-28\"><a href=\"#cb2-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/01_preamble}</span>\n<span id=\"cb2-29\"><a href=\"#cb2-29\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">% Document</span></span>\n<span id=\"cb2-30\"><a href=\"#cb2-30\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">\\begin</span>{<span class=\"ex\">document</span>}</span>\n<span id=\"cb2-31\"><a href=\"#cb2-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">% \\bstctlcite{BSTcontrol}</span></span>\n<span id=\"cb2-32\"><a href=\"#cb2-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/02_title}</span>\n<span id=\"cb2-33\"><a href=\"#cb2-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/03_authors}</span>\n<span id=\"cb2-34\"><a href=\"#cb2-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/04_abstract}</span>\n<span id=\"cb2-35\"><a href=\"#cb2-35\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-36\"><a href=\"#cb2-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">% Weird IEEE stuff</span></span>\n<span id=\"cb2-37\"><a href=\"#cb2-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\maketitle</span></span>\n<span id=\"cb2-38\"><a href=\"#cb2-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\IEEEdisplaynontitleabstractindextext</span></span>\n<span id=\"cb2-39\"><a href=\"#cb2-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\IEEEpeerreviewmaketitle</span></span>\n<span id=\"cb2-40\"><a href=\"#cb2-40\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-41\"><a href=\"#cb2-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\">%Sections</span></span>\n<span id=\"cb2-42\"><a href=\"#cb2-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/05_intro}</span>\n<span id=\"cb2-43\"><a href=\"#cb2-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/06_background}</span>\n<span id=\"cb2-44\"><a href=\"#cb2-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/07_data}</span>\n<span id=\"cb2-45\"><a href=\"#cb2-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/08_findings}</span>\n<span id=\"cb2-46\"><a href=\"#cb2-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/09_discussion}</span>\n<span id=\"cb2-47\"><a href=\"#cb2-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/10_related_work}</span>\n<span id=\"cb2-48\"><a href=\"#cb2-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/11_threats}</span>\n<span id=\"cb2-49\"><a href=\"#cb2-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/12_conclusion}</span>\n<span id=\"cb2-50\"><a href=\"#cb2-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/13_acknowledgements}</span>\n<span id=\"cb2-51\"><a href=\"#cb2-51\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-52\"><a href=\"#cb2-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"bu\">\\bibliographystyle</span>{<span class=\"ex\">IEEEtranN</span>}  <span class=\"co\">% basic style, author-year citations</span></span>\n<span id=\"cb2-53\"><a href=\"#cb2-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"bu\">\\bibliography</span>{<span class=\"ex\">dbcs_references.bib</span>}</span>\n<span id=\"cb2-54\"><a href=\"#cb2-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\newpage</span></span>\n<span id=\"cb2-55\"><a href=\"#cb2-55\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-56\"><a href=\"#cb2-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/14_bios}</span>\n<span id=\"cb2-57\"><a href=\"#cb2-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">\\newpage</span></span>\n<span id=\"cb2-58\"><a href=\"#cb2-58\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-59\"><a href=\"#cb2-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">\\begin</span>{<span class=\"ex\">appendices</span>}</span>\n<span id=\"cb2-60\"><a href=\"#cb2-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"fu\">\\input</span>{<span class=\"fu\">\\chptroot</span>/99_app_ci_name_regex}</span>\n<span id=\"cb2-61\"><a href=\"#cb2-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"kw\">\\end</span>{<span class=\"ex\">appendices</span>}</span>\n<span id=\"cb2-62\"><a href=\"#cb2-62\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-63\"><a href=\"#cb2-63\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">\\end</span>{<span class=\"ex\">document</span>}</span></code></pre></div>\n<h2 id=\"labeling-for-referencing\">Labeling for Referencing</h2>\n<p>When creating labels to reference, if you are labeling a section, follow the pattern below, adding subsections as needed:</p>\n<blockquote>\n<p>\\lblroot:section_name:subsection_name:subsubsection_name</p>\n</blockquote>\n<p>If you are labeling another entity (e.g., tables, figures, etc.), then follow the pattern below:</p>\n<blockquote>\n<p>\\lblroot:entity_type:label_name:sub_entity_name</p>\n</blockquote>\n<p>Note that the sub)entity name is rarely used (e.g., for when there are multiple figures in a single figure).</p>\n<p>See below for some different examples:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode latex\"><code class=\"sourceCode latex\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">% Sections</span></span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">\\label</span>{<span class=\"ex\">\\lblroot:findings:existing_score</span>}</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">% Figures</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">\\label</span>{<span class=\"ex\">\\lblroot:figure:score_distributions</span>}</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">% Tables</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">\\label</span>{<span class=\"ex\">\\lblroot:table:failure_reasons</span>}</span></code></pre></div>\n"
  },
  {
    "_id": "promise_all",
    "_body": "<h2 id=\"context\">Context</h2>\n<p>Let‚Äôs say we want to retrieve the transitive (or direct) dependencies of a client package. This means that, for every dependency (a.k.a., provider package) of a client package, we need to retrieve the dependencies of said provider package. We specify the dependencies of a specific package using the following type:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode typescript\"><code class=\"sourceCode typescript\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">type</span> PackageDependencies <span class=\"op\">=</span> { [packageName<span class=\"op\">:</span> <span class=\"dt\">string</span>]<span class=\"op\">:</span> <span class=\"dt\">string</span> }<span class=\"op\">;</span></span></code></pre></div>\n<p>where the key is the provider package name and the value is the provider package version used by the client.</p>\n<h2 id=\"make-requests-in-serial\">Make requests in serial</h2>\n<p>The following function takes in an object consisting of key-value pairs that represent a client package‚Äôs dependencies. We loop over the key-value pairs, and retrieve the dependencies of each provider package, one after the other.</p>\n<blockquote>\n<p>Notice that we only make a new request once the previous request has completed.</p>\n</blockquote>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode typescript\"><code class=\"sourceCode typescript\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>async <span class=\"kw\">function</span> <span class=\"fu\">buildDependencyTree</span>(dependencies<span class=\"op\">:</span> PackageDependencies) {</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  const dependencyTree <span class=\"op\">=</span> {}<span class=\"op\">;</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">for</span> (const [dep<span class=\"op\">,</span> version] of Object<span class=\"op\">.</span><span class=\"fu\">entries</span>(dependencies)) {</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    const subDep <span class=\"op\">=</span> await <span class=\"fu\">getDependencies</span>(dep<span class=\"op\">,</span> version)<span class=\"op\">;</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    dependencyTree[dep] <span class=\"op\">=</span> { version<span class=\"op\">,</span> dependencies<span class=\"op\">:</span> subDep }<span class=\"op\">;</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  }</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  return dependencyTree<span class=\"op\">;</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span></code></pre></div>\n<h2 id=\"parallelize-with-promise.all\">Parallelize with <code>Promise.all()</code></h2>\n<p>We realize that each request we are making (i.e., retrieving the dependencies of a package) are independent of each other. That is to say that the result of retrieving the dependencies of 1 package is not affected in any way by the results of retrieving the dependencies of another package. This means we do not have to wait until the previous request has finished to make the next request, and we can actually parallelize the whole loop to speed up the process. We do this using <code>Promise.all()</code>, as shown below:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode typescript\"><code class=\"sourceCode typescript\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>async <span class=\"kw\">function</span> <span class=\"fu\">buildDependencyTree</span>(dependencies<span class=\"op\">:</span> PackageDependencies) {</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  const dependencyTree <span class=\"op\">=</span> {}<span class=\"op\">;</span></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  const promises <span class=\"op\">=</span> Object<span class=\"op\">.</span><span class=\"fu\">entries</span>(dependencies)<span class=\"op\">.</span><span class=\"fu\">map</span>(<span class=\"fu\">async</span> ([dep<span class=\"op\">,</span> version]) <span class=\"kw\">=&gt;</span> {</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    const subDep <span class=\"op\">=</span> await <span class=\"fu\">getDependencies</span>(dep<span class=\"op\">,</span> version)<span class=\"op\">;</span></span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    dependencyTree[dep] <span class=\"op\">=</span> { version<span class=\"op\">,</span> dependencies<span class=\"op\">:</span> subDep }<span class=\"op\">;</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  })<span class=\"op\">;</span></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  await <span class=\"bu\">Promise</span><span class=\"op\">.</span><span class=\"fu\">all</span>(promises)<span class=\"op\">;</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  return dependencyTree<span class=\"op\">;</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span></code></pre></div>\n<p>Now this function will still only return once all of the requests have completed (because of <code>await Promise.all(promises);</code>), but all of the requests are executed in parralel.</p>\n"
  },
  {
    "_id": "closure_proxy",
    "_body": "<h2 id=\"context\">Context</h2>\n<p>Let‚Äôs say we want to retrieve the information for a package on <code>npm</code>. We might just initialy write this function:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode typescript\"><code class=\"sourceCode typescript\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>async <span class=\"kw\">function</span> <span class=\"fu\">getNpmPackage</span>(name)<span class=\"op\">:</span> <span class=\"bu\">Promise</span><span class=\"op\">&lt;</span>NPMPackage<span class=\"op\">&gt;</span> {</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  return await <span class=\"fu\">got</span>(<span class=\"vs\">`https://registry.npmjs.org/</span><span class=\"sc\">${</span>name<span class=\"sc\">}</span><span class=\"vs\">`</span>)<span class=\"op\">.</span><span class=\"fu\">json</span>()<span class=\"op\">;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span></code></pre></div>\n<p>where we simply take a package name, and make a request to <code>npm</code> every time we want the package information. However, this can lead to unneccesary extra requests, since we may be repeating calls to <code>npm</code> that we have made in the near past.</p>\n<h2 id=\"using-a-closure-to-cache-results\">Using a closure to cache results</h2>\n<p>If we expect to be making the same request multiple times and we don‚Äôt expect the result to change between each identical request, we can cache the response of the first request, and then simply return that cached response on each subsequent request.</p>\n<p>This might be the case in our context, for example, if we are retriving the information on the dependencies of different packages, and we expect many of these packages to be using the same dependencies. In this situation, we would benefit from caching the responses and avoid unneccesary extra requests.</p>\n<p>To do this, we can write a closure that acts as a proxy between the client making a request and the request actually being sent. In the code below, <code>getNpmPackageProxy()</code> first declares <code>npmPackages</code> as a cache in the enclosed function scope, and then returns a function that takes a package name as a parameter, checks to see if we have already made a request for that package name, if not, makes the request and saves the result in the cache, and then returns the result stored in the cache.</p>\n<p>We then assign the result of calling <code>getNpmPackageProxy()</code> to <code>getNpmPackage(name)</code>. We can the simply call <code>getNpmPackage(name)</code> exactly as we were before, expect now we will first check the cache to see if we have already made the request and can avoid the repeated call.</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode typescript\"><code class=\"sourceCode typescript\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">function</span> <span class=\"fu\">getNpmPackageProxy</span>()<span class=\"op\">:</span> (name<span class=\"op\">:</span> <span class=\"dt\">string</span>) <span class=\"kw\">=&gt;</span> <span class=\"bu\">Promise</span><span class=\"op\">&lt;</span>NPMPackage<span class=\"op\">&gt;</span> {</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  const npmPackages<span class=\"op\">:</span> { [packageName<span class=\"op\">:</span> <span class=\"dt\">string</span>]<span class=\"op\">:</span> NPMPackage } <span class=\"op\">=</span> {}<span class=\"op\">;</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  return <span class=\"fu\">async</span> (name<span class=\"op\">:</span> <span class=\"dt\">string</span>) <span class=\"kw\">=&gt;</span> {</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"fu\">if</span> (<span class=\"op\">!</span>npmPackages[name]) {</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>      npmPackages[name] <span class=\"op\">=</span> await <span class=\"fu\">got</span>(</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"vs\">`https://registry.npmjs.org/</span><span class=\"sc\">${</span>name<span class=\"sc\">}</span><span class=\"vs\">`</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>      )<span class=\"op\">.</span><span class=\"fu\">json</span>()<span class=\"op\">;</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    }</span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    return npmPackages[name]<span class=\"op\">;</span></span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>  }<span class=\"op\">;</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>}</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>const getNpmPackage<span class=\"op\">:</span> (name<span class=\"op\">:</span> <span class=\"dt\">string</span>) <span class=\"kw\">=&gt;</span> <span class=\"bu\">Promise</span><span class=\"op\">&lt;</span>NPMPackage<span class=\"op\">&gt;</span> <span class=\"op\">=</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"fu\">getNpmPackageProxy</span>()<span class=\"op\">;</span></span></code></pre></div>\n"
  },
  {
    "_id": "search_and_sort_algorithms",
    "_body": "<h2 id=\"first---a-note-on-big-o\">First - a note on Big O</h2>\n<p>Big O notation is special notation that tells you how fast an algorithm is. For example, suppose you have a list of size <em>n</em>. Simple search needs to check each element, so it will take n operations. The run time in Big O notation is O(<em>n</em>). It‚Äôs important to note that Big O doesn‚Äôt tell you the speed in seconds, but rather lets you compare the number of operations. It tells you have fast the algorithm grows.</p>\n<h3 id=\"big-o-establishes-a-worst-case-run-time.\">Big O establishes a worst-case run time.</h3>\n<p>Suppose you‚Äôre using simple search to look for a person in the phone book. You know that simple search takes O(<em>n</em>) time to run, which means in the worst case, you‚Äôll have to look through every single entry in your phone book. In this case, you‚Äôre looking for Adit. This guy is the first entry in your phone book. So you didn‚Äôt have to look at every entry - you found it on the first try. Did this algorithm take O(<em>n</em>) time? Or did it take O(1) (i.e., constant) time because you found the person on the first try?</p>\n<p>Simple search still takes O(<em>n</em>) time. In this case, you found what you were looking for instantly. That‚Äôs the best-case scenario. But Big O notation is about the <em>worst-case</em> scenario. So you can say that, in the <em>worst case</em>, you‚Äôll have to look at every entry in the phone book once. That‚Äôs O(<em>n</em>) time. It‚Äôs a reassurance - you know that the simple search will never be slower than O(<em>n</em>) time.</p>\n<blockquote>\n<p>Note: Along with worst-case run time, it‚Äôs also important to look at the average-case run time. More on that later‚Ä¶</p>\n</blockquote>\n<h3 id=\"some-common-big-o-run-times\">Some common Big O run times:</h3>\n<ul>\n<li>O(log <em>n</em>), also known as <em>log time</em>. Example: Binary search.</li>\n<li>O(<em>n</em>), also known as <em>linear time</em>. Example: Simple search.</li>\n<li>O(<em>n</em> * log <em>n</em>). Example: A fast sorting algorithm, like quicksort.</li>\n<li>O(<em>n<sup>2</sup></em>). Example: A slow sorting algorithm, like selection sort.</li>\n<li>O(<em>n!</em>). Example: A really slow algorithm, like the traveling salesman.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/search_and_sort_algorithms/big_o.png\" /></p>\n<h2 id=\"searching-algorithms\">Searching Algorithms</h2>\n<h3 id=\"simple-search\">Simple Search</h3>\n<p>Just start at the beginning of the list and loop over all elements until either the item is found, or the end of the list is reached (in which case, the item is not in the list).</p>\n<p>Time complexity: O(<em>n</em>)</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> simple_search(my_list, item):</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  i <span class=\"op\">=</span> <span class=\"dv\">0</span>  <span class=\"co\"># Start searching from the start of the list</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">while</span> i <span class=\"op\">&lt;</span> <span class=\"bu\">len</span>(my_list):  <span class=\"co\"># While there are still elements to check in the list...</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    guess <span class=\"op\">=</span> my_list[i]</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"cf\">if</span> guess <span class=\"op\">==</span> item:  <span class=\"co\"># Found the item</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> i</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> <span class=\"va\">None</span></span></code></pre></div>\n<h3 id=\"binary-seach\">Binary Seach</h3>\n<p>The idea of binary search is that, with a sorted list and an item to find, you guess the middle item and eliminate half of all possibilities with each guess.</p>\n<blockquote>\n<p>Note: Binary search only works when your list is in sorted order.</p>\n</blockquote>\n<p>Time complexity: O(log <em>n</em>)</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> binary_search(my_list, item):</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\"># low and high keep track of which</span></span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"co\"># part of the list you&#39;ll search in.</span></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  low <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  high <span class=\"op\">=</span> <span class=\"bu\">len</span>(my_list) <span class=\"op\">-</span> <span class=\"dv\">1</span></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">while</span> low <span class=\"op\">&lt;=</span> high:  <span class=\"co\"># While you haven&#39;t narrows it down to one element...</span></span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    mid <span class=\"op\">=</span> (low <span class=\"op\">+</span> high) <span class=\"op\">/</span> <span class=\"dv\">2</span>  <span class=\"co\"># ...check the middle element</span></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    guess <span class=\"op\">=</span> my_list[mid]</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> guess <span class=\"op\">==</span> item:  <span class=\"co\"># Found the item</span></span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"cf\">return</span> mid</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> guess <span class=\"op\">&gt;</span> item:  <span class=\"co\"># The guess was too high</span></span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>      high <span class=\"op\">=</span> mid <span class=\"op\">-</span> <span class=\"dv\">1</span></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">else</span>:  <span class=\"co\"># The guess was too low</span></span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>      low <span class=\"op\">=</span> mid <span class=\"op\">+</span> <span class=\"dv\">1</span></span>\n<span id=\"cb2-16\"><a href=\"#cb2-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> <span class=\"va\">None</span>  <span class=\"co\"># The item doesn&#39;t exist</span></span>\n<span id=\"cb2-17\"><a href=\"#cb2-17\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-18\"><a href=\"#cb2-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>my_list <span class=\"op\">=</span> [<span class=\"dv\">1</span>, <span class=\"dv\">3</span>, <span class=\"dv\">5</span>, <span class=\"dv\">7</span>, <span class=\"dv\">9</span>]</span>\n<span id=\"cb2-19\"><a href=\"#cb2-19\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-20\"><a href=\"#cb2-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(binary_search(my_list, <span class=\"dv\">3</span>))  <span class=\"co\"># =&gt; 1</span></span>\n<span id=\"cb2-21\"><a href=\"#cb2-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(binary_search(my_list, <span class=\"op\">-</span><span class=\"dv\">1</span>)) <span class=\"co\"># =&gt; None</span></span></code></pre></div>\n<h3 id=\"breadth-first-search\">Breadth-First Search</h3>\n<blockquote>\n<h4 id=\"first-a-note-on-graphs\">First: A note on <em>Graphs</em></h4>\n<p>A graph models a set of connections. Graphs are made up of nodes and edges. A node can be directly connected to many other nodes. Those nodes are called its neighbors. Graphs are a way to model how different things are connected to one another.</p>\n</blockquote>\n<p>Breadth-first search is a search algorithm that runs on graphs. It can help to answer two types of questions: - 1: Is there a path from node A to node B? - 2: What is the shortest path from node A to node B?</p>\n<p>The idea behind breadth-first search is that you maintain a queue of nodes you need to check (note that a <code>queue</code> follows the first in, first out rule (FIFO), as opposed to a <code>stack</code>, which follows a first in, last out rule (FILO)). You first visit all of your immediate neighbours (i.e., all the nodes you are directly connected with get added to the queue) and check to see if they are the node you are looking for.</p>\n<p>As you visit a node, you add all of its direct neighbours to your search queue (i.e., enqueue), taking care not to add any nodes to the queue that you have already visited. You then keep dequeueing nodes from your search queue until you either find the node you are looking for, or your queue becomes empty, in which case the node you are looking for is not present in the graph.</p>\n<p>In summary, you search the nodes that are closest to you first, and keep expanding your search away from you until you find the node you want or you have searched the whole graph. Bread-first search guarentees that you will find the node in the graph if it is present, as well as that you will find the shortest path to that node.</p>\n<p><strong>Time complexity</strong>: If you search your entire graph, that means you‚Äôll follow each edge. So the running time is at least O(number of edges). You also keep a queue of every node to search. Adding a node to the queue takes constant time: O(1). Doing this for every node will take O(number of people) total. Therefore, breadth-first search takes O(number of people + number of edges), and is more commonly written as O(V+E) (V for vertices, E for edges)</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> collections <span class=\"im\">import</span> deque</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph <span class=\"op\">=</span> {}</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;you&quot;</span>] <span class=\"op\">=</span> [<span class=\"st\">&quot;alice&quot;</span>, <span class=\"st\">&quot;bob&quot;</span>, <span class=\"st\">&quot;claire&quot;</span>]</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;bob&quot;</span>] <span class=\"op\">=</span> [<span class=\"st\">&quot;arthur&quot;</span>, <span class=\"st\">&quot;peggy&quot;</span>]</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;alice&quot;</span>] <span class=\"op\">=</span> [<span class=\"st\">&quot;peggy&quot;</span>]</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;claire&quot;</span>] <span class=\"op\">=</span> [<span class=\"st\">&quot;tom&quot;</span>, <span class=\"st\">&quot;jonny&quot;</span>]</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;arthur&quot;</span>] <span class=\"op\">=</span> []</span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;peggy&quot;</span>] <span class=\"op\">=</span> []</span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;tom&quot;</span>] <span class=\"op\">=</span> []</span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;jonny&quot;</span>] <span class=\"op\">=</span> []</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> search(name):</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>  search_queue <span class=\"op\">=</span> deque()</span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>  search_queue <span class=\"op\">+=</span> graph[name]</span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  searched <span class=\"op\">=</span> []  <span class=\"co\"># Who you&#39;ve already searched</span></span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">while</span> search_queue:</span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    person <span class=\"op\">=</span> search_queue.popleft()</span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"kw\">not</span> person <span class=\"kw\">in</span> searched: <span class=\"co\"># Only search this person if you haven&#39;t already searched them</span></span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"cf\">if</span> person_is_who_we_are_looking_for(person):</span>\n<span id=\"cb3-21\"><a href=\"#cb3-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">True</span></span>\n<span id=\"cb3-22\"><a href=\"#cb3-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>      <span class=\"cf\">else</span>:</span>\n<span id=\"cb3-23\"><a href=\"#cb3-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        search_queue <span class=\"op\">+=</span> graph[person]</span>\n<span id=\"cb3-24\"><a href=\"#cb3-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>        searched.append(person)  <span class=\"co\"># Mark this person as searched</span></span>\n<span id=\"cb3-25\"><a href=\"#cb3-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> <span class=\"va\">False</span></span>\n<span id=\"cb3-26\"><a href=\"#cb3-26\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-27\"><a href=\"#cb3-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>search(<span class=\"st\">&quot;you&quot;</span>)  <span class=\"co\"># Will starting search from the &quot;you&quot; node and return true if we find the person we are looking for (implemented in person_is_who_we_are_looking_for, not included)</span></span></code></pre></div>\n<h3 id=\"dijkstras-algorithm\">Dijkstra‚Äôs Algorithm</h3>\n<p>Lets you answer ‚ÄúWhat is the shortest path to X?‚Äù for weighted graphs (i.e., graphs with edges that have a weight or value assigned to them).</p>\n<p>There are four steps to Dijkstra‚Äôs algorith: - 1: Find the ‚Äúcheapest‚Äù node. That is the node you can get to in the least amount of time. - 2: Check whether there‚Äôs a cheaper path to the neighbors of this node. If so, opdate the costs of these neighbors. - 3: Repeat until you‚Äôve done this for every node in the graph. - 4: Calculate the final path.</p>\n<p>A full explanation on each of these steps will be a bit long-winded, so follow the code implementation below, and use Google is things aren‚Äôt clear. Still, there are a couple points to note: - You can‚Äôt use Dijkstra‚Äôs algorithm if you have negative weight edges (see <a href=\"https://www.geeksforgeeks.org/why-does-dijkstras-algorithm-fail-on-negative-weights/\">this explanation</a>). If you have negative weights, use the <a href=\"https://www.geeksforgeeks.org/bellman-ford-algorithm-dp-23/\">Bellman‚ÄìFord Algorithm</a>. - Dijkstra‚Äôs algorithm only works on graphs with no cycles, or on graphs with a positive weight cycle.</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">First describe the graph</span></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph <span class=\"op\">=</span> {}</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;start&quot;</span>] <span class=\"op\">=</span> {} <span class=\"co\"># Start node</span></span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;start&quot;</span>][<span class=\"st\">&quot;a&quot;</span>] <span class=\"op\">=</span> <span class=\"dv\">6</span> <span class=\"co\"># Start node is connected to A node, with edge weight of 6</span></span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;start&quot;</span>][<span class=\"st\">&quot;b&quot;</span>] <span class=\"op\">=</span> <span class=\"dv\">2</span> <span class=\"co\"># Start node is connected to B node, with edge weight of 2</span></span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;a&quot;</span>] <span class=\"op\">=</span> {} <span class=\"co\"># A node </span></span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;a&quot;</span>][<span class=\"st\">&quot;fin&quot;</span>] <span class=\"op\">=</span> <span class=\"dv\">1</span> <span class=\"co\"># A node is connected to Finish node, with edge weight of 1</span></span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;b&quot;</span>] <span class=\"op\">=</span> {} <span class=\"co\"># B node</span></span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;b&quot;</span>][<span class=\"st\">&quot;a&quot;</span>] <span class=\"op\">=</span> <span class=\"dv\">3</span> <span class=\"co\"># B node is connected to A node, with edge weight of 3</span></span>\n<span id=\"cb4-15\"><a href=\"#cb4-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;b&quot;</span>][<span class=\"st\">&quot;fin&quot;</span>] <span class=\"op\">=</span> <span class=\"dv\">5</span> <span class=\"co\"># B node is connected to Finish node, with edge weight of 5</span></span>\n<span id=\"cb4-16\"><a href=\"#cb4-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-17\"><a href=\"#cb4-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>graph[<span class=\"st\">&quot;fin&quot;</span>] <span class=\"op\">=</span> {}  <span class=\"co\"># Finish node, doesn&#39;t have any neightbors</span></span>\n<span id=\"cb4-18\"><a href=\"#cb4-18\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-19\"><a href=\"#cb4-19\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-20\"><a href=\"#cb4-20\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-21\"><a href=\"#cb4-21\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">Then you need a has table to store the costs for each node.</span></span>\n<span id=\"cb4-22\"><a href=\"#cb4-22\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-23\"><a href=\"#cb4-23\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">The cost of a node is how long it takes to get to that node from the start.</span></span>\n<span id=\"cb4-24\"><a href=\"#cb4-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">You know it takes 2 minutes from Start to node B. </span></span>\n<span id=\"cb4-25\"><a href=\"#cb4-25\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">You know it takes 6 minutes to get to node A (although you may find a path that takes less time).</span></span>\n<span id=\"cb4-26\"><a href=\"#cb4-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">You don&#39;t know how long it takes to get to the finish.</span></span>\n<span id=\"cb4-27\"><a href=\"#cb4-27\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">If you don&#39;t know the cost yet, you put down infinity.</span></span>\n<span id=\"cb4-28\"><a href=\"#cb4-28\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-29\"><a href=\"#cb4-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>infinity <span class=\"op\">=</span> <span class=\"bu\">float</span>(<span class=\"st\">&quot;inf&quot;</span>)</span>\n<span id=\"cb4-30\"><a href=\"#cb4-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>costs <span class=\"op\">=</span> {}</span>\n<span id=\"cb4-31\"><a href=\"#cb4-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>costs[<span class=\"st\">&quot;a&quot;</span>] <span class=\"op\">=</span> <span class=\"dv\">6</span></span>\n<span id=\"cb4-32\"><a href=\"#cb4-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>costs[<span class=\"st\">&quot;b&quot;</span>] <span class=\"op\">=</span> <span class=\"dv\">2</span></span>\n<span id=\"cb4-33\"><a href=\"#cb4-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>costs[<span class=\"st\">&quot;fin&quot;</span>] <span class=\"op\">=</span> infinity</span>\n<span id=\"cb4-34\"><a href=\"#cb4-34\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-35\"><a href=\"#cb4-35\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-36\"><a href=\"#cb4-36\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">You also need another has table for the parents</span></span>\n<span id=\"cb4-37\"><a href=\"#cb4-37\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-38\"><a href=\"#cb4-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>parents <span class=\"op\">=</span> {}</span>\n<span id=\"cb4-39\"><a href=\"#cb4-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>parents[<span class=\"st\">&quot;a&quot;</span>] <span class=\"op\">=</span> <span class=\"st\">&quot;start&quot;</span></span>\n<span id=\"cb4-40\"><a href=\"#cb4-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>parents[<span class=\"st\">&quot;b&quot;</span>] <span class=\"op\">=</span> <span class=\"st\">&quot;start&quot;</span></span>\n<span id=\"cb4-41\"><a href=\"#cb4-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>parents[<span class=\"st\">&quot;fin&quot;</span>] <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb4-42\"><a href=\"#cb4-42\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-43\"><a href=\"#cb4-43\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-44\"><a href=\"#cb4-44\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">Finally, you need an array to keep track of all nodes you&#39;ve already processed, because you don&#39;t need to process a node more than once.</span></span>\n<span id=\"cb4-45\"><a href=\"#cb4-45\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-46\"><a href=\"#cb4-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>processed <span class=\"op\">=</span> []</span>\n<span id=\"cb4-47\"><a href=\"#cb4-47\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-48\"><a href=\"#cb4-48\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-49\"><a href=\"#cb4-49\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">Dijkstra&#39;s Algorithm</span></span>\n<span id=\"cb4-50\"><a href=\"#cb4-50\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">&#39;&#39;&#39;</span></span>\n<span id=\"cb4-51\"><a href=\"#cb4-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>node <span class=\"op\">=</span> find_lowest_cost_node(costs) <span class=\"co\"># Find the lowest-cost node that you haven&#39;t processed yet.</span></span>\n<span id=\"cb4-52\"><a href=\"#cb4-52\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">while</span> node <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>: <span class=\"co\"># If you&#39;ve processed all the nodes, this while loop is done.</span></span>\n<span id=\"cb4-53\"><a href=\"#cb4-53\" aria-hidden=\"true\" tabindex=\"-1\"></a>  cost <span class=\"op\">=</span> costs[node]</span>\n<span id=\"cb4-54\"><a href=\"#cb4-54\" aria-hidden=\"true\" tabindex=\"-1\"></a>  neighbors <span class=\"op\">=</span> graph[node]</span>\n<span id=\"cb4-55\"><a href=\"#cb4-55\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">for</span> n <span class=\"kw\">in</span> neighbors.keys(): <span class=\"co\"># Go through all the neighbors of this node.</span></span>\n<span id=\"cb4-56\"><a href=\"#cb4-56\" aria-hidden=\"true\" tabindex=\"-1\"></a>    new_cost <span class=\"op\">=</span> cost <span class=\"op\">+</span> neighbors[n]</span>\n<span id=\"cb4-57\"><a href=\"#cb4-57\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> costs[n] <span class=\"op\">&gt;</span> new_cost: <span class=\"co\"># If it&#39;s cheaper to get to this neighbor by going through this node...</span></span>\n<span id=\"cb4-58\"><a href=\"#cb4-58\" aria-hidden=\"true\" tabindex=\"-1\"></a>      costs[n] <span class=\"op\">=</span> new_cost <span class=\"co\"># ...update the cost for this node.</span></span>\n<span id=\"cb4-59\"><a href=\"#cb4-59\" aria-hidden=\"true\" tabindex=\"-1\"></a>      parents[n] <span class=\"op\">=</span> node <span class=\"co\"># This node becomes the new parent for this neighbor.</span></span>\n<span id=\"cb4-60\"><a href=\"#cb4-60\" aria-hidden=\"true\" tabindex=\"-1\"></a>  processed.append(node) <span class=\"co\"># Mark this node as processed.</span></span>\n<span id=\"cb4-61\"><a href=\"#cb4-61\" aria-hidden=\"true\" tabindex=\"-1\"></a>  node <span class=\"op\">=</span> find_lowest_cost_node(costs) <span class=\"co\"># Find the next node to process, and loop.</span></span>\n<span id=\"cb4-62\"><a href=\"#cb4-62\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-63\"><a href=\"#cb4-63\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> find_lowest_cost_node(costs):</span>\n<span id=\"cb4-64\"><a href=\"#cb4-64\" aria-hidden=\"true\" tabindex=\"-1\"></a>  lowest_cost <span class=\"op\">=</span> <span class=\"bu\">float</span>(<span class=\"st\">&quot;inf&quot;</span>)</span>\n<span id=\"cb4-65\"><a href=\"#cb4-65\" aria-hidden=\"true\" tabindex=\"-1\"></a>  lowest_cost_node <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb4-66\"><a href=\"#cb4-66\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">for</span> node <span class=\"kw\">in</span> costs: <span class=\"co\"># Go through each node</span></span>\n<span id=\"cb4-67\"><a href=\"#cb4-67\" aria-hidden=\"true\" tabindex=\"-1\"></a>    cost <span class=\"op\">=</span> costs[node]</span>\n<span id=\"cb4-68\"><a href=\"#cb4-68\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> cost <span class=\"op\">&lt;</span> lowest_cost <span class=\"kw\">and</span> node <span class=\"kw\">not</span> <span class=\"kw\">in</span> processed: <span class=\"co\"># If it&#39;s the lowest cost so far and hasn&#39;t been processed yet...</span></span>\n<span id=\"cb4-69\"><a href=\"#cb4-69\" aria-hidden=\"true\" tabindex=\"-1\"></a>      lowest_cost <span class=\"op\">=</span> cost <span class=\"co\"># ...set it as the new lowest-cost node</span></span>\n<span id=\"cb4-70\"><a href=\"#cb4-70\" aria-hidden=\"true\" tabindex=\"-1\"></a>      lowest_cost_node <span class=\"op\">=</span> node</span>\n<span id=\"cb4-71\"><a href=\"#cb4-71\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> lowest_cost_node</span></code></pre></div>\n<h2 id=\"sorting-algorithms\">Sorting Algorithms</h2>\n<h3 id=\"selection-sort\">Selection Sort</h3>\n<p>The idea of binary search is that you loop over the list, find the smallest element (assuming you are sorting in ascending order), remove it from the list while adding it to the end of a new (initially empty) list, and then loop back over the original list, again finding the smallest element (remember that the first smallest element has been removed), and repeat this process until you have a sorted list.</p>\n<p>Time complexity: O(<em>n<sup>2</sup></em>)</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> find_smallest(arr):</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  smallest_index <span class=\"op\">=</span> <span class=\"dv\">0</span>  <span class=\"co\"># Stores the index of the smallest value</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  smallest <span class=\"op\">=</span> arr[smallest_index]  <span class=\"co\"># Stores the smallest value</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span> (<span class=\"dv\">1</span>, <span class=\"bu\">len</span>(arr)):</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> arr[i] <span class=\"op\">&lt;</span> smallest:</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>      smallest <span class=\"op\">=</span> arr[i]</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>      smallest_index <span class=\"op\">=</span> i</span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> smallest_index</span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> selection_sort(arr):  <span class=\"co\"># Sorts an array</span></span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>  new_arr <span class=\"op\">=</span> <span class=\"bu\">list</span>()</span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"dv\">0</span>, <span class=\"bu\">len</span>(arr)):</span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    smallest <span class=\"op\">=</span> find_smallest(arr)  <span class=\"co\"># Finds the smallest element in the array...</span></span>\n<span id=\"cb5-15\"><a href=\"#cb5-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    new_arr.append(arr.pop(smallest))  <span class=\"co\"># ...and adds it to the new array</span></span>\n<span id=\"cb5-16\"><a href=\"#cb5-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> new_arr</span></code></pre></div>\n<h3 id=\"quick-sort\">Quick Sort</h3>\n<p>What‚Äôs the simplest array that a sorting algorithm can handle? Well, some arrays don‚Äôt need to be sorted at all. Empty arrays and arrays with only 1 element are already sorted, so if we encounter these, we don‚Äôt have to do anything because there‚Äôs nothing to sort (base case).</p>\n<p>An array with two elements is pretty easy to sort too. If the first element is larger than the second, just swap them.</p>\n<p>If there are 3 elements, we can take a ‚Äúdivide and conquer‚Äù approach. First, pick an element from the array. This element is called the <i>pivot</i>. Now find the elements smaller than the pivot and the elements larger than the pivot. This is called <i>partitioning</i>. Now you have:</p>\n<ul>\n<li>A sub-array of all the numbers less than the pivot</li>\n<li>The pivot</li>\n<li>A sub-array of all the numbers greater than the pivot. The two sub-arrays aren‚Äôt sorted. They‚Äôre just partitioned. But if they were sorted, then you can just combine the whole thing like this - <code>left array + pivot + right array</code> - and you get a sorted array.</li>\n</ul>\n<p>How do you sort the sub-arrays? Well, the quicksort base case already knows how to sort arrays of 0, 1 (base cases) and 2 (base case + 1 pivot) elements. So if you call quicksort on the two sub-arrays and then combine the results, you get a sorted array!</p>\n<blockquote>\n<p>No matter what pivot you pick, you can call quicksort recursively on the two sub-arrays.</p>\n</blockquote>\n<p>Time complexity: Average: O(<em>n</em> * log <em>n</em>), Worst Case: O(<em>n<sup>2</sup></em>)</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> quicksort(arr):</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">if</span> <span class=\"bu\">len</span>(arr) <span class=\"op\">&lt;</span> <span class=\"dv\">2</span>:  <span class=\"co\"># Base case: arrays with 0 or 1 elements are already &quot;sorted&quot;</span></span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> arr</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  pivot <span class=\"op\">=</span> arr[<span class=\"dv\">0</span>]  <span class=\"co\"># Recursive case</span></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  less <span class=\"op\">=</span> [i <span class=\"cf\">for</span> i <span class=\"kw\">in</span> arr[<span class=\"dv\">1</span>:] <span class=\"cf\">if</span> i <span class=\"op\">&lt;=</span> pivot]  <span class=\"co\"># Sub-array of all the elements less than the pivot</span></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  greater <span class=\"op\">=</span> [i <span class=\"cf\">for</span> i <span class=\"kw\">in</span> arr[<span class=\"dv\">1</span>:] <span class=\"cf\">if</span> i <span class=\"op\">&gt;</span> pivot]  <span class=\"co\"># Sub-array of all the elements greater than the pivot</span></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> quicksort(less) <span class=\"op\">+</span> pivot <span class=\"op\">+</span> quicksort(greater)</span></code></pre></div>\n<h2 id=\"greedy-algorithms\">Greedy Algorithms</h2>\n<p>A greedy algorithm is simple: at each step, pick the optimal move. In technical terms <em>at each step you pick the locally optimal solution, and in the end you‚Äôre left with the globally optimal solution</em>. It is important to note that greedy algorithms don‚Äôt always work. However, sometimes, perfect is the enemy of good. Sometimes all you need is an algorithm that solves the problem pretty well. And that‚Äôs where greedy algorithms shine, because ther‚Äôre siple to write and usually get pretty close.</p>\n<h3 id=\"e.g.-the-set-covering-problem\">E.g., The set-covering problem</h3>\n<p>Suppose you‚Äôre starting a radio show. You want to reach listeners in all 50 states. You have to decide what stations to play on to each all those listeners. It costs money to be on each station, so you‚Äôre trying to minimize the number of stations you plat on.</p>\n<p>You have a list of stations. Each station covers a region, and there‚Äôs overlap.</p>\n<p>How do you figure out the smallest set of stations you can play on to cover all 50 states? Sounds easy? Turns out it‚Äôs extremely hard. Here‚Äôs how to do it:</p>\n<ol type=\"1\">\n<li>List every possible subset of stations. This is called the <em>power set</em>. There are 2<sup>n</sup> possible subsets.</li>\n<li>From these, pick the set with the smallest number of stations that covers all 50 states.</li>\n</ol>\n<p>The problem is, it takes a long time to calculate every possible subset of stations. It takes O(2<sup>n</sup>) time, because there are 2<sup>n</sup> subsets. It‚Äôs possible to do if you have a small set of 5 to 10 stations, but let‚Äôs say you are able to calculate 10 subsets per second, then for 100 stations, it will take 4x10<sup>21</sup> years. There‚Äôs no algorithm that solves it fast enough. What can you do?</p>\n<h4 id=\"approximation-algorithms\">Approximation algorithms</h4>\n<p>You can use a greedy algorithm. Here‚Äôs one that comes pretty close:</p>\n<ol type=\"1\">\n<li>Pick the station that covers the most states that haven‚Äôt been covered yet. It‚Äôs ok if the station covers some states that have been covered already.</li>\n<li>Repeat until all states are covered.</li>\n</ol>\n<p>This is called an approximation algorithm. When calculating the exact solution will take too much time, an approximation algorithm will work. Approximation algorithms are judged by</p>\n<ul>\n<li>How fast they are</li>\n<li>How close they are to the optimal solution</li>\n</ul>\n<p>Greedy algorithms are a good choice because not only are they simple to come up with, but that simplicity means they usually run fast too. In this case, the greedy algorithm runs in O(n<sup>2</sup>) time, where n is the number of radio stations.</p>\n<p>Here us a code example</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>states_needed <span class=\"op\">=</span> <span class=\"bu\">set</span>([<span class=\"st\">&quot;mt&quot;</span>, <span class=\"st\">&quot;wa&quot;</span>, <span class=\"st\">&quot;or&quot;</span>, <span class=\"st\">&quot;id&quot;</span>, <span class=\"st\">&quot;nv&quot;</span>, <span class=\"st\">&quot;ut&quot;</span>, <span class=\"st\">&quot;ca&quot;</span>, <span class=\"st\">&quot;az&quot;</span>])</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>stations <span class=\"op\">=</span> <span class=\"bu\">dict</span>()</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>stations[<span class=\"st\">&quot;kone&quot;</span>] <span class=\"op\">=</span> <span class=\"bu\">set</span>([<span class=\"st\">&quot;id&quot;</span>, <span class=\"st\">&quot;nv&quot;</span>, <span class=\"st\">&quot;ut&quot;</span>])</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>stations[<span class=\"st\">&quot;ktwo&quot;</span>] <span class=\"op\">=</span> <span class=\"bu\">set</span>([<span class=\"st\">&quot;wa&quot;</span>, <span class=\"st\">&quot;id&quot;</span>, <span class=\"st\">&quot;mt&quot;</span>])</span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>stations[<span class=\"st\">&quot;kthree&quot;</span>] <span class=\"op\">=</span> <span class=\"bu\">set</span>([<span class=\"st\">&quot;or&quot;</span>, <span class=\"st\">&quot;nv&quot;</span>, <span class=\"st\">&quot;ca&quot;</span>])</span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>stations[<span class=\"st\">&quot;kfour&quot;</span>] <span class=\"op\">=</span> <span class=\"bu\">set</span>([<span class=\"st\">&quot;nv&quot;</span>, <span class=\"st\">&quot;ut&quot;</span>])</span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>stations[<span class=\"st\">&quot;kfive&quot;</span>] <span class=\"op\">=</span> <span class=\"bu\">set</span>([<span class=\"st\">&quot;ca&quot;</span>, <span class=\"st\">&quot;az&quot;</span>])</span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>final_stations <span class=\"op\">=</span> <span class=\"bu\">set</span>()</span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>best_station <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>states_covered <span class=\"op\">=</span> <span class=\"bu\">set</span>()</span>\n<span id=\"cb7-14\"><a href=\"#cb7-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-15\"><a href=\"#cb7-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">while</span> states_needed:</span>\n<span id=\"cb7-16\"><a href=\"#cb7-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>  best_station <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb7-17\"><a href=\"#cb7-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>  states_covered <span class=\"op\">=</span> <span class=\"bu\">set</span>()</span>\n<span id=\"cb7-18\"><a href=\"#cb7-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">for</span> station, states_for_station <span class=\"kw\">in</span> stations.items():</span>\n<span id=\"cb7-19\"><a href=\"#cb7-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    covered <span class=\"op\">=</span> states_needed <span class=\"op\">&amp;</span> states_for_station  <span class=\"co\"># intersection</span></span>\n<span id=\"cb7-20\"><a href=\"#cb7-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"bu\">len</span>(covered) <span class=\"op\">&gt;</span> <span class=\"bu\">len</span>(states_covered):</span>\n<span id=\"cb7-21\"><a href=\"#cb7-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>      best_station <span class=\"op\">=</span> station</span>\n<span id=\"cb7-22\"><a href=\"#cb7-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>      states_covered <span class=\"op\">=</span> covered</span>\n<span id=\"cb7-23\"><a href=\"#cb7-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>    states_needed <span class=\"op\">-=</span> states_covered</span>\n<span id=\"cb7-24\"><a href=\"#cb7-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    final_stations.add(best_station)</span>\n<span id=\"cb7-25\"><a href=\"#cb7-25\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-26\"><a href=\"#cb7-26\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(final_stations)</span></code></pre></div>\n<h2 id=\"a-quick-note-on-np-completeness\">A quick note on NP-completeness</h2>\n<p>Some problems are famously hard to solve. The traveling salesperson and the set-covering problem are two examples. A lot of smart people think that it‚Äôs not possible to write an algorithm that will solve these problems quickly. ### How do you tell if a problem is NP-complete?</p>\n<p>Jonah is picking players for his fantasy football team. He has a list of abilities he wants: good quarterback, good running back, good in rain, good under pressure, and so on. He has a list of players, where each player fulfills some abilities. Jonah needs a team that fulfills all his abilities, and the team size is limited.</p>\n<p>This is actually a set-covering problem. Jonah can use the same approximation algorithm we just did to create his team:</p>\n<ol type=\"1\">\n<li>Find the player who fulfills the most abilities that haven‚Äôt been fulfilled yet.</li>\n<li>Repeat until the team fulfills all abilities (or you run out of space on the team).</li>\n</ol>\n<p>NP-complete problems show up everywhere. It‚Äôs nice to know if the problem you‚Äôre trying to solve is NP-complete. At that point, you can stop trying to stop trying to solve it perfectly, and solve it using an approximation algorithm instead. But it‚Äôs hard to tell if a problem you‚Äôre working on is NP-complete. Usually there‚Äôs a very small difference between a problem that‚Äôs easy to solve and an NP-complete problem. For example, in the previous examples, we looked at shortest paths. You know how to calculate the shortest way to get from point A to point B. But if you want to fin the shortest path that connects several points, that‚Äôs the traveling-salesman problem, which is NP-complete. The short answer: there‚Äôs no easy way to tell if the problem you‚Äôre working on is NP-complete. Here are some giveaways:</p>\n<ul>\n<li>Your algorithm runs quickly with a handful of items but really slows down with more items</li>\n<li>‚ÄúAll combinations of X‚Äù usually points to an NP-complete problem.</li>\n<li>Do you have to calculate ‚Äúevery possible version‚Äù of X because you can‚Äôt break it down into smaller sub-problems? Might be NP-complete.</li>\n<li>If your problem involves a sequence (such as a sequence of cities, like traveling salesman), and it‚Äôs hard to solve, it might be NP-complete.</li>\n<li>If your problem involves a set (like a set of radio stations) and it‚Äôs hard to solve, it might be NP-complete.</li>\n<li>Can you restate your problem as the set-covering problem or the traveling salesman problem? Then your problem is definitly NP-complete.</li>\n</ul>\n<p>NP-complete problems show up everywhere.</p>\n<h2 id=\"dynamic-programming---briefly\">Dynamic Programming - Briefly</h2>\n<p>Dynamic programming is useful <em>when you‚Äôre trying to optimize something given a constraint</em>. For example, in the knapsack problem, you had to maximize the value of the goods you stole, constrained by the size of the knapsack.</p>\n<p>You can use dynamic programming when the problem can be broken into discrete subproblems, and they don‚Äôt depend on each other.</p>\n<p>It can be hard to come up with a dynamic programming solution. Some general tips are:</p>\n<ul>\n<li>Every dynamic programming solution involves a grid.</li>\n<li>The values in the cells are usually what you‚Äôre trying to optimize. For the knapsack problem, the values were the value of the goods.</li>\n<li>Each cell is a subproblem, so think about how you can divide your problem into subproblems. That will help you figure out what the axes are.</li>\n</ul>\n<h3 id=\"example---longest-common-substring\">Example - Longest common substring</h3>\n<p>Suppose you run dictionary.com. Someone types in a word, and you give them the definition.</p>\n<p>But if someone misspells a word, you want to be able to guess what word they meant. Alex is searching for <em>fish</em>, but he accidentally put in <em>hish</em>. That‚Äôs not a word in your dictionary, but you have a list of words that are similar</p>\n<p>Similar to ‚ÄúHISH‚Äù - ‚ÄúFISH‚Äù - ‚ÄúVISTA‚Äù</p>\n<p>Alex typed <em>hish</em>. Which word did Alex mean to type: <em>fish</em> or <em>vista</em>?</p>\n<h4 id=\"making-the-grid\">Making the grid</h4>\n<p>What does the grid for this problem look like? You need to answer these question:</p>\n<ul>\n<li>What are the values of the cells?</li>\n<li>How do you divide this problem into sub-problems?</li>\n<li>What are the axes of the grid?</li>\n</ul>\n<p>In dynamic programming, you‚Äôre trying to <em>maximize</em> something. In this case, you‚Äôre trying to find the longest substring that two words have in common. What substring do <em>hish</em> and <em>fish</em> have in common? How about <em>fish</em> and <em>vista</em>? That‚Äôs what you want to calculate.</p>\n<p>Remember, the values for the cells are usually what youre trying to optimize. In this case, the values will probably be a number: the length of the longest substring that the two string have in common.</p>\n<p>How do you divide this problem into subproblems? You could compare substrings. Instead of comparing <em>hish</em> and <em>fish</em>, you could compare <em>his</em> and <em>fis</em> first. Each cell will contain the length of the longest substring that two substring have in common. This also gives a clue that the axes will probably be the two words (i.e., with the rows being [‚ÄúF‚Äù, ‚ÄúI‚Äù, ‚ÄúS‚Äù, ‚ÄúH‚Äù‚Äô] and columns being [‚ÄúH‚Äù, ‚ÄúI‚Äù, ‚ÄúS‚Äù, ‚ÄúH‚Äù]).</p>\n<h4 id=\"filling-in-the-grid\">Filling in the grid</h4>\n<p>Here‚Äôs the formula for filling in each cell:</p>\n<ol type=\"1\">\n<li>If the letters in the row/column pair don‚Äôt match, the value is zero.</li>\n<li>If they do match, this value is value of the top-left neighbor + 1</li>\n</ol>\n<p>Here‚Äôs how the formula looks in pseudocode:</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">if</span> word_a[i] <span class=\"op\">==</span> word_b[j]:</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  cell[i][j] <span class=\"op\">=</span> cell[i<span class=\"op\">-</span><span class=\"dv\">1</span>][j<span class=\"op\">-</span><span class=\"dv\">1</span>] <span class=\"op\">+</span> <span class=\"dv\">1</span></span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">else</span>:</span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>  cell[i][j] <span class=\"op\">=</span> <span class=\"dv\">0</span></span></code></pre></div>\n<p>One thing to note: for this problem, the final solution may not be in the last cell. For the knapsack problem, this last cell always had the final solution. But for the longest common substring, the solution is the largest number in the grid - and it may not be the last cell.</p>\n<h3 id=\"uses-of-dynamic-programming\">Uses of dynamic programming</h3>\n<ul>\n<li>Biologists use the longest common subsequence to find similarities in DNA strands.</li>\n<li>Git diff tells you the differences between two file, and it uses dynamic programming to do so.</li>\n<li>Levenshtein distance measures how similar two string are, and it uses dynamic programming. Levenshtein distance is used for everything from spell-check to figuring out whether a user is uploading copyrighted data.</li>\n</ul>\n"
  },
  {
    "_id": "deep_learning_architectures",
    "_body": "<p>From <a href=\"https://ieeexplore.ieee.org/document/7801947\">Ravi et al.¬†- ‚ÄúDeep Learning for Health Informatics‚Äù</a>.</p>\n<h2 id=\"deep-neural-network\">Deep Neural Network</h2>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/deep_learning_architectures/deep_neural_network.png\" /></p>\n<h3 id=\"description\">Description</h3>\n<ul>\n<li>General deep framework usually used for classification or regression.</li>\n<li>Made of many hidden layers (more than 2).</li>\n<li>Allows complex (non-linear) hypotheses to be expressed.</li>\n</ul>\n<h3 id=\"pros\">Pros</h3>\n<ul>\n<li>Widely used with successes in many areas.</li>\n</ul>\n<h3 id=\"cons\">Cons</h3>\n<ul>\n<li>Training is not trivial because once the errors are back-propagated to the first few layers, they become miniscule (vanishing gradient problem).</li>\n<li>The learning process can be very slow.</li>\n</ul>\n<h2 id=\"deep-autoencoder\">Deep Autoencoder</h2>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/deep_learning_architectures/deep_autoencoder.png\" /></p>\n<h3 id=\"description-1\">Description</h3>\n<ul>\n<li>Proposed in <a href=\"https://www.science.org/doi/10.1126/science.1127647\">Hinton et al.¬†- ‚ÄúReducing the Dimensionality of Data with Neural Networks‚Äù</a> and is mainly designed for feature extraction or dimensionality reduction.</li>\n<li>Has the same number of input and output nodes.</li>\n<li>Aims to recreate the input vector.</li>\n<li>Unsupervised learning method.</li>\n</ul>\n<h3 id=\"pros-1\">Pros</h3>\n<ul>\n<li>Does not require labelled data for training.</li>\n<li>Many variations have been proposed to make the representation more robust: Sparse AutEnc. (<a href=\"https://proceedings.neurips.cc/paper/2006/file/87f4d79e36d68c3031ccf6c55e9bbd39-Paper.pdf\">Poultney et al.¬†- ‚ÄúEfficient learning of sparse representations with an energy-based model‚Äù</a>), Denoising AutEnc. (<a href=\"https://www.cs.toronto.edu/~larocheh/publications/icml-2008-denoising-autoencoders.pdf\">Vincent et al.¬†- ‚ÄúExtracting and composing robust features with denoising autoencoders‚Äù</a>), Contractive AutEnc. (<a href=\"https://icml.cc/2011/papers/455_icmlpaper.pdf\">Rifai et al.¬†- ‚ÄúContractive auto-encoders: Explicit invariance during feature extraction‚Äù</a>), Convolutional AutEnc. (<a href=\"https://people.idsia.ch/~ciresan/data/icann2011.pdf\">Masci et al.¬†- ‚ÄúStacked convo- lutional auto-encoders for hierarchical feature extraction‚Äù</a>).</li>\n</ul>\n<h3 id=\"cons-1\">Cons</h3>\n<ul>\n<li>Requires a pre-training stage.</li>\n<li>Training can also suffer from vanishing of the errors.</li>\n</ul>\n<h2 id=\"deep-belief-network\">Deep Belief Network</h2>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/deep_learning_architectures/deep_belief_network.png\" /></p>\n<h3 id=\"description-2\">Description</h3>\n<ul>\n<li>Proposed in <a href=\"https://www.cs.toronto.edu/~hinton/absps/fastnc.pdf\">Hinton et al.¬†- ‚ÄúA fast learning algorithm for deep belief nets‚Äù</a> - is a composition of RBM where each sub-network‚Äôs hidden layer serves as the visible layer for the next.</li>\n<li>Has undirected connections just at the top two layers.</li>\n<li>Allows unsupervised and supervised training of the network.</li>\n</ul>\n<h3 id=\"pros-2\">Pros</h3>\n<ul>\n<li>Proposes a layer-by-layer greedy learning strategy to initialize the network.</li>\n<li>Inferences tractable maximizing the likelihood directly.</li>\n</ul>\n<h3 id=\"cons-2\">Cons</h3>\n<ul>\n<li>Training procedure is computationally expensive due to the initialization process and sampling.</li>\n</ul>\n<h2 id=\"deep-boltzmann-machine\">Deep Boltzmann Machine</h2>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/deep_learning_architectures/deep_boltzmann_machine.png\" /></p>\n<h3 id=\"description-3\">Description</h3>\n<ul>\n<li>Proposed in <a href=\"http://www.cs.toronto.edu/~fritz/absps/dbm.pdf\">Salakhutdinov and Hinton - ‚ÄúDeep boltzmann machines‚Äù</a>, it is another approach based on the Boltzmann family.</li>\n<li>Processes undirected connections (conditionally independent) between all layers of the network.</li>\n<li>Uses a stochastic maximum likelihood (<a href=\"https://www.tandfonline.com/doi/abs/10.1080/17442509908834179\">Younes - ‚ÄúOn the convergence of markovian stochastic algorithms with rapidly decreasing ergodicity rates‚Äù</a>) algorithm to maximize the lower bound of the likelihood.</li>\n</ul>\n<h3 id=\"pros-3\">Pros</h3>\n<ul>\n<li>Incoroprates top-down feedback for more robust inferences with ambiguous inputs.</li>\n</ul>\n<h3 id=\"cons-3\">Cons</h3>\n<ul>\n<li>Time complexity for the inference is higher than DBN.</li>\n<li>Optimization of the parameters is not practical for large datasets.</li>\n</ul>\n<h2 id=\"recurrent-neural-network\">Recurrent Neural Network</h2>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/deep_learning_architectures/recurrent_neural_network.png\" /></p>\n<h3 id=\"description-4\">Description</h3>\n<ul>\n<li>Proposed in <a href=\"\">Williams and Zipser - ‚ÄúA learning algorithm for continually running fully recurrent neural networks‚Äù</a>, is a NN capable of analyzing a stream of data.</li>\n<li>Useful in applications where the output depends on the previous computations.</li>\n<li>Shares the same weights across all steps.</li>\n</ul>\n<h3 id=\"pros-4\">Pros</h3>\n<ul>\n<li>Can memorize sequential events.</li>\n<li>Can model time dependencies.</li>\n<li>Has shown great success in many Natural Language Processing applications.</li>\n</ul>\n<h3 id=\"cons-4\">Cons</h3>\n<ul>\n<li>Learning issues are frequent due to the vanishing gradient and exploding gradient problems.</li>\n</ul>\n<h2 id=\"convolutional-neural-network\">Convolutional Neural Network</h2>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/deep_learning_architectures/convolutional_neural_network.png\" /></p>\n<h3 id=\"description-5\">Description</h3>\n<ul>\n<li>Proposed in <a href=\"https://ieeexplore.ieee.org/document/726791\">LeCun et al.¬†- ‚ÄúGradient-based learning applied to document recognition‚Äù</a>, it is well suited for 2D data such as images.</li>\n<li>Every hidden convolutional filter transforms its input to a 3D output volume of neuron activations.</li>\n<li>Inspired by the neurobiological model of the visual cortex (<a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC1359523/\">Hubel and Wiesel - ‚ÄúReceptive fields, binocular interaction and functional architecture in the cat‚Äôs visual cortex‚Äù</a>).</li>\n</ul>\n<h3 id=\"pros-5\">Pros</h3>\n<ul>\n<li>Few neuron connections required with respect to a typical NN.</li>\n<li>Many variants have been proposed: AlexNet (<a href=\"https://proceedings.neurips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf\">Krizhevsky et al.¬†- ‚ÄúImagenet classification with deep convolutional neural networks‚Äù</a>), Clarifai (<a href=\"https://cs.nyu.edu/~fergus/papers/zeilerECCV2014.pdf\">Zeiler and Fergus - ‚ÄúVisualizing and understanding convolutional networks‚Äù</a>), and GoogLeNet (<a href=\"https://www.cs.unc.edu/~wliu/papers/GoogLeNet.pdf\">Szegedy et al.¬†- Going deeper with convolutions‚Äù</a>).</li>\n</ul>\n<h3 id=\"cons-5\">Cons</h3>\n<ul>\n<li>It may require many layers to find an entire hierarchy of visual features.</li>\n<li>It usually requires a large dataset of labelled images.</li>\n</ul>\n"
  },
  {
    "_id": "classify_mnist_hello_ml",
    "_body": "<h1 id=\"classifying-the-mnist-dataset---the-hello-world-of-ml\">Classifying the MNIST dataset - the ‚ÄúHello, World!‚Äù of ML</h1>\n<p>Note that this is taken from Chapter 3 of the Hand-on Machine Learning book</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib <span class=\"im\">as</span> mpl</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> numpy <span class=\"im\">as</span> np</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> pandas <span class=\"im\">as</span> pd</span></code></pre></div>\n<h2 id=\"mnist\">MNIST</h2>\n<p>The MNIST dataset is a set of 70,000 small images of digits handwritten by high school students and employees of the US Census Bureau. Each image is labeled with the digit it represents. This set has been studied so much that it is often called the ‚Äúhello world‚Äù of Machine Learning: whenever people come up with a new classification algorithm they are curious to see how it will perform on MNIST, and anyone who learns Machine Learning tackles this dataset sooner or later.</p>\n<p>Scikit-Learn provides many helper functions to download popular datasets. MNIST is one of the. The following code fetches the MNIST dataset.</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.datasets <span class=\"im\">import</span> fetch_openml</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>mnist <span class=\"op\">=</span> fetch_openml(<span class=\"st\">&quot;mnist_784&quot;</span>, version<span class=\"op\">=</span><span class=\"dv\">1</span>)</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>mnist.keys()</span></code></pre></div>\n<pre><code>dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;frame&#39;, &#39;categories&#39;, &#39;feature_names&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;details&#39;, &#39;url&#39;])</code></pre>\n<p>Datasets loaded by Scikit-Learn generally have a similar dictionary structure, including the following - A <code>DESCR</code> keyword describing the dataset - A <code>data</code> key containing an array with one row per instance and one column per feature - A <code>target</code> key containing an array with the labels</p>\n<p>Let‚Äôs look at these arrays</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>X, y <span class=\"op\">=</span> mnist[<span class=\"st\">&quot;data&quot;</span>].to_numpy(), mnist[<span class=\"st\">&quot;target&quot;</span>].to_numpy()</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(X.shape)</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(y.shape)</span></code></pre></div>\n<pre><code>(70000, 784)\n(70000,)</code></pre>\n<p>There are 70,000 images, and each image has 784 features. This is because each image is 28x28 pixels, and each feature simply represents one pixel‚Äôs intensity, from 0 (white) to 255 (black). Let‚Äôs take a look at one digit from the dataset. All you need to do is grab an instance‚Äôs feature vector, reshape it to a 28x28 array, and display it using Matplotlib‚Äôs <code>imshow()</code> function:</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>some_digit <span class=\"op\">=</span> X[<span class=\"dv\">0</span>]</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>some_digit_image <span class=\"op\">=</span> some_digit.reshape(<span class=\"dv\">28</span>, <span class=\"dv\">28</span>)</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(some_digit_image, cmap<span class=\"op\">=</span><span class=\"st\">&quot;binary&quot;</span>)</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.axis(<span class=\"st\">&quot;off&quot;</span>)</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_hello_ml/classify_mnist_hello_ml_9_0.png\" /></p>\n<p>This looks like a 5, and indeed that‚Äôs what the label tells us:</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y[<span class=\"dv\">0</span>]</span></code></pre></div>\n<pre><code>&#39;5&#39;</code></pre>\n<p>Note that the label is a string. Most ML algorithms expect numbers, so let‚Äôs cast <code>y</code> to integer:</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y <span class=\"op\">=</span> y.astype(np.uint8)</span></code></pre></div>\n<p>You should always create a test set and set it aside before inspecting the data closely. The MNIST dataset is actually already split into a training set (the first 60,000 images) and a test set (the last 10,000 images).</p>\n<p>The training set is already shuffled for us, which is good because this guarentees that all cross-validation folds will be similar (you don‚Äôt want one fold to be missing some digits). Moreover, some learning algorithms are sensitive to the order of the training instances, and they perform poorly if they get many similar instances in a row. Shuffling the dataset ensures that this won‚Äôt happen</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train, X_test, y_train, y_test <span class=\"op\">=</span> X[:<span class=\"dv\">60000</span>], X[<span class=\"dv\">60000</span>:], y[:<span class=\"dv\">60000</span>], y[<span class=\"dv\">60000</span>:]</span></code></pre></div>\n<h2 id=\"training-a-binary-classifier\">Training a Binary Classifier</h2>\n<p>Let‚Äôs simplify the problem for now and only try to identify one digit - for example, the number 5. This ‚Äú5-detector‚Äù will be an example of a <em>binary classifier</em>, capable of distinguishing betrween just two classes, 5 and not-5. Let‚Äôs create the target vectors for this classification task:</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_5 <span class=\"op\">=</span> (y_train <span class=\"op\">==</span> <span class=\"dv\">5</span>)</span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_test_5 <span class=\"op\">=</span> (y_test <span class=\"op\">==</span> <span class=\"dv\">5</span>)</span></code></pre></div>\n<p>Now let‚Äôs pick a classifier and train it. A good place to start is with a <em>Stochastic Gradient Descent</em> (SGD) classifier, using Scikit-Learn‚Äôs <code>SGDClassifier</code> class. This classifier has the advantage of being capable of handling very large datasets efficiently. This is in part because SGD deals with training instances independently, one at a time (which also makes SGD well suited for online learning). Let‚Äôs create an <code>SGDClassifier</code> and train it on the whole training set:</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.linear_model <span class=\"im\">import</span> SGDClassifier</span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>sgd_clf <span class=\"op\">=</span> SGDClassifier(random_state<span class=\"op\">=</span><span class=\"dv\">42</span>)</span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>sgd_clf.fit(X_train, y_train_5)</span></code></pre></div>\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style>\n<div id=\"sk-container-id-1\" class=\"sk-top-container\">\n<div class=\"sk-text-repr-fallback\">\n<pre>SGDClassifier(random_state=42)</pre>\n<b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b>\n</div>\n<div class=\"sk-container\" hidden=\"\">\n<div class=\"sk-item\">\n<div class=\"sk-estimator sk-toggleable\">\n<input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SGDClassifier</label>\n<div class=\"sk-toggleable__content\">\n<pre>SGDClassifier(random_state=42)</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<blockquote>\n<p>The <code>SGDClassifier</code> relies on randomness during training (hence the name ‚Äústochastic‚Äù). If you want reproducible results, you should set the <code>random_state</code> parameter.</p>\n</blockquote>\n<p>Now we can use it to detect images of the number 5:</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>sgd_clf.predict([some_digit])</span></code></pre></div>\n<pre><code>array([ True])</code></pre>\n<p>The classifier guesses that this image represents a 5 (True). Looks like it guessed right in this particular case. Now, let‚Äôs evaluate the model‚Äôs performance.</p>\n<h2 id=\"performance-measures\">Performance Measures</h2>\n<h3 id=\"measuring-accuracy-using-cross-validation\">Measuring Accuracy Using Cross-Validation</h3>\n<p>A good way to evaluate a model is to use cross-validation.</p>\n<h4 id=\"aside---implementing-cross-validation\">Aside - Implementing Cross-Validation</h4>\n<p>Occasionally you will need more control over the cross-validation process than what Scikit-Learn provides off the shelf. In these cases, you can implement cross-validation yourself. The following code does roughly the same thing as Scikit-Learn‚Äôs <code>cross_val_score()</code> function, and it prints the same result.</p>\n<p>The <code>StratifiedKFold</code> class performs stratified sampling to produce folds that contain a representative ratio of each class. At each iteration the code creates a clone of the classifier, trains that clone on the training folds, and makes predictions on the test fold. Then it counts the number of correct predictions and outputs the ratio of correct predictions.</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.model_selection <span class=\"im\">import</span> StratifiedKFold</span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.base <span class=\"im\">import</span> clone</span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>skfolds <span class=\"op\">=</span> StratifiedKFold(n_splits<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> train_index, test_index <span class=\"kw\">in</span> skfolds.split(X_train, y_train_5):</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    clone_clf <span class=\"op\">=</span> clone(sgd_clf)</span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    X_train_folds <span class=\"op\">=</span> X_train[train_index]</span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    y_train_folds <span class=\"op\">=</span> y_train_5[train_index]</span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    X_test_fold <span class=\"op\">=</span> X_train[test_index]</span>\n<span id=\"cb15-11\"><a href=\"#cb15-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    y_test_fold <span class=\"op\">=</span> y_train_5[test_index]</span>\n<span id=\"cb15-12\"><a href=\"#cb15-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-13\"><a href=\"#cb15-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    clone_clf.fit(X_train_folds, y_train_folds)</span>\n<span id=\"cb15-14\"><a href=\"#cb15-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    y_pred <span class=\"op\">=</span> clone_clf.predict(X_test_fold)</span>\n<span id=\"cb15-15\"><a href=\"#cb15-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    n_correct <span class=\"op\">=</span> <span class=\"bu\">sum</span>(y_pred <span class=\"op\">==</span> y_test_fold)</span>\n<span id=\"cb15-16\"><a href=\"#cb15-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(n_correct <span class=\"op\">/</span> <span class=\"bu\">len</span>(y_pred))</span></code></pre></div>\n<pre><code>0.95035\n0.96035\n0.9604</code></pre>\n<p>Let‚Äôs use the <code>cross_val_score()</code> function to evaluate our <code>SGDClassifier</code> model, using K-fold cross-validation with three folds. K-fold cross-validation means splitting the training set into K folds (in this case, three), then making predictions and evaluating them on each fold using a model trained on the remaining folds.</p>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.model_selection <span class=\"im\">import</span> cross_val_score</span>\n<span id=\"cb17-2\"><a href=\"#cb17-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>cross_val_score(sgd_clf, X_train, y_train_5, cv<span class=\"op\">=</span><span class=\"dv\">3</span>, scoring<span class=\"op\">=</span><span class=\"st\">&quot;accuracy&quot;</span>)</span></code></pre></div>\n<pre><code>array([0.95035, 0.96035, 0.9604 ])</code></pre>\n<p>Above 95% accuracy (ratio of correct predictions) on all cross-validatin folds? This looks really good, but first let‚Äôs look at a very dumb classifier that just classifies every single image in the ‚Äúnot-5‚Äù class:</p>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.base <span class=\"im\">import</span> BaseEstimator</span>\n<span id=\"cb19-2\"><a href=\"#cb19-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-3\"><a href=\"#cb19-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Never5Classifier(BaseEstimator):</span>\n<span id=\"cb19-4\"><a href=\"#cb19-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> fit(<span class=\"va\">self</span>, X, y<span class=\"op\">=</span><span class=\"va\">None</span>):</span>\n<span id=\"cb19-5\"><a href=\"#cb19-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span></span>\n<span id=\"cb19-6\"><a href=\"#cb19-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> predict(<span class=\"va\">self</span>, X):</span>\n<span id=\"cb19-7\"><a href=\"#cb19-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> np.zeros((<span class=\"bu\">len</span>(X), <span class=\"dv\">1</span>), dtype<span class=\"op\">=</span><span class=\"bu\">bool</span>)</span>\n<span id=\"cb19-8\"><a href=\"#cb19-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-9\"><a href=\"#cb19-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>never_5_clf <span class=\"op\">=</span> Never5Classifier()</span>\n<span id=\"cb19-10\"><a href=\"#cb19-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>cross_val_score(never_5_clf, X_train, y_train_5, cv<span class=\"op\">=</span><span class=\"dv\">3</span>, scoring<span class=\"op\">=</span><span class=\"st\">&quot;accuracy&quot;</span>)</span></code></pre></div>\n<pre><code>array([0.91125, 0.90855, 0.90915])</code></pre>\n<p>This model‚Äôs accuracy has over 90%. This is simply because only about 10% of the images are 5s, so if you always guess that an image is not a 5, you will be right about 90% of the time.</p>\n<p>This demonstrates why accuracy is generally not the preffered performance measure for classifiers, especially when you are dealing with <em>skewed datasets</em> (i.e., when some classes are much more frequent than others).</p>\n<h3 id=\"confusion-matrix\">Confusion Matrix</h3>\n<p>A much better way to evaluate the performance of a classifier is to look at the <em>confusion matrix</em>. The general idea is to count the number of times instances of class A are classified as class B. For example, to know the number of times the classifier confused images of 5s and 3s, you would look in the fifth row and third column of the confusion matrix</p>\n<p>To compute the confusion matrix, you first need to have a set of predictions so that they can be compared to the actual targets. You could make predictions on the test set, but remember that you want to use the test set only at the very end of your project, once you have a classifier that you are ready to launch, so we can use the <code>cross_val_predict()</code> function.</p>\n<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb21-1\"><a href=\"#cb21-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.model_selection <span class=\"im\">import</span> cross_val_predict</span>\n<span id=\"cb21-2\"><a href=\"#cb21-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb21-3\"><a href=\"#cb21-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_pred <span class=\"op\">=</span> cross_val_predict(sgd_clf, X_train, y_train_5, cv<span class=\"op\">=</span><span class=\"dv\">3</span>)</span></code></pre></div>\n<p>Just like <code>cross_val_score()</code> function, <code>cross_val_predict()</code> performs K-fold cross-validation, but instead of returning the evaluation scores, it returns, the predictions made on each test fold. This means that you get a clean prediction for each instance in the training set (‚Äúclean meaning that the prediction is made by a model that never saw the data during training).</p>\n<p>Now you are ready to get the confusion matrix using the <code>confusion_matrix()</code> function. Just pass it the target class (<code>y_train_5</code>) and the predicted classes (<code>y_train_pred</code>):</p>\n<div class=\"sourceCode\" id=\"cb22\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb22-1\"><a href=\"#cb22-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.metrics <span class=\"im\">import</span> confusion_matrix</span>\n<span id=\"cb22-2\"><a href=\"#cb22-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb22-3\"><a href=\"#cb22-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>confusion_matrix(y_train_5, y_train_pred)</span></code></pre></div>\n<pre><code>array([[53892,   687],\n       [ 1891,  3530]])</code></pre>\n<p>Each row in a confusion matrix represents an <em>actual class</em>, while each column represents a <em>predicted class</em>. The first row of this matrix considers non-5 images (the <em>negative class</em>): 53,892 of them were correctly classified as non-5s (they are called <em>true negatives</em>), while the remaining 687 were classified as 5s (<em>false positives</em>). The second row considers the images of 5s (the <em>positive class</em>): 1,891 were wrongly classified as non-5s (<em>false negatives</em>), while the remaining 3,530 were correctly classified as 5s (<em>true positives</em>). A perfect classifier would have only true positives and true negatives, so its confusion matrix would have nonzero values only on its main diagonal (top left to bottom right):</p>\n<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb24-1\"><a href=\"#cb24-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_perfect_predictions <span class=\"op\">=</span> y_train_5  <span class=\"co\"># pretend we reached perfection</span></span>\n<span id=\"cb24-2\"><a href=\"#cb24-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>confusion_matrix(y_train_5, y_train_perfect_predictions)</span></code></pre></div>\n<pre><code>array([[54579,     0],\n       [    0,  5421]])</code></pre>\n<p>The confusion matrix gives you a lot of information, but sometimes you may prefer a more concise metric. An interesting one to look at is the accuracy of the positive predictions; this is called the <em>precision</em> of the classifier:</p>\n<p><span class=\"math display\">$$ precision = {TP \\over TP+FP} $$</span></p>\n<p><span class=\"math inline\"><em>T</em><em>P</em></span> is the number of true positives, and <span class=\"math inline\"><em>F</em><em>P</em></span> is the number of false positives.</p>\n<p>A trivial way to have perfect precision is to make one single positive prediction and ensure it is correct (precision = 1/1 = 100%). But this would not be very useful, since the classifier would ignore all but one positive instance. So precision is typically used along with another metric named <em>recall</em>, also called <em>sensitivity</em> or the <em>true positive rate</em> (TPR): this is the ratio of positive instances that are correctly detected by the classifier:</p>\n<p><span class=\"math display\">$$ recall = {TP \\over TP+FN} $$</span></p>\n<p>where <span class=\"math inline\"><em>F</em><em>N</em></span> is the number of false negatives.</p>\n<h4 id=\"precision-and-recall\">Precision and Recall</h4>\n<p>Scikit-learn provides several functions to compute classifier metrics, including precision and recall</p>\n<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb26-1\"><a href=\"#cb26-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.metrics <span class=\"im\">import</span> precision_score, recall_score</span>\n<span id=\"cb26-2\"><a href=\"#cb26-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb26-3\"><a href=\"#cb26-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(precision_score(y_train_5, y_train_pred))</span>\n<span id=\"cb26-4\"><a href=\"#cb26-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(recall_score(y_train_5, y_train_pred))</span></code></pre></div>\n<pre><code>0.8370879772350012\n0.6511713705958311</code></pre>\n<p>Now the classifier doesn‚Äôt look as good as when you only looked at its accuracy. When it claims an image represents a 5, it is correct only 83.7% of the time. Moreover, it only detects 65.1% of the 5s.</p>\n<p>It is often convenient to combine precision and recall into a single metric called the <span class=\"math inline\"><em>F</em><sub>1</sub></span> score, in particular if you need a simple way to compare two classifiers. The <span class=\"math inline\"><em>F</em><sub>1</sub></span> score is the <em>harmonic mean</em> of precision and recall (see below). Whereas the regular mean treats all values equally, the harmonic mean gives much more weight to low values. As a result, the classifier will only get a high <span class=\"math inline\"><em>F</em><sub>1</sub></span> score if both recall and precision are high.</p>\n<p><span class=\"math display\">$$ F_1 = {2 \\over {1 \\over precision} + {1 \\over recall}} = {2 * {{precision * recall} \\over {precision + recall}}} = {TP \\over {TP + {FN + FP \\over 2}}}$$</span></p>\n<p>To compute the <span class=\"math inline\"><em>F</em><sub>1</sub></span> score, simply call the <code>f1_score()</code> function:</p>\n<div class=\"sourceCode\" id=\"cb28\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb28-1\"><a href=\"#cb28-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.metrics <span class=\"im\">import</span> f1_score</span>\n<span id=\"cb28-2\"><a href=\"#cb28-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>f1_score(y_train_5, y_train_pred)</span></code></pre></div>\n<pre><code>0.7325171197343846</code></pre>\n<p>The <span class=\"math inline\"><em>F</em><sub>1</sub></span> score favours classifiers that have similar precision and recall. This is not always what you want: in some contexts you mostly care about precision, and in other contexts you really care about recall. For example, if you trained a classifier to detect videos that are safe for kids, you would probably prefer a classifier that rejects many good videos (low recall) but keeps only safe ones (high precision), rather than a classifier that has a much higher recall but lets a few really bad videos show up in your product. On the other hand, suppose you train a classifier to detect shoplifters in surveillance images: it is probably fine if your classifier has only 30% precision as long as it has 99% recall (sure, the security guards will geta few false alarts, but almost all shoplifters will get caught).</p>\n<p>Unfortunately, you can‚Äôt have it both ways: increasing precision reduces recall, and vice versa. This is called the <em>precision/recall trade-off</em>.</p>\n<h4 id=\"precisionrecall-trade-off\">Precision/Recall Trade-off</h4>\n<p>To understand this trade-off, let‚Äôs look at how the <code>SGDClassifier</code> makes its classification decision. For each instance, it computes a score based on a <em>decision function</em>. If that score is greater than a threshold, it assugns the instance to the positive class; otherwise it assigns it to the negative class. Suppose you have six actual 5s to detect and a <em>decision threshold</em> that results in 4 true positives (actual 5s) on the right of that threshold, and 1 false positive (actually a 6). Therefore, with that threshold, the precision is 80% (4 out of 5). But out of 6 actual 5s, the classifier only detects 4, so the recall is 67% (4 out of 6). If you raise the threshold (i.e., move the threshold further to the right), the false positive (the 6) becomes a true negative, thereby increasing the precision (up to 100% in this case), but one true positive becomes a false negative, decreasing recall down to 50%. Conversely, lowering the threshold increases the recall and reduces precision.</p>\n<p>Scikit-Learn does not let you set the threshold directly, but it does give you access to the decision scores that it uses to make predictions. Instead of calling the classifier;s <code>predict()</code> method, you can call its <code>decision_function()</code> method, which returns a score for each instance, and then use any threshold you want to make predictions based on those scores:</p>\n<div class=\"sourceCode\" id=\"cb30\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb30-1\"><a href=\"#cb30-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_scores <span class=\"op\">=</span> sgd_clf.decision_function([some_digit])</span>\n<span id=\"cb30-2\"><a href=\"#cb30-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(y_scores)</span>\n<span id=\"cb30-3\"><a href=\"#cb30-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>threshold <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb30-4\"><a href=\"#cb30-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_some_digit_pred <span class=\"op\">=</span> (y_scores <span class=\"op\">&gt;</span> threshold)</span>\n<span id=\"cb30-5\"><a href=\"#cb30-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(y_some_digit_pred)</span></code></pre></div>\n<pre><code>[2164.22030239]\n[ True]</code></pre>\n<p>The <code>SGDClassifier</code> uses a threshold equal to 0, so the previous code returns the same result as the <code>predict()</code> method (i.e., <code>True</code>). Let‚Äôs raise the threshold:</p>\n<div class=\"sourceCode\" id=\"cb32\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb32-1\"><a href=\"#cb32-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>threshold <span class=\"op\">=</span> <span class=\"dv\">8000</span></span>\n<span id=\"cb32-2\"><a href=\"#cb32-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_some_digit_pred <span class=\"op\">=</span> (y_scores <span class=\"op\">&gt;</span> threshold)</span>\n<span id=\"cb32-3\"><a href=\"#cb32-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(y_some_digit_pred)</span></code></pre></div>\n<pre><code>[False]</code></pre>\n<p>This confirms that raising the threshold decreases recall. The image actually represents a 5, and the classifier detects it when the threshold is 0, but it misses it when the threshold is increased to 8,000.</p>\n<p>How do you decide which threshold to use? First, use the <code>cross_val_predict()</code> function to get the scores of all instances in the training set, but this time specify that you want to return decision scores instead of predictions:</p>\n<div class=\"sourceCode\" id=\"cb34\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb34-1\"><a href=\"#cb34-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_scores <span class=\"op\">=</span> cross_val_predict(sgd_clf, X_train, y_train_5, cv<span class=\"op\">=</span><span class=\"dv\">3</span>, method<span class=\"op\">=</span><span class=\"st\">&quot;decision_function&quot;</span>)</span></code></pre></div>\n<p>With these scores, use the <code>precision_recall_curve()</code> function to compute precision and recall for all possible thresholds:</p>\n<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb35-1\"><a href=\"#cb35-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.metrics <span class=\"im\">import</span> precision_recall_curve</span>\n<span id=\"cb35-2\"><a href=\"#cb35-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb35-3\"><a href=\"#cb35-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>precisions, recalls, thresholds <span class=\"op\">=</span> precision_recall_curve(y_train_5, y_scores)</span></code></pre></div>\n<p>Finally, use Matplotlib to plot precision and recall as functions of the threshold value.</p>\n<div class=\"sourceCode\" id=\"cb36\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb36-1\"><a href=\"#cb36-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plot_precision_recall_vs_threshold(precisions, recalls, thresholds):</span>\n<span id=\"cb36-2\"><a href=\"#cb36-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.plot(thresholds, precisions[:<span class=\"op\">-</span><span class=\"dv\">1</span>], <span class=\"st\">&quot;b--&quot;</span>, label<span class=\"op\">=</span><span class=\"st\">&quot;Precision&quot;</span>, linewidth<span class=\"op\">=</span><span class=\"dv\">2</span>)</span>\n<span id=\"cb36-3\"><a href=\"#cb36-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.plot(thresholds, recalls[:<span class=\"op\">-</span><span class=\"dv\">1</span>], <span class=\"st\">&quot;g-&quot;</span>, label<span class=\"op\">=</span><span class=\"st\">&quot;Recall&quot;</span>, linewidth<span class=\"op\">=</span><span class=\"dv\">2</span>)</span>\n<span id=\"cb36-4\"><a href=\"#cb36-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.legend(loc<span class=\"op\">=</span><span class=\"st\">&quot;center right&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">16</span>) <span class=\"co\"># Not shown in the book</span></span>\n<span id=\"cb36-5\"><a href=\"#cb36-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.xlabel(<span class=\"st\">&quot;Threshold&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">16</span>)        <span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-6\"><a href=\"#cb36-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.grid(<span class=\"va\">True</span>)                              <span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-7\"><a href=\"#cb36-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.axis([<span class=\"op\">-</span><span class=\"dv\">50000</span>, <span class=\"dv\">50000</span>, <span class=\"dv\">0</span>, <span class=\"dv\">1</span>])             <span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-8\"><a href=\"#cb36-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb36-9\"><a href=\"#cb36-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb36-10\"><a href=\"#cb36-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb36-11\"><a href=\"#cb36-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>recall_90_precision <span class=\"op\">=</span> recalls[np.argmax(precisions <span class=\"op\">&gt;=</span> <span class=\"fl\">0.90</span>)]</span>\n<span id=\"cb36-12\"><a href=\"#cb36-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>threshold_90_precision <span class=\"op\">=</span> thresholds[np.argmax(precisions <span class=\"op\">&gt;=</span> <span class=\"fl\">0.90</span>)]</span>\n<span id=\"cb36-13\"><a href=\"#cb36-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb36-14\"><a href=\"#cb36-14\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb36-15\"><a href=\"#cb36-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">8</span>, <span class=\"dv\">4</span>))                                                                  <span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-16\"><a href=\"#cb36-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_precision_recall_vs_threshold(precisions, recalls, thresholds)</span>\n<span id=\"cb36-17\"><a href=\"#cb36-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([threshold_90_precision, threshold_90_precision], [<span class=\"fl\">0.</span>, <span class=\"fl\">0.9</span>], <span class=\"st\">&quot;r:&quot;</span>)                 <span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-18\"><a href=\"#cb36-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([<span class=\"op\">-</span><span class=\"dv\">50000</span>, threshold_90_precision], [<span class=\"fl\">0.9</span>, <span class=\"fl\">0.9</span>], <span class=\"st\">&quot;r:&quot;</span>)                                <span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-19\"><a href=\"#cb36-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([<span class=\"op\">-</span><span class=\"dv\">50000</span>, threshold_90_precision], [recall_90_precision, recall_90_precision], <span class=\"st\">&quot;r:&quot;</span>)<span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-20\"><a href=\"#cb36-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([threshold_90_precision], [<span class=\"fl\">0.9</span>], <span class=\"st\">&quot;ro&quot;</span>)                                             <span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-21\"><a href=\"#cb36-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([threshold_90_precision], [recall_90_precision], <span class=\"st\">&quot;ro&quot;</span>)                             <span class=\"co\"># Not shown</span></span>\n<span id=\"cb36-22\"><a href=\"#cb36-22\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># save_fig(&quot;precision_recall_vs_threshold_plot&quot;)                                              # Not shown</span></span>\n<span id=\"cb36-23\"><a href=\"#cb36-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_hello_ml/classify_mnist_hello_ml_53_0.png\" /></p>\n<p>Another way to select a good precision/recall trade-off is to plot precision directly against recall, shown below (the same threshold as earlier is highlighted).</p>\n<div class=\"sourceCode\" id=\"cb37\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb37-1\"><a href=\"#cb37-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plot_precision_vs_recall(precisions, recalls):</span>\n<span id=\"cb37-2\"><a href=\"#cb37-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.plot(recalls, precisions, <span class=\"st\">&quot;b-&quot;</span>, linewidth<span class=\"op\">=</span><span class=\"dv\">2</span>)</span>\n<span id=\"cb37-3\"><a href=\"#cb37-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.xlabel(<span class=\"st\">&quot;Recall&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">16</span>)</span>\n<span id=\"cb37-4\"><a href=\"#cb37-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.ylabel(<span class=\"st\">&quot;Precision&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">16</span>)</span>\n<span id=\"cb37-5\"><a href=\"#cb37-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.axis([<span class=\"dv\">0</span>, <span class=\"dv\">1</span>, <span class=\"dv\">0</span>, <span class=\"dv\">1</span>])</span>\n<span id=\"cb37-6\"><a href=\"#cb37-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.grid(<span class=\"va\">True</span>)</span>\n<span id=\"cb37-7\"><a href=\"#cb37-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb37-8\"><a href=\"#cb37-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">8</span>, <span class=\"dv\">6</span>))</span>\n<span id=\"cb37-9\"><a href=\"#cb37-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_precision_vs_recall(precisions, recalls)</span>\n<span id=\"cb37-10\"><a href=\"#cb37-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([recall_90_precision, recall_90_precision], [<span class=\"fl\">0.</span>, <span class=\"fl\">0.9</span>], <span class=\"st\">&quot;r:&quot;</span>)</span>\n<span id=\"cb37-11\"><a href=\"#cb37-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([<span class=\"fl\">0.0</span>, recall_90_precision], [<span class=\"fl\">0.9</span>, <span class=\"fl\">0.9</span>], <span class=\"st\">&quot;r:&quot;</span>)</span>\n<span id=\"cb37-12\"><a href=\"#cb37-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([recall_90_precision], [<span class=\"fl\">0.9</span>], <span class=\"st\">&quot;ro&quot;</span>)</span>\n<span id=\"cb37-13\"><a href=\"#cb37-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_hello_ml/classify_mnist_hello_ml_55_0.png\" /></p>\n<p>You can see that precision really starts to fall sharply around 80% recall. You will probably want to select a precision/recall trade-off before that drop - for example, at around 60% recall. But of course, the choice depends on your project.</p>\n<p>Suppose you decide to aim for 90% precision. You look up the first plot and find that you need to use a threshold of about 8,000. To be more precise you can search for the lowest threshold that gives you at least 90% precision (<code>np.argmax()</code> will give you the first index of the maximum value, which in this case means the first <code>True</code> value):</p>\n<div class=\"sourceCode\" id=\"cb38\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb38-1\"><a href=\"#cb38-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>threshold_90_precision <span class=\"op\">=</span> thresholds[np.argmax(precisions <span class=\"op\">&gt;=</span> <span class=\"fl\">0.90</span>)]</span>\n<span id=\"cb38-2\"><a href=\"#cb38-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>threshold_90_precision</span></code></pre></div>\n<pre><code>3370.0194991439594</code></pre>\n<p>To make predictions (on the training set for now), instead of calling the classifier‚Äôs <code>predict()</code> method, you can run this code:</p>\n<div class=\"sourceCode\" id=\"cb40\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb40-1\"><a href=\"#cb40-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_pred_90 <span class=\"op\">=</span> (y_scores <span class=\"op\">&gt;=</span> threshold_90_precision)</span></code></pre></div>\n<p>Let‚Äôs check these predictions‚Äô precision and recall</p>\n<div class=\"sourceCode\" id=\"cb41\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb41-1\"><a href=\"#cb41-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(precision_score(y_train_5, y_train_pred_90))</span>\n<span id=\"cb41-2\"><a href=\"#cb41-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(recall_score(y_train_5, y_train_pred_90))</span></code></pre></div>\n<pre><code>0.9000345901072293\n0.4799852425751706</code></pre>\n<p>Now we have a 90% precision classifier! As you can see, it‚Äôs fairly easy to create a classifier with cirtually any precision you want: just set a high enough threshold, and you‚Äôre done. However, a high-precision classifier is not very useful if its recall is too low.</p>\n<h4 id=\"the-roc-curve\">The ROC Curve</h4>\n<p>The <em>receiver operating characteristic</em> (ROC) curve is another common tool used with binary classifiers. It is very similar to the precision/recall curve, but instead of plotting precision versus recall, the ROC curve plots the <em>true positive rate</em> (another name for recall) against the <em>false positive rate</em> (FPR). The FPR is the ratio of negative instances that are incorrectly classified as positive. It is equal to 1 - the <em>the true negative rate</em> (TNR), which is the ratio of negative instances that are correctly classified as negative. The TNR is also called <em>specificity</em>. Hence, the ROC curve plots <em>sensitivity</em> (recall) versus 1 - _specificity.</p>\n<p>The plot the ROC curve, you first use the <code>roc_curve()</code> function to compute the TPR and FPR for various threshold values:</p>\n<div class=\"sourceCode\" id=\"cb43\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb43-1\"><a href=\"#cb43-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.metrics <span class=\"im\">import</span> roc_curve</span>\n<span id=\"cb43-2\"><a href=\"#cb43-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb43-3\"><a href=\"#cb43-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>fpr, tpr, thresholds <span class=\"op\">=</span> roc_curve(y_train_5, y_scores)</span></code></pre></div>\n<p>Then you can plot the FPR against the TPR using Matplotlib, shown below:</p>\n<div class=\"sourceCode\" id=\"cb44\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb44-1\"><a href=\"#cb44-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plot_roc_curve(fpr, tpr, label<span class=\"op\">=</span><span class=\"va\">None</span>):</span>\n<span id=\"cb44-2\"><a href=\"#cb44-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.plot(fpr, tpr, linewidth<span class=\"op\">=</span><span class=\"dv\">2</span>, label<span class=\"op\">=</span>label)</span>\n<span id=\"cb44-3\"><a href=\"#cb44-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.plot([<span class=\"dv\">0</span>, <span class=\"dv\">1</span>], [<span class=\"dv\">0</span>, <span class=\"dv\">1</span>], <span class=\"st\">&#39;k--&#39;</span>) <span class=\"co\"># dashed diagonal</span></span>\n<span id=\"cb44-4\"><a href=\"#cb44-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.axis([<span class=\"dv\">0</span>, <span class=\"dv\">1</span>, <span class=\"dv\">0</span>, <span class=\"dv\">1</span>])                                    <span class=\"co\"># Not shown in the book</span></span>\n<span id=\"cb44-5\"><a href=\"#cb44-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.xlabel(<span class=\"st\">&#39;False Positive Rate (Fall-Out)&#39;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">16</span>) <span class=\"co\"># Not shown</span></span>\n<span id=\"cb44-6\"><a href=\"#cb44-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.ylabel(<span class=\"st\">&#39;True Positive Rate (Recall)&#39;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">16</span>)    <span class=\"co\"># Not shown</span></span>\n<span id=\"cb44-7\"><a href=\"#cb44-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.grid(<span class=\"va\">True</span>)                                            <span class=\"co\"># Not shown</span></span>\n<span id=\"cb44-8\"><a href=\"#cb44-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb44-9\"><a href=\"#cb44-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">8</span>, <span class=\"dv\">6</span>))                                    <span class=\"co\"># Not shown</span></span>\n<span id=\"cb44-10\"><a href=\"#cb44-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_roc_curve(fpr, tpr)</span>\n<span id=\"cb44-11\"><a href=\"#cb44-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>fpr_90 <span class=\"op\">=</span> fpr[np.argmax(tpr <span class=\"op\">&gt;=</span> recall_90_precision)]           <span class=\"co\"># Not shown</span></span>\n<span id=\"cb44-12\"><a href=\"#cb44-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([fpr_90, fpr_90], [<span class=\"fl\">0.</span>, recall_90_precision], <span class=\"st\">&quot;r:&quot;</span>)   <span class=\"co\"># Not shown</span></span>\n<span id=\"cb44-13\"><a href=\"#cb44-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([<span class=\"fl\">0.0</span>, fpr_90], [recall_90_precision, recall_90_precision], <span class=\"st\">&quot;r:&quot;</span>)  <span class=\"co\"># Not shown</span></span>\n<span id=\"cb44-14\"><a href=\"#cb44-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([fpr_90], [recall_90_precision], <span class=\"st\">&quot;ro&quot;</span>)               <span class=\"co\"># Not shown</span></span>\n<span id=\"cb44-15\"><a href=\"#cb44-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_hello_ml/classify_mnist_hello_ml_66_0.png\" /></p>\n<p>Once again there is a trade-off: the higher the recall (TPR), the more false positives (FPR) the classifier produces. The dotted line represents the ROC curve of a purely random classifier; a good classifier stays as far away from that line as possible (towards the top-left corner).</p>\n<p>One way to compare classifiers is to measyre the <em>area under the curve</em> (AUC). A perfect classifier will have a ROC AUC equal to 1, whereas a purely random classifier will have a ROC AUC equal to 0.5. Scikit-Learn provides a function to compute the ROC AUC:</p>\n<div class=\"sourceCode\" id=\"cb45\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb45-1\"><a href=\"#cb45-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.metrics <span class=\"im\">import</span> roc_auc_score</span>\n<span id=\"cb45-2\"><a href=\"#cb45-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb45-3\"><a href=\"#cb45-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>roc_auc_score(y_train_5, y_scores)</span></code></pre></div>\n<pre><code>0.9604938554008616</code></pre>\n<blockquote>\n<p>Since the ROC curve is so similar to the precision/recall (PR) curve, you may wonder how to decide which one to use. As a rule of thumb, you should prefer the PR curve whenever the positive class is rare or when you care more about the false positives than the false negatives. Otherwise, use the ROC curve. For example, looking at the previous ROC curve (and the ROC AUC score), you may think that the classifier is really good. But this is mostly because there are few positives (5s) compared to the negatives (non-5s). In contrast, the PR curve makes it clear that the classifier has room for improvement (the curve could be closer to the top-left corner).</p>\n</blockquote>\n<p>Let‚Äôs now train a <code>RandomForestClassifiers</code> and compare its ROC curve and ROC AUC score to those of the <code>SGDClassifier</code>. First, you need to get scores for each instance in the training set. But due to the way it works, the <code>RandomForestClassifier</code> class does not have a <code>decision_function()</code> method. Instead, it has a <code>predict_proba()</code> method. Scikit-Learn classifiers generally have one or the other, or both. The <code>predict_proba()</code> method returns an array containing a row per instance and a column per class, each containing the probability that the given instance belongs to the given class (e.g., 70% chance that the image represents a 5):</p>\n<div class=\"sourceCode\" id=\"cb47\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb47-1\"><a href=\"#cb47-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.ensemble <span class=\"im\">import</span> RandomForestClassifier</span>\n<span id=\"cb47-2\"><a href=\"#cb47-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>forest_clf <span class=\"op\">=</span> RandomForestClassifier(n_estimators<span class=\"op\">=</span><span class=\"dv\">100</span>, random_state<span class=\"op\">=</span><span class=\"dv\">42</span>)</span>\n<span id=\"cb47-3\"><a href=\"#cb47-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_probas_forest <span class=\"op\">=</span> cross_val_predict(forest_clf, X_train, y_train_5, cv<span class=\"op\">=</span><span class=\"dv\">3</span>, method<span class=\"op\">=</span><span class=\"st\">&quot;predict_proba&quot;</span>)</span></code></pre></div>\n<p>The <code>roc_curve()</code> function expects labels and scores, but instead of scores you can give it probabilities. Let‚Äôs use the positive class‚Äôs probability as he score:</p>\n<div class=\"sourceCode\" id=\"cb48\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb48-1\"><a href=\"#cb48-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_scores_forest <span class=\"op\">=</span> y_probas_forest[:, <span class=\"dv\">1</span>] <span class=\"co\"># score = proba of positive class</span></span>\n<span id=\"cb48-2\"><a href=\"#cb48-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>fpr_forest, tpr_forest, thresholds_forest <span class=\"op\">=</span> roc_curve(y_train_5,y_scores_forest)</span></code></pre></div>\n<p>Now you are ready to plot the ROC curve. It is useful to plot the first ROC curve as well to see how they compare:</p>\n<div class=\"sourceCode\" id=\"cb49\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb49-1\"><a href=\"#cb49-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>recall_for_forest <span class=\"op\">=</span> tpr_forest[np.argmax(fpr_forest <span class=\"op\">&gt;=</span> fpr_90)]</span>\n<span id=\"cb49-2\"><a href=\"#cb49-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb49-3\"><a href=\"#cb49-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">8</span>, <span class=\"dv\">6</span>))</span>\n<span id=\"cb49-4\"><a href=\"#cb49-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot(fpr, tpr, <span class=\"st\">&quot;b:&quot;</span>, linewidth<span class=\"op\">=</span><span class=\"dv\">2</span>, label<span class=\"op\">=</span><span class=\"st\">&quot;SGD&quot;</span>)</span>\n<span id=\"cb49-5\"><a href=\"#cb49-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_roc_curve(fpr_forest, tpr_forest, <span class=\"st\">&quot;Random Forest&quot;</span>)</span>\n<span id=\"cb49-6\"><a href=\"#cb49-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([fpr_90, fpr_90], [<span class=\"fl\">0.</span>, recall_90_precision], <span class=\"st\">&quot;r:&quot;</span>)</span>\n<span id=\"cb49-7\"><a href=\"#cb49-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([<span class=\"fl\">0.0</span>, fpr_90], [recall_90_precision, recall_90_precision], <span class=\"st\">&quot;r:&quot;</span>)</span>\n<span id=\"cb49-8\"><a href=\"#cb49-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([fpr_90], [recall_90_precision], <span class=\"st\">&quot;ro&quot;</span>)</span>\n<span id=\"cb49-9\"><a href=\"#cb49-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([fpr_90, fpr_90], [<span class=\"fl\">0.</span>, recall_for_forest], <span class=\"st\">&quot;r:&quot;</span>)</span>\n<span id=\"cb49-10\"><a href=\"#cb49-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([fpr_90], [recall_for_forest], <span class=\"st\">&quot;ro&quot;</span>)</span>\n<span id=\"cb49-11\"><a href=\"#cb49-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.grid(<span class=\"va\">True</span>)</span>\n<span id=\"cb49-12\"><a href=\"#cb49-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.legend(loc<span class=\"op\">=</span><span class=\"st\">&quot;lower right&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">16</span>)</span>\n<span id=\"cb49-13\"><a href=\"#cb49-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_hello_ml/classify_mnist_hello_ml_75_0.png\" /></p>\n<p>As you can see, the <code>RandomForestClassifier</code>‚Äôs ROC curve looks much better than the <code>SGDClassifier</code>‚Äôs: it comes much claser to the top-left corner. As a result, its ROC AUC score is also significantly better:</p>\n<div class=\"sourceCode\" id=\"cb50\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb50-1\"><a href=\"#cb50-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>roc_auc_score(y_train_5, y_scores_forest)</span></code></pre></div>\n<pre><code>0.9983436731328145</code></pre>\n<p>We can also check the prevision and recall scores:</p>\n<div class=\"sourceCode\" id=\"cb52\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb52-1\"><a href=\"#cb52-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_pred_forest <span class=\"op\">=</span> cross_val_predict(forest_clf, X_train, y_train_5, cv<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb52-2\"><a href=\"#cb52-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(precision_score(y_train_5, y_train_pred_forest))</span>\n<span id=\"cb52-3\"><a href=\"#cb52-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(recall_score(y_train_5, y_train_pred_forest))</span></code></pre></div>\n<pre><code>0.9905083315756169\n0.8662608374838591</code></pre>\n<p>We now know how to trained a binary classifier, choose the appropriate metric for the task, evaluate the classifiers using cross-validation, select the precision/recall trade-off that fits your needs, and use ROC curves and ROC AUC scores to compare various models. Now we will try to detect more than just the 5s.</p>\n<h3 id=\"multiclass-classification\">Multiclass Classification</h3>\n<p>Whereas binary classifiers distinguish between two classes, <em>multiclass classifiers</em> (also called <em>multinomial classifiers</em>) can distinguish between more than two classes.</p>\n<p>Some algorithms (such as SGD classifiers, Random Forest classifiers, and naive Bayes classifiers) are capable of handling multiple classes natively. Others (such as Logistic Regression or Support Vector Machine classifiers) are strictly binary classifiers. However, there are various strategies that you canuse to perform multiclass classification with multiple binary classifiers.</p>\n<p>One way to create a system that can classify the digit images into 10 classes (from 0 to 9) is to train 10 binary classifiers, one for each digit (a 0-detector, a 1-detector, a 2-detector, etc.). Then when you want to classify an image, you get the decision score from each classifier for that image and you select the class whose classifier outputs the highest score. This is called the <em>one-versus-the-rest</em> (OvR) strategy (also called _one-versus-all).</p>\n<p>Another strategy is to train a binary classifier for every pair of digits: one to distinguish 0s and 1s, another to distinguish 0s and 2s, another for 1s and 2s, etc.. This is called the <em>one-versus-one</em> (OvO) strategy. If there are <em>N</em> classes, you need to train <span class=\"math inline\">$N * (N - 1) \\over 2$</span> classifiers. For the MNIST problem, this means training 45 binary classifiers! When you want to classify an image, you have to run the image through all 45 classifiers and see which class wins the most duels. The main advantage of OvO is that each classifier only needs to be trained on the part of the training set for the two classes that is must distinguish.</p>\n<p>Some algorithms (such as Support Vector Machine classifiers) scale poorly with the size of the training set. For these algorithms OvO is preferred because it is faster to train many classifiers on small training sets than to train few classifiers on large training sets. For most binary classification algorithms, however, OvR is preferred.</p>\n<p>Scikit-Learn detects when you try to use a binary classification algorithm for a multiclass classification task, and it automatically runs OvR or OvO, depending on the algorithm. Let‚Äôs try this with a Support Vector Machine classifier using the <code>sklearn.svm.SVC</code> class:</p>\n<div class=\"sourceCode\" id=\"cb54\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb54-1\"><a href=\"#cb54-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.svm <span class=\"im\">import</span> SVC</span>\n<span id=\"cb54-2\"><a href=\"#cb54-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb54-3\"><a href=\"#cb54-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>svm_clf <span class=\"op\">=</span> SVC()</span>\n<span id=\"cb54-4\"><a href=\"#cb54-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>svm_clf.fit(X_train, y_train)</span>\n<span id=\"cb54-5\"><a href=\"#cb54-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>svm_clf.predict([some_digit])</span></code></pre></div>\n<pre><code>array([5], dtype=uint8)</code></pre>\n<p>This code trains the <code>SVC</code> on the training set using the original target classes from 0 to 9 (<code>y_train</code>), instead of the 5-versus-the-rest target classes (<code>y_train_5</code>). Then it makes a prediction (a correct one in this case). Under the hood, Scikit-Learn actually used the OvO strategy: it trained 45 binary classifiers, got their decision scores for the image, and selected the class that won the most duels.</p>\n<p>If you call the <code>decision_function()</code> method, you will see that it returns 10 scores per instance (instead of just 1). That‚Äôs one score per class:</p>\n<div class=\"sourceCode\" id=\"cb56\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb56-1\"><a href=\"#cb56-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>some_digit_scores <span class=\"op\">=</span> svm_clf.decision_function([some_digit])</span>\n<span id=\"cb56-2\"><a href=\"#cb56-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>some_digit_scores</span></code></pre></div>\n<pre><code>array([[ 1.72501977,  2.72809088,  7.2510018 ,  8.3076379 , -0.31087254,\n         9.3132482 ,  1.70975103,  2.76765202,  6.23049537,  4.84771048]])</code></pre>\n<p>The highest score is indeed the one corresponding to class 5:</p>\n<div class=\"sourceCode\" id=\"cb58\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb58-1\"><a href=\"#cb58-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(np.argmax(some_digit_scores))</span>\n<span id=\"cb58-2\"><a href=\"#cb58-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(svm_clf.classes_)</span>\n<span id=\"cb58-3\"><a href=\"#cb58-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(svm_clf.classes_[<span class=\"dv\">5</span>])</span></code></pre></div>\n<pre><code>5\n[0 1 2 3 4 5 6 7 8 9]\n5</code></pre>\n<blockquote>\n<p>When a classifier is trained, it stores the list of target classes in its <code>classes_</code> attribute, ordered by value. In this case, the index of each class in the <code>classes_</code> array conveniently matches the class itself (e.g., the class at index 5 happens to be class 5), but in general you won‚Äôt be so lucky.</p>\n</blockquote>\n<p>If you want to force Scikit-Learn to use one-versus-one or one-versus-the-rest, you can use the <code>OnveVsOneClassifier</code> or <code>OneVsRestClassifier</code> classes. Simply create an instance and pass a classifier to its constructor (it does not even have to be a binary classifier). For example, this code creates a multiclass classifier using the OvR strategy, based on an <code>SVC</code>:</p>\n<div class=\"sourceCode\" id=\"cb60\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb60-1\"><a href=\"#cb60-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.multiclass <span class=\"im\">import</span> OneVsRestClassifier</span>\n<span id=\"cb60-2\"><a href=\"#cb60-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>ovr_clf <span class=\"op\">=</span> OneVsRestClassifier(SVC(gamma<span class=\"op\">=</span><span class=\"st\">&quot;auto&quot;</span>, random_state<span class=\"op\">=</span><span class=\"dv\">42</span>))</span>\n<span id=\"cb60-3\"><a href=\"#cb60-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>ovr_clf.fit(X_train[:<span class=\"dv\">1000</span>], y_train[:<span class=\"dv\">1000</span>])</span>\n<span id=\"cb60-4\"><a href=\"#cb60-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(ovr_clf.predict([some_digit]))</span>\n<span id=\"cb60-5\"><a href=\"#cb60-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"bu\">len</span>(ovr_clf.estimators_))</span></code></pre></div>\n<pre><code>[5]\n10</code></pre>\n<p>Training an <code>SGDClassifier</code> (or a <code>RandomForestClassifier</code>) is just as easy:</p>\n<div class=\"sourceCode\" id=\"cb62\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb62-1\"><a href=\"#cb62-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>sgd_clf.fit(X_train, y_train)</span>\n<span id=\"cb62-2\"><a href=\"#cb62-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>sgd_clf.predict([some_digit])</span></code></pre></div>\n<pre><code>array([3], dtype=uint8)</code></pre>\n<p>This time Scikit-learn did not have to run OvR or OvO because SGD classifiers can directly classify instances into multiple classes. The <code>decision_function()</code> method now returns one value per class. Let‚Äôs look at the score that the SGD classifier assigned to each class:</p>\n<div class=\"sourceCode\" id=\"cb64\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb64-1\"><a href=\"#cb64-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>sgd_clf.decision_function([some_digit])</span></code></pre></div>\n<pre><code>array([[-31893.03095419, -34419.69069632,  -9530.63950739,\n          1823.73154031, -22320.14822878,  -1385.80478895,\n        -26188.91070951, -16147.51323997,  -4604.35491274,\n        -12050.767298  ]])</code></pre>\n<p>You can see that the classifier is fairly confident about its prediction: almost all scores are largely negative, while class 5 has a high score. The model has a slight doubt regarding class 3. Now of course you want to evaluate this classifier. As usual, you can use cross-validation. Use the <code>cross_val_score()</code> function to evaluate the <code>SGDClassifier</code>‚Äôs accuracy:</p>\n<div class=\"sourceCode\" id=\"cb66\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb66-1\"><a href=\"#cb66-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># Warning: This cell may take close to 30 minutes to run, or more depending on your hardware.</span></span>\n<span id=\"cb66-2\"><a href=\"#cb66-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>cross_val_score(sgd_clf, X_train, y_train, cv<span class=\"op\">=</span><span class=\"dv\">3</span>, scoring<span class=\"op\">=</span><span class=\"st\">&quot;accuracy&quot;</span>)</span></code></pre></div>\n<pre><code>array([0.87365, 0.85835, 0.8689 ])</code></pre>\n<p>It gets over 84% on all test folds. If you used a random classifier, you would get 10% accuracy, so this is not such a bad score, but you can still do much better. Simply scaling the inputs increases accuracy above 89%.</p>\n<div class=\"sourceCode\" id=\"cb68\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb68-1\"><a href=\"#cb68-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># Warning: This cell may take close to 30 minutes to run, or more depending on your hardware.</span></span>\n<span id=\"cb68-2\"><a href=\"#cb68-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.preprocessing <span class=\"im\">import</span> StandardScaler</span>\n<span id=\"cb68-3\"><a href=\"#cb68-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>scaler <span class=\"op\">=</span> StandardScaler()</span>\n<span id=\"cb68-4\"><a href=\"#cb68-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train_scaled <span class=\"op\">=</span> scaler.fit_transform(X_train.astype(np.float64))</span>\n<span id=\"cb68-5\"><a href=\"#cb68-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>cross_val_score(sgd_clf, X_train_scaled, y_train, cv<span class=\"op\">=</span><span class=\"dv\">3</span>, scoring<span class=\"op\">=</span><span class=\"st\">&quot;accuracy&quot;</span>)</span></code></pre></div>\n<pre><code>array([0.8983, 0.891 , 0.9018])</code></pre>\n<h3 id=\"error-analysis\">Error Analysis</h3>\n<p>If this were a real project, you would have followed these steps:</p>\n<ol type=\"1\">\n<li>You‚Äôd eplore data preparation options</li>\n<li>Try out multiple models (shortlisting the best ones and fine-tuning their hyperparameters using <code>GridSearcgCV</code>)</li>\n<li>Automate as much as possible</li>\n</ol>\n<p>Here, we will assume you have found a promising model and you want to find ways to improve it. One way to do this is to analyze the types of errors it makes.</p>\n<p>First, look at the confusion matrix. You need to make predictions using the <code>cross_val_predict()</code> function, then call the <code>confusion_matrix()</code> functions, just like you did earlier:</p>\n<div class=\"sourceCode\" id=\"cb70\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb70-1\"><a href=\"#cb70-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_pred <span class=\"op\">=</span> cross_val_predict(sgd_clf, X_train_scaled, y_train, cv<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb70-2\"><a href=\"#cb70-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>conf_mx <span class=\"op\">=</span> confusion_matrix(y_train, y_train_pred)</span>\n<span id=\"cb70-3\"><a href=\"#cb70-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>conf_mx</span></code></pre></div>\n<pre><code>array([[5577,    0,   22,    5,    8,   43,   36,    6,  225,    1],\n       [   0, 6400,   37,   24,    4,   44,    4,    7,  212,   10],\n       [  27,   27, 5220,   92,   73,   27,   67,   36,  378,   11],\n       [  22,   17,  117, 5227,    2,  203,   27,   40,  403,   73],\n       [  12,   14,   41,    9, 5182,   12,   34,   27,  347,  164],\n       [  27,   15,   30,  168,   53, 4444,   75,   14,  535,   60],\n       [  30,   15,   42,    3,   44,   97, 5552,    3,  131,    1],\n       [  21,   10,   51,   30,   49,   12,    3, 5684,  195,  210],\n       [  17,   63,   48,   86,    3,  126,   25,   10, 5429,   44],\n       [  25,   18,   30,   64,  118,   36,    1,  179,  371, 5107]])</code></pre>\n<p>This is pretty tough to look at. It‚Äôs often more convenient to look at an image representation of the confusion matrix, using Matplotlib‚Äôs <code>matshow()</code> function:</p>\n<div class=\"sourceCode\" id=\"cb72\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb72-1\"><a href=\"#cb72-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.matshow(conf_mx, cmap<span class=\"op\">=</span>plt.cm.gray)</span>\n<span id=\"cb72-2\"><a href=\"#cb72-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_hello_ml/classify_mnist_hello_ml_101_0.png\" /></p>\n<p>The confusion matrix looks pretty good, since most images are on the main diagonal, which means that they were classified correctly. The 5s look slightly darker than the other digits, which could mean that there are fewer images of 5s in the dataset or that the classifier does not perform as well on 5s as on other digits. In fact, you can verify that both are the case.</p>\n<p>Let‚Äôs focus the plot on the errors. First, you need to divide each value in the confusion matrix by the number of images in the corresponding class so that you can compare error rates instead of absolute numbers of errors (which would make abundant classes look unfairly bad):</p>\n<div class=\"sourceCode\" id=\"cb73\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb73-1\"><a href=\"#cb73-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>row_sums <span class=\"op\">=</span> conf_mx.<span class=\"bu\">sum</span>(axis<span class=\"op\">=</span><span class=\"dv\">1</span>, keepdims<span class=\"op\">=</span><span class=\"va\">True</span>)</span>\n<span id=\"cb73-2\"><a href=\"#cb73-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>norm_conf_mx <span class=\"op\">=</span> conf_mx <span class=\"op\">/</span> row_sums</span></code></pre></div>\n<p>Fill the diagonal with zeros to keep only the errors, and plot the result:</p>\n<div class=\"sourceCode\" id=\"cb74\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb74-1\"><a href=\"#cb74-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>np.fill_diagonal(norm_conf_mx, <span class=\"dv\">0</span>)</span>\n<span id=\"cb74-2\"><a href=\"#cb74-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.matshow(norm_conf_mx, cmap<span class=\"op\">=</span>plt.cm.gray)</span>\n<span id=\"cb74-3\"><a href=\"#cb74-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_hello_ml/classify_mnist_hello_ml_105_0.png\" /></p>\n<p>You can clearly see the kinds of errors the classifier makes. Remember that rows represent actual classes, while columns represent predicted classes. The column for class 8 is quite bright, which tells you that many images get misclassified as 8s. However, the row for class 8 is not that bad, telling you that actual 8s in general get properly classified as 8s. As you can see, the confusion matrix is not necessarily symmetrical. You can also see that 3s and 5s often get confused (in both directions).</p>\n<p>Analyzing the confusion matrix often gives you insights into ways to improve your classifier. Looking at this plot, it seems that your efforts should be spent on reducing the false 8s. For example, you could try to gather more training data for digits that look like 8s (but are not) so that the classifier can learn to distinguish them from real 8s. Or you could engineer new features that would help the classifier - for example, writing an algorithm to count the number of closed loops (e.g., 8 has two, 6 has one, 5 has none). Or you could preprocess the images (e.g., using Scikit-image, Pillow, or OpenCV) to make some patterns, such as closed loops, stand out.</p>\n<p>Analyzing individual errors can also be a good way to gain insights on what your classifier is doing and why it is failing, but it is more difficult and time-consuming. For example, let‚Äôs plot examples of 3s and 5s.</p>\n<div class=\"sourceCode\" id=\"cb75\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb75-1\"><a href=\"#cb75-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># EXTRA</span></span>\n<span id=\"cb75-2\"><a href=\"#cb75-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> plot_digits(instances, images_per_row<span class=\"op\">=</span><span class=\"dv\">10</span>, <span class=\"op\">**</span>options):</span>\n<span id=\"cb75-3\"><a href=\"#cb75-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    size <span class=\"op\">=</span> <span class=\"dv\">28</span></span>\n<span id=\"cb75-4\"><a href=\"#cb75-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    images_per_row <span class=\"op\">=</span> <span class=\"bu\">min</span>(<span class=\"bu\">len</span>(instances), images_per_row)</span>\n<span id=\"cb75-5\"><a href=\"#cb75-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    images <span class=\"op\">=</span> [instance.reshape(size,size) <span class=\"cf\">for</span> instance <span class=\"kw\">in</span> instances]</span>\n<span id=\"cb75-6\"><a href=\"#cb75-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    n_rows <span class=\"op\">=</span> (<span class=\"bu\">len</span>(instances) <span class=\"op\">-</span> <span class=\"dv\">1</span>) <span class=\"op\">//</span> images_per_row <span class=\"op\">+</span> <span class=\"dv\">1</span></span>\n<span id=\"cb75-7\"><a href=\"#cb75-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    row_images <span class=\"op\">=</span> []</span>\n<span id=\"cb75-8\"><a href=\"#cb75-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    n_empty <span class=\"op\">=</span> n_rows <span class=\"op\">*</span> images_per_row <span class=\"op\">-</span> <span class=\"bu\">len</span>(instances)</span>\n<span id=\"cb75-9\"><a href=\"#cb75-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    images.append(np.zeros((size, size <span class=\"op\">*</span> n_empty)))</span>\n<span id=\"cb75-10\"><a href=\"#cb75-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> row <span class=\"kw\">in</span> <span class=\"bu\">range</span>(n_rows):</span>\n<span id=\"cb75-11\"><a href=\"#cb75-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        rimages <span class=\"op\">=</span> images[row <span class=\"op\">*</span> images_per_row : (row <span class=\"op\">+</span> <span class=\"dv\">1</span>) <span class=\"op\">*</span> images_per_row]</span>\n<span id=\"cb75-12\"><a href=\"#cb75-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        row_images.append(np.concatenate(rimages, axis<span class=\"op\">=</span><span class=\"dv\">1</span>))</span>\n<span id=\"cb75-13\"><a href=\"#cb75-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    image <span class=\"op\">=</span> np.concatenate(row_images, axis<span class=\"op\">=</span><span class=\"dv\">0</span>)</span>\n<span id=\"cb75-14\"><a href=\"#cb75-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.imshow(image, cmap <span class=\"op\">=</span> mpl.cm.binary, <span class=\"op\">**</span>options)</span>\n<span id=\"cb75-15\"><a href=\"#cb75-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    plt.axis(<span class=\"st\">&quot;off&quot;</span>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb76\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb76-1\"><a href=\"#cb76-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>cl_a, cl_b <span class=\"op\">=</span> <span class=\"dv\">3</span>, <span class=\"dv\">5</span></span>\n<span id=\"cb76-2\"><a href=\"#cb76-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_aa <span class=\"op\">=</span> X_train[(y_train <span class=\"op\">==</span> cl_a) <span class=\"op\">&amp;</span> (y_train_pred <span class=\"op\">==</span> cl_a)]</span>\n<span id=\"cb76-3\"><a href=\"#cb76-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_ab <span class=\"op\">=</span> X_train[(y_train <span class=\"op\">==</span> cl_a) <span class=\"op\">&amp;</span> (y_train_pred <span class=\"op\">==</span> cl_b)]</span>\n<span id=\"cb76-4\"><a href=\"#cb76-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_ba <span class=\"op\">=</span> X_train[(y_train <span class=\"op\">==</span> cl_b) <span class=\"op\">&amp;</span> (y_train_pred <span class=\"op\">==</span> cl_a)]</span>\n<span id=\"cb76-5\"><a href=\"#cb76-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_bb <span class=\"op\">=</span> X_train[(y_train <span class=\"op\">==</span> cl_b) <span class=\"op\">&amp;</span> (y_train_pred <span class=\"op\">==</span> cl_b)]</span>\n<span id=\"cb76-6\"><a href=\"#cb76-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb76-7\"><a href=\"#cb76-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">8</span>,<span class=\"dv\">8</span>))</span>\n<span id=\"cb76-8\"><a href=\"#cb76-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">221</span>)<span class=\"op\">;</span> plot_digits(X_aa[:<span class=\"dv\">25</span>], images_per_row<span class=\"op\">=</span><span class=\"dv\">5</span>)</span>\n<span id=\"cb76-9\"><a href=\"#cb76-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">222</span>)<span class=\"op\">;</span> plot_digits(X_ab[:<span class=\"dv\">25</span>], images_per_row<span class=\"op\">=</span><span class=\"dv\">5</span>)</span>\n<span id=\"cb76-10\"><a href=\"#cb76-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">223</span>)<span class=\"op\">;</span> plot_digits(X_ba[:<span class=\"dv\">25</span>], images_per_row<span class=\"op\">=</span><span class=\"dv\">5</span>)</span>\n<span id=\"cb76-11\"><a href=\"#cb76-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">224</span>)<span class=\"op\">;</span> plot_digits(X_bb[:<span class=\"dv\">25</span>], images_per_row<span class=\"op\">=</span><span class=\"dv\">5</span>)</span>\n<span id=\"cb76-12\"><a href=\"#cb76-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_hello_ml/classify_mnist_hello_ml_108_0.png\" /></p>\n<p>The two 5x5 blocks on the left show digits classified as 3s, and the two 5x5 blocks on the right show images classified as 5s. Some of the digits that the classifier get wrong (i.e., in the bottom-left and top-right blocks) are so badly written that even a human would have trouble classifying them (e.g., the 5 in the first row and second column truly looks like a badly written 3). However, the most misclassified images seem like obvious errors to us, and it‚Äôs hard to understand why the classifier made the mistakes it did. The reason is that we used a simple <code>SGDClassifier</code>. which is a linear model. All it does is assign a weight per class to each pixel, and when it sees a new image it just sums up the weighted pizel intensities to get a score for each class. So since 3s and 5s differ only by a few pixels, this model will easily confuse them.</p>\n<p>The main difference between 3s and 5s is the position of the small line that joins the top line to the bottom arc. If you draw a 3 with the junction slightly shifted to the left, the classifier might classify it as a 5, and vice versa. In other words, this classifier is quite sensitive to image shifting an rotation. So one way to reduce the 3/5 confusion would be to preprocess the images to ensure that they are well centered and not too rotated. This will probably help reduce other errors as well.</p>\n<h2 id=\"multilabel-classification\">Multilabel Classification</h2>\n<p>Until now each instance has always been assigned to just one class. In some cases you may want your classifier to output multiple classes for each instance. Consider a face-recognition classifier: what should it do if it recognizes several people in the same picture? It should attach one tag per person it recognizes. Say the classifier has been trained to recognize three faces: Alice, BOb, and Charlie, it should output [1,0,1] (meaning ‚ÄúAlice yes, Bob no, Charlie yes‚Äù). Such a classification system that outputs multiple binary tags is called a <em>multilabel classification</em> system.</p>\n<p>As a simple example, look at the code below:</p>\n<div class=\"sourceCode\" id=\"cb77\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb77-1\"><a href=\"#cb77-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.neighbors <span class=\"im\">import</span> KNeighborsClassifier</span>\n<span id=\"cb77-2\"><a href=\"#cb77-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb77-3\"><a href=\"#cb77-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_large <span class=\"op\">=</span> (y_train <span class=\"op\">&gt;=</span> <span class=\"dv\">7</span>)</span>\n<span id=\"cb77-4\"><a href=\"#cb77-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_odd <span class=\"op\">=</span> (y_train <span class=\"op\">%</span> <span class=\"dv\">2</span> <span class=\"op\">==</span> <span class=\"dv\">1</span>)</span>\n<span id=\"cb77-5\"><a href=\"#cb77-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_multilabel <span class=\"op\">=</span> np.c_[y_train_large, y_train_odd]</span>\n<span id=\"cb77-6\"><a href=\"#cb77-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb77-7\"><a href=\"#cb77-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>knn_clf <span class=\"op\">=</span> KNeighborsClassifier()</span>\n<span id=\"cb77-8\"><a href=\"#cb77-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>knn_clf.fit(X_train, y_multilabel)</span></code></pre></div>\n<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style>\n<div id=\"sk-container-id-2\" class=\"sk-top-container\">\n<div class=\"sk-text-repr-fallback\">\n<pre>KNeighborsClassifier()</pre>\n<b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b>\n</div>\n<div class=\"sk-container\" hidden=\"\">\n<div class=\"sk-item\">\n<div class=\"sk-estimator sk-toggleable\">\n<input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label>\n<div class=\"sk-toggleable__content\">\n<pre>KNeighborsClassifier()</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p>This code creates a <code>y_multilabel</code> array containing two target labels for each digit image: the first indicates whether or not the digit is large (7, 8, or 9), and the second indicates whether or not it is odd. The next lines create a <code>KNeighborsClassifier</code> instance (which supports multilabel classification, though not all classifiers do), and we train it using the multiple targets array. Now you can make a prediction, and notice that it outputs two labels:</p>\n<div class=\"sourceCode\" id=\"cb78\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb78-1\"><a href=\"#cb78-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># </span><span class=\"al\">NOTE</span><span class=\"co\">&gt; Omitting this cell because it fails to run</span></span>\n<span id=\"cb78-2\"><a href=\"#cb78-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># knn_clf.predict([some_digit])</span></span></code></pre></div>\n<pre><code>The Kernel crashed while executing code in the the current cell or a previous cell. Please review the code in the cell(s) to identify a possible cause of the failure. Click &lt;a href=&#39;https://aka.ms/vscodeJupyterKernelCrash&#39;&gt;here&lt;/a&gt; for more info. View Jupyter &lt;a href=&#39;command:jupyter.viewOutput&#39;&gt;log&lt;/a&gt; for further details.\n\n\n\nCanceled future for execute_request message before replies were done</code></pre>\n<p>And it gets it right. The digit 5 is indeed not large and odd.</p>\n<p>There are many wayt to evaluate a multilabel classifier, and selecting the right metric really depends on your project. One approach is to measure the <span class=\"math inline\"><em>F</em><sub>1</sub></span> score for each individual label (or any other binary classifier metric discussed earlier), then simply compute the average score. This code computes the average <span class=\"math inline\"><em>F</em><sub>1</sub></span> score across all labels:</p>\n<div class=\"sourceCode\" id=\"cb80\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb80-1\"><a href=\"#cb80-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># </span><span class=\"al\">NOTE</span><span class=\"co\">&gt; Omitting this cell because the preceding cell fails to run</span></span>\n<span id=\"cb80-2\"><a href=\"#cb80-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># </span><span class=\"al\">WARNING</span><span class=\"co\">: This might take a very long time (like hours)</span></span>\n<span id=\"cb80-3\"><a href=\"#cb80-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_knn_pred <span class=\"op\">=</span> cross_val_predict(knn_clf, X_train, y_multilabel, cv<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb80-4\"><a href=\"#cb80-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>f1_score(y_multilabel, y_train_knn_pred, average<span class=\"op\">=</span><span class=\"st\">&quot;macro&quot;</span>)</span></code></pre></div>\n<p>This assumes that all labels are equally important, however, which may not be the case. In particular, if you have many more pictures of Alice than of Bob or Charlie, you may want to give more weight to the classifier‚Äôs score on pictures of Alice. One simple option is to give each label a weight equal to its <em>support</em> (i.e., the number of instances with that target label). To do this, simply set <code>average=\"weighted\"</code> in the preceding code.</p>\n<h2 id=\"multioutput-classification\">Multioutput Classification</h2>\n<p>The last type of classification task discussed here is called <em>multioutput-multiclass classification</em> (or simply <em>multioutput classification</em>). It is simply a generalization of multilabel classification where each label can be multiclass (i.e., it can have more than two possible values).</p>\n<p>To illustrate this, let‚Äôs build a system that removes noise from images. It will take as input a noisy digit image, and it will output a clean digit image, represented as an array of pixel intensities, just like the MNIST images. Notice that the cliassifier‚Äôs output is multilabel (one label per pixel) and each label can have multiple values (pixel intensity ranges from 0 to 255). It is this an example of a multioutput classification system.</p>\n<p>Let‚Äôs start by creating the training and test sets by taking the MNIST images and adding noise to their pixel intensities with NumPy‚Äôs <code>randint()</code> function. The target images will be the original images:</p>\n<div class=\"sourceCode\" id=\"cb81\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb81-1\"><a href=\"#cb81-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>noise <span class=\"op\">=</span> np.random.randint(<span class=\"dv\">0</span>, <span class=\"dv\">100</span>, (<span class=\"bu\">len</span>(X_train), <span class=\"dv\">784</span>))</span>\n<span id=\"cb81-2\"><a href=\"#cb81-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train_mod <span class=\"op\">=</span> X_train <span class=\"op\">+</span> noise</span>\n<span id=\"cb81-3\"><a href=\"#cb81-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>noise <span class=\"op\">=</span> np.random.randint(<span class=\"dv\">0</span>, <span class=\"dv\">100</span>, (<span class=\"bu\">len</span>(X_test), <span class=\"dv\">784</span>))</span>\n<span id=\"cb81-4\"><a href=\"#cb81-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_test_mod <span class=\"op\">=</span> X_test <span class=\"op\">+</span> noise</span>\n<span id=\"cb81-5\"><a href=\"#cb81-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_mod <span class=\"op\">=</span> X_train</span>\n<span id=\"cb81-6\"><a href=\"#cb81-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_test_mod <span class=\"op\">=</span> X_test</span></code></pre></div>\n<p>Let‚Äôs take a peek at an image from the test set (remember, you shouldn‚Äôt normally be looking at the test set this early)</p>\n<div class=\"sourceCode\" id=\"cb82\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb82-1\"><a href=\"#cb82-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>some_index <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb82-2\"><a href=\"#cb82-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">121</span>)<span class=\"op\">;</span> plot_digit(X_test_mod[some_index])</span>\n<span id=\"cb82-3\"><a href=\"#cb82-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">122</span>)<span class=\"op\">;</span> plot_digit(y_test_mod[some_index])</span>\n<span id=\"cb82-4\"><a href=\"#cb82-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p>On the left is the noisy input image, and on the right is the clean target image. Now let‚Äôs train the classifier and make it clean this image:</p>\n<div class=\"sourceCode\" id=\"cb83\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb83-1\"><a href=\"#cb83-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>knn_clf.fit(X_train_mod, y_train_mod)</span>\n<span id=\"cb83-2\"><a href=\"#cb83-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>clean_digit <span class=\"op\">=</span> knn_clf.predict([X_test_mod[some_index]])</span>\n<span id=\"cb83-3\"><a href=\"#cb83-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plot_digit(clean_digit)</span>\n<span id=\"cb83-4\"><a href=\"#cb83-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>save_fig(<span class=\"st\">&quot;cleaned_digit_example_plot&quot;</span>)</span></code></pre></div>\n<p>Looks close enough to the target.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>We looked at how to select good metrics for classification tasks, pick the appropriate precision/recall trade-off, compared classifiers, and more generally built good classification systems for a variety of tasks.</p>\n"
  },
  {
    "_id": "data_structures_from_scratch",
    "_body": "<h1 id=\"data-structures-from-scratch\">Data Structures From Scratch</h1>\n<p>Here are some common data structures, implemented from scratch in Python. Each data structure includes a set of assertions that test the implementation.</p>\n<h2 id=\"stack\">Stack</h2>\n<p>A stack is a first-in, last-out (FILO) data structure. Think about how you would stack dinner plates on top of each other.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Stack:</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">class</span> StackNode:</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, data):</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.data <span class=\"op\">=</span> data</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.<span class=\"bu\">next</span> <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.top: <span class=\"va\">self</span>.StackNode <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> pop(<span class=\"va\">self</span>):</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"kw\">not</span> <span class=\"va\">self</span>.top:</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">raise</span> <span class=\"pp\">Exception</span>(<span class=\"st\">&quot;Empty Stack&quot;</span>)</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        data <span class=\"op\">=</span> <span class=\"va\">self</span>.top.data</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.top <span class=\"op\">=</span> <span class=\"va\">self</span>.top.<span class=\"bu\">next</span></span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> data</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> push(<span class=\"va\">self</span>, item):</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t <span class=\"op\">=</span> <span class=\"va\">self</span>.StackNode(item)</span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t.<span class=\"bu\">next</span> <span class=\"op\">=</span> <span class=\"va\">self</span>.top</span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.top <span class=\"op\">=</span> t</span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> peek(<span class=\"va\">self</span>):</span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"kw\">not</span> <span class=\"va\">self</span>.top:</span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">raise</span> <span class=\"pp\">Exception</span>(<span class=\"st\">&quot;Empty Stack&quot;</span>)</span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>.top.data</span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> is_empty(<span class=\"va\">self</span>):</span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>.top <span class=\"op\">==</span> <span class=\"va\">None</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>stack <span class=\"op\">=</span> Stack()</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(stack.is_empty())</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>stack.push(<span class=\"dv\">4</span>)</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>stack.push(<span class=\"dv\">2</span>)</span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(stack.peek() <span class=\"op\">==</span> <span class=\"dv\">2</span>)</span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(<span class=\"kw\">not</span> stack.is_empty())</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-9\"><a href=\"#cb2-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>x <span class=\"op\">=</span> stack.pop()</span>\n<span id=\"cb2-10\"><a href=\"#cb2-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(x <span class=\"op\">==</span> <span class=\"dv\">2</span>)</span>\n<span id=\"cb2-11\"><a href=\"#cb2-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(stack.peek() <span class=\"op\">==</span> <span class=\"dv\">4</span>)</span>\n<span id=\"cb2-12\"><a href=\"#cb2-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(<span class=\"kw\">not</span> stack.is_empty())</span>\n<span id=\"cb2-13\"><a href=\"#cb2-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb2-14\"><a href=\"#cb2-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>stack.pop()</span>\n<span id=\"cb2-15\"><a href=\"#cb2-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(stack.is_empty())</span></code></pre></div>\n<h2 id=\"queue\">Queue</h2>\n<p>A queue is a first-in, first-out data structure. Think about how a line works when you‚Äôre checking out at a grocery store.</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Queue:</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">class</span> QueueNode:</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, data):</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.data <span class=\"op\">=</span> data</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.<span class=\"bu\">next</span> <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.first: <span class=\"va\">self</span>.QueueNode <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.last: <span class=\"va\">self</span>.QueueNode <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> add(<span class=\"va\">self</span>, data):</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        t <span class=\"op\">=</span> <span class=\"va\">self</span>.QueueNode(data)</span>\n<span id=\"cb3-13\"><a href=\"#cb3-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.last <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb3-14\"><a href=\"#cb3-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.last.<span class=\"bu\">next</span> <span class=\"op\">=</span> t</span>\n<span id=\"cb3-15\"><a href=\"#cb3-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.last <span class=\"op\">=</span> t</span>\n<span id=\"cb3-16\"><a href=\"#cb3-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.first <span class=\"kw\">is</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb3-17\"><a href=\"#cb3-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.first <span class=\"op\">=</span> <span class=\"va\">self</span>.last</span>\n<span id=\"cb3-18\"><a href=\"#cb3-18\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-19\"><a href=\"#cb3-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> remove(<span class=\"va\">self</span>):</span>\n<span id=\"cb3-20\"><a href=\"#cb3-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.first <span class=\"kw\">is</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb3-21\"><a href=\"#cb3-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">raise</span> <span class=\"pp\">Exception</span>(<span class=\"st\">&quot;Empty Queue&quot;</span>)</span>\n<span id=\"cb3-22\"><a href=\"#cb3-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        data <span class=\"op\">=</span> <span class=\"va\">self</span>.first.data</span>\n<span id=\"cb3-23\"><a href=\"#cb3-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.first <span class=\"op\">=</span> <span class=\"va\">self</span>.first.<span class=\"bu\">next</span></span>\n<span id=\"cb3-24\"><a href=\"#cb3-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.first <span class=\"kw\">is</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb3-25\"><a href=\"#cb3-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.last <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb3-26\"><a href=\"#cb3-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> data</span>\n<span id=\"cb3-27\"><a href=\"#cb3-27\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-28\"><a href=\"#cb3-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> peek(<span class=\"va\">self</span>):</span>\n<span id=\"cb3-29\"><a href=\"#cb3-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.first <span class=\"kw\">is</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb3-30\"><a href=\"#cb3-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">raise</span> <span class=\"pp\">Exception</span>(<span class=\"st\">&quot;Empty Queue&quot;</span>)</span>\n<span id=\"cb3-31\"><a href=\"#cb3-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>.first.data</span>\n<span id=\"cb3-32\"><a href=\"#cb3-32\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-33\"><a href=\"#cb3-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> is_empty(<span class=\"va\">self</span>):</span>\n<span id=\"cb3-34\"><a href=\"#cb3-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>.first <span class=\"kw\">is</span> <span class=\"va\">None</span></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>queue <span class=\"op\">=</span> Queue()</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(queue.is_empty())</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>queue.add(<span class=\"dv\">4</span>)</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>queue.add(<span class=\"dv\">2</span>)</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(queue.peek() <span class=\"op\">==</span> <span class=\"dv\">4</span>)</span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(<span class=\"kw\">not</span> queue.is_empty())</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>x <span class=\"op\">=</span> queue.remove()</span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(x <span class=\"op\">==</span> <span class=\"dv\">4</span>)</span>\n<span id=\"cb4-11\"><a href=\"#cb4-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(queue.peek() <span class=\"op\">==</span> <span class=\"dv\">2</span>)</span>\n<span id=\"cb4-12\"><a href=\"#cb4-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(<span class=\"kw\">not</span> queue.is_empty())</span>\n<span id=\"cb4-13\"><a href=\"#cb4-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb4-14\"><a href=\"#cb4-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>queue.remove()</span>\n<span id=\"cb4-15\"><a href=\"#cb4-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(queue.is_empty())</span></code></pre></div>\n<h2 id=\"linked-list\">Linked List</h2>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Node:</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, d):</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.<span class=\"bu\">next</span> <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.data <span class=\"op\">=</span> d</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> append_to_tail(<span class=\"va\">self</span>, d):</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        end <span class=\"op\">=</span> Node(d)</span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        n <span class=\"op\">=</span> <span class=\"va\">self</span></span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">while</span> n.<span class=\"bu\">next</span> <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            n <span class=\"op\">=</span> n.<span class=\"bu\">next</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        n.<span class=\"bu\">next</span> <span class=\"op\">=</span> end</span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> delete_node(<span class=\"va\">self</span>, head, d):</span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        n <span class=\"op\">=</span> head</span>\n<span id=\"cb5-15\"><a href=\"#cb5-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> n.data <span class=\"op\">==</span> d:</span>\n<span id=\"cb5-16\"><a href=\"#cb5-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> head.<span class=\"bu\">next</span></span>\n<span id=\"cb5-17\"><a href=\"#cb5-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">while</span> n.<span class=\"bu\">next</span> <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb5-18\"><a href=\"#cb5-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> n.<span class=\"bu\">next</span>.data <span class=\"op\">==</span> d:</span>\n<span id=\"cb5-19\"><a href=\"#cb5-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>                n.<span class=\"bu\">next</span> <span class=\"op\">=</span> n.<span class=\"bu\">next</span>.<span class=\"bu\">next</span></span>\n<span id=\"cb5-20\"><a href=\"#cb5-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"cf\">return</span> head</span>\n<span id=\"cb5-21\"><a href=\"#cb5-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>            n <span class=\"op\">=</span> n.<span class=\"bu\">next</span></span>\n<span id=\"cb5-22\"><a href=\"#cb5-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> head</span>\n<span id=\"cb5-23\"><a href=\"#cb5-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-24\"><a href=\"#cb5-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> find(<span class=\"va\">self</span>, head, d):</span>\n<span id=\"cb5-25\"><a href=\"#cb5-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        n <span class=\"op\">=</span> head</span>\n<span id=\"cb5-26\"><a href=\"#cb5-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">while</span> n:</span>\n<span id=\"cb5-27\"><a href=\"#cb5-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> n.data <span class=\"op\">==</span> d:</span>\n<span id=\"cb5-28\"><a href=\"#cb5-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"cf\">return</span> n.data</span>\n<span id=\"cb5-29\"><a href=\"#cb5-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>            n <span class=\"op\">=</span> n.<span class=\"bu\">next</span></span>\n<span id=\"cb5-30\"><a href=\"#cb5-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">None</span></span>\n<span id=\"cb5-31\"><a href=\"#cb5-31\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-32\"><a href=\"#cb5-32\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> LinkedList:</span>\n<span id=\"cb5-33\"><a href=\"#cb5-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, d):</span>\n<span id=\"cb5-34\"><a href=\"#cb5-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.head <span class=\"op\">=</span> Node(d)</span>\n<span id=\"cb5-35\"><a href=\"#cb5-35\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-36\"><a href=\"#cb5-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> append_to_tail(<span class=\"va\">self</span>, d):</span>\n<span id=\"cb5-37\"><a href=\"#cb5-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.head.append_to_tail(d)</span>\n<span id=\"cb5-38\"><a href=\"#cb5-38\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-39\"><a href=\"#cb5-39\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> delete_node(<span class=\"va\">self</span>, d):</span>\n<span id=\"cb5-40\"><a href=\"#cb5-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.head <span class=\"op\">=</span> <span class=\"va\">self</span>.head.delete_node(<span class=\"va\">self</span>.head, d)</span>\n<span id=\"cb5-41\"><a href=\"#cb5-41\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-42\"><a href=\"#cb5-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> linked_list_as_list(<span class=\"va\">self</span>):</span>\n<span id=\"cb5-43\"><a href=\"#cb5-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>        result <span class=\"op\">=</span> <span class=\"bu\">list</span>()</span>\n<span id=\"cb5-44\"><a href=\"#cb5-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>        n <span class=\"op\">=</span> <span class=\"va\">self</span>.head</span>\n<span id=\"cb5-45\"><a href=\"#cb5-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">while</span> n <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb5-46\"><a href=\"#cb5-46\" aria-hidden=\"true\" tabindex=\"-1\"></a>            result.append(n.data)</span>\n<span id=\"cb5-47\"><a href=\"#cb5-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>            n <span class=\"op\">=</span> n.<span class=\"bu\">next</span></span>\n<span id=\"cb5-48\"><a href=\"#cb5-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> result</span>\n<span id=\"cb5-49\"><a href=\"#cb5-49\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-50\"><a href=\"#cb5-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> find(<span class=\"va\">self</span>, d):</span>\n<span id=\"cb5-51\"><a href=\"#cb5-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>.head.find(<span class=\"va\">self</span>.head, d)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>ll <span class=\"op\">=</span> LinkedList(<span class=\"dv\">4</span>)</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>ll.append_to_tail(<span class=\"dv\">6</span>)</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(ll.linked_list_as_list() <span class=\"op\">==</span> [<span class=\"dv\">4</span>, <span class=\"dv\">6</span>])</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>ll.append_to_tail(<span class=\"dv\">8</span>)</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(ll.linked_list_as_list() <span class=\"op\">==</span> [<span class=\"dv\">4</span>, <span class=\"dv\">6</span>, <span class=\"dv\">8</span>])</span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>ll.delete_node(<span class=\"dv\">4</span>)</span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(ll.linked_list_as_list() <span class=\"op\">==</span> [<span class=\"dv\">6</span>, <span class=\"dv\">8</span>])</span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(ll.find(<span class=\"dv\">8</span>) <span class=\"op\">==</span> <span class=\"dv\">8</span>)</span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span></code></pre></div>\n<h2 id=\"hash-table\">Hash Table</h2>\n<p>In a simple hash map implementation, we use an array of linked lists and a hash code function. To insert a key (which might be a strin g or essentially any other data type) and value, we do the following:</p>\n<ol type=\"1\">\n<li>First, compute the key‚Äôs hash code. Note that two different keys could have the same hash code, as there may be an infinite number of keys and a finite number of hash codes.</li>\n<li>Then map the hash code to an index in the array. This could be done with something like <code>hash(key) % array_length</code>. Two different hash codes could, of course, map to the same index.</li>\n<li>At this index, there is a linked list of keys and values. Store they key and value in this index. We must use a linked list because of collisions: you could have two different keys with the same has code, or two different hash codes that map to the same index.</li>\n</ol>\n<p>To retrieve the value pair by its key, you repeat the process. Compute the hash code from the key, and then compute the index from the hash code. Then, search through the linked list for the value with this key.</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> HashMap:</span>\n<span id=\"cb7-2\"><a href=\"#cb7-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">class</span> KeyValPair:</span>\n<span id=\"cb7-3\"><a href=\"#cb7-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, k, v):</span>\n<span id=\"cb7-4\"><a href=\"#cb7-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.key <span class=\"op\">=</span> k</span>\n<span id=\"cb7-5\"><a href=\"#cb7-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.val <span class=\"op\">=</span> v</span>\n<span id=\"cb7-6\"><a href=\"#cb7-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.<span class=\"bu\">next</span> <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb7-7\"><a href=\"#cb7-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-8\"><a href=\"#cb7-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb7-9\"><a href=\"#cb7-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.array_len <span class=\"op\">=</span> <span class=\"dv\">5</span></span>\n<span id=\"cb7-10\"><a href=\"#cb7-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.array <span class=\"op\">=</span> [<span class=\"va\">None</span>] <span class=\"op\">*</span> <span class=\"va\">self</span>.array_len</span>\n<span id=\"cb7-11\"><a href=\"#cb7-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb7-12\"><a href=\"#cb7-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> add(<span class=\"va\">self</span>, key, value):</span>\n<span id=\"cb7-13\"><a href=\"#cb7-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        h <span class=\"op\">=</span> <span class=\"bu\">hash</span>(key)</span>\n<span id=\"cb7-14\"><a href=\"#cb7-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        array_pos <span class=\"op\">=</span> h <span class=\"op\">%</span> <span class=\"va\">self</span>.array_len</span>\n<span id=\"cb7-15\"><a href=\"#cb7-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>.array[array_pos] <span class=\"kw\">is</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb7-16\"><a href=\"#cb7-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>.array[array_pos] <span class=\"op\">=</span> <span class=\"va\">self</span>.KeyValPair(key, value)</span>\n<span id=\"cb7-17\"><a href=\"#cb7-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb7-18\"><a href=\"#cb7-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            kv <span class=\"op\">=</span> <span class=\"va\">self</span>.array[array_pos]</span>\n<span id=\"cb7-19\"><a href=\"#cb7-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> kv.key <span class=\"op\">==</span> key:</span>\n<span id=\"cb7-20\"><a href=\"#cb7-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    kv.val <span class=\"op\">=</span> value</span>\n<span id=\"cb7-21\"><a href=\"#cb7-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    <span class=\"cf\">return</span></span>\n<span id=\"cb7-22\"><a href=\"#cb7-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">while</span> kv.<span class=\"bu\">next</span> <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb7-23\"><a href=\"#cb7-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"cf\">if</span> kv.key <span class=\"op\">==</span> key:</span>\n<span id=\"cb7-24\"><a href=\"#cb7-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    kv.val <span class=\"op\">=</span> value</span>\n<span id=\"cb7-25\"><a href=\"#cb7-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    <span class=\"cf\">return</span></span>\n<span id=\"cb7-26\"><a href=\"#cb7-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>                kv <span class=\"op\">=</span> kv.<span class=\"bu\">next</span></span>\n<span id=\"cb7-27\"><a href=\"#cb7-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>            kv.<span class=\"bu\">next</span> <span class=\"op\">=</span> <span class=\"va\">self</span>.KeyValPair(key, value)</span>\n<span id=\"cb7-28\"><a href=\"#cb7-28\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb7-29\"><a href=\"#cb7-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> get(<span class=\"va\">self</span>, key):</span>\n<span id=\"cb7-30\"><a href=\"#cb7-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        h <span class=\"op\">=</span> <span class=\"bu\">hash</span>(key)</span>\n<span id=\"cb7-31\"><a href=\"#cb7-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>        array_pos <span class=\"op\">=</span> h <span class=\"op\">%</span> <span class=\"va\">self</span>.array_len</span>\n<span id=\"cb7-32\"><a href=\"#cb7-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>        kv <span class=\"op\">=</span> <span class=\"va\">self</span>.array[array_pos]</span>\n<span id=\"cb7-33\"><a href=\"#cb7-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">while</span> kv <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb7-34\"><a href=\"#cb7-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> kv.key <span class=\"op\">==</span> key:</span>\n<span id=\"cb7-35\"><a href=\"#cb7-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"cf\">return</span> kv.val</span>\n<span id=\"cb7-36\"><a href=\"#cb7-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>            kv <span class=\"op\">=</span> kv.<span class=\"bu\">next</span></span>\n<span id=\"cb7-37\"><a href=\"#cb7-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">None</span></span>\n<span id=\"cb7-38\"><a href=\"#cb7-38\" aria-hidden=\"true\" tabindex=\"-1\"></a></span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>hm <span class=\"op\">=</span> HashMap()</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>hm.add(<span class=\"st\">&quot;alice&quot;</span>, <span class=\"st\">&quot;smith&quot;</span>)</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>hm.add(<span class=\"st\">&quot;john&quot;</span>, <span class=\"st\">&quot;doe&quot;</span>)</span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(hm.get(<span class=\"st\">&quot;alice&quot;</span>) <span class=\"op\">==</span> <span class=\"st\">&quot;smith&quot;</span>)</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(hm.get(<span class=\"st\">&quot;john&quot;</span>) <span class=\"op\">==</span> <span class=\"st\">&quot;doe&quot;</span>)</span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(hm.get(<span class=\"st\">&quot;ben&quot;</span>) <span class=\"kw\">is</span> <span class=\"va\">None</span>)</span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>hm.add(<span class=\"st\">&quot;alice&quot;</span>, <span class=\"st\">&quot;doe&quot;</span>)</span>\n<span id=\"cb8-8\"><a href=\"#cb8-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(hm.get(<span class=\"st\">&quot;alice&quot;</span>) <span class=\"op\">==</span> <span class=\"st\">&quot;doe&quot;</span>)</span></code></pre></div>\n<h2 id=\"array-list\">Array List</h2>\n<p>In some languages, arrays (often called lists in this case) are automatically resizable. The array or list will grow as you append items. In other languages, like Java, arrays are fixed length. The size is defined when you create the array.</p>\n<p>When you need an array-like data structure that offers dynamic resizing, you would usually use an <code>ArrayList</code>. An <code>ArrayList</code> is an array that resizes itself as needed while still providing O(1) access. A typical implementation is that when the array is full, the array doubles in size. Each doubling takes O(n) time, but happens so rarely that its amortized insertion time is still O(1).</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> ArrayList:</span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb9-3\"><a href=\"#cb9-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._length <span class=\"op\">=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb9-4\"><a href=\"#cb9-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._end_pointer <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb9-5\"><a href=\"#cb9-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._inner_array <span class=\"op\">=</span> [<span class=\"va\">None</span>] <span class=\"op\">*</span> <span class=\"va\">self</span>._length</span>\n<span id=\"cb9-6\"><a href=\"#cb9-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._expand_factor <span class=\"op\">=</span> <span class=\"dv\">2</span></span>\n<span id=\"cb9-7\"><a href=\"#cb9-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb9-8\"><a href=\"#cb9-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> size(<span class=\"va\">self</span>):</span>\n<span id=\"cb9-9\"><a href=\"#cb9-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>._end_pointer</span>\n<span id=\"cb9-10\"><a href=\"#cb9-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb9-11\"><a href=\"#cb9-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> add(<span class=\"va\">self</span>, d):</span>\n<span id=\"cb9-12\"><a href=\"#cb9-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._inner_array[<span class=\"va\">self</span>._end_pointer] <span class=\"op\">=</span> d</span>\n<span id=\"cb9-13\"><a href=\"#cb9-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._end_pointer <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb9-14\"><a href=\"#cb9-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"va\">self</span>._end_pointer <span class=\"op\">&gt;=</span> <span class=\"va\">self</span>._length:</span>\n<span id=\"cb9-15\"><a href=\"#cb9-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>._expand_array()</span>\n<span id=\"cb9-16\"><a href=\"#cb9-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb9-17\"><a href=\"#cb9-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"bu\">set</span>(<span class=\"va\">self</span>, idx, d):</span>\n<span id=\"cb9-18\"><a href=\"#cb9-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">while</span> idx <span class=\"op\">&gt;=</span> <span class=\"va\">self</span>._length:</span>\n<span id=\"cb9-19\"><a href=\"#cb9-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>._expand_array()</span>\n<span id=\"cb9-20\"><a href=\"#cb9-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._inner_array[idx] <span class=\"op\">=</span> d</span>\n<span id=\"cb9-21\"><a href=\"#cb9-21\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb9-22\"><a href=\"#cb9-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> get(<span class=\"va\">self</span>, idx):</span>\n<span id=\"cb9-23\"><a href=\"#cb9-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">while</span> idx <span class=\"op\">&gt;=</span> <span class=\"va\">self</span>._length:</span>\n<span id=\"cb9-24\"><a href=\"#cb9-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"va\">self</span>._expand_array()</span>\n<span id=\"cb9-25\"><a href=\"#cb9-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span>._inner_array[idx]</span>\n<span id=\"cb9-26\"><a href=\"#cb9-26\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb9-27\"><a href=\"#cb9-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> _expand_array(<span class=\"va\">self</span>):</span>\n<span id=\"cb9-28\"><a href=\"#cb9-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._length <span class=\"op\">=</span> <span class=\"va\">self</span>._length <span class=\"op\">*</span> <span class=\"va\">self</span>._expand_factor</span>\n<span id=\"cb9-29\"><a href=\"#cb9-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>        new_array <span class=\"op\">=</span> [<span class=\"va\">None</span>] <span class=\"op\">*</span> <span class=\"va\">self</span>._length</span>\n<span id=\"cb9-30\"><a href=\"#cb9-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"va\">self</span>._end_pointer):</span>\n<span id=\"cb9-31\"><a href=\"#cb9-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>            new_array[i] <span class=\"op\">=</span> <span class=\"va\">self</span>._inner_array[i]</span>\n<span id=\"cb9-32\"><a href=\"#cb9-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._inner_array <span class=\"op\">=</span> new_array</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>al <span class=\"op\">=</span> ArrayList()</span>\n<span id=\"cb10-2\"><a href=\"#cb10-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(al.size() <span class=\"op\">==</span> <span class=\"dv\">0</span>)</span>\n<span id=\"cb10-3\"><a href=\"#cb10-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>al.add(<span class=\"st\">&quot;apple&quot;</span>)</span>\n<span id=\"cb10-4\"><a href=\"#cb10-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>al.add(<span class=\"st\">&quot;banana&quot;</span>)</span>\n<span id=\"cb10-5\"><a href=\"#cb10-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>al.add(<span class=\"st\">&quot;tomato&quot;</span>)</span>\n<span id=\"cb10-6\"><a href=\"#cb10-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>al.add(<span class=\"st\">&quot;pear&quot;</span>)</span>\n<span id=\"cb10-7\"><a href=\"#cb10-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(al.size() <span class=\"op\">==</span> <span class=\"dv\">4</span>)</span>\n<span id=\"cb10-8\"><a href=\"#cb10-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(al.get(<span class=\"dv\">0</span>) <span class=\"op\">==</span> <span class=\"st\">&quot;apple&quot;</span>)</span>\n<span id=\"cb10-9\"><a href=\"#cb10-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(al.get(<span class=\"dv\">3</span>) <span class=\"op\">==</span> <span class=\"st\">&quot;pear&quot;</span>)</span>\n<span id=\"cb10-10\"><a href=\"#cb10-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(al.get(<span class=\"dv\">4</span>) <span class=\"op\">==</span> <span class=\"va\">None</span>)</span>\n<span id=\"cb10-11\"><a href=\"#cb10-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(al.get(<span class=\"dv\">100</span>) <span class=\"op\">==</span> <span class=\"va\">None</span>)</span>\n<span id=\"cb10-12\"><a href=\"#cb10-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>al.<span class=\"bu\">set</span>(<span class=\"dv\">1</span>, <span class=\"st\">&quot;squash&quot;</span>)</span>\n<span id=\"cb10-13\"><a href=\"#cb10-13\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(al.get(<span class=\"dv\">1</span>) <span class=\"op\">==</span> <span class=\"st\">&quot;squash&quot;</span>)</span></code></pre></div>\n<h2 id=\"stringbuilder\">StringBuilder</h2>\n<p>Imagine your were concatenating a list of strings, as shown below. What would the running time of this code be? For simplicity, assume that the strings are all the same length (call it <span class=\"math inline\"><em>x</em></span>) and that there are <span class=\"math inline\"><em>n</em></span> strings.</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">String</span> <span class=\"fu\">joinWords</span><span class=\"op\">(</span><span class=\"bu\">String</span><span class=\"op\">[]</span> words<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"bu\">String</span> sentence <span class=\"op\">=</span> <span class=\"st\">&quot;&quot;</span><span class=\"op\">;</span></span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"bu\">String</span> w <span class=\"op\">:</span> words<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    sentence <span class=\"op\">=</span> sentence <span class=\"op\">+</span> w<span class=\"op\">;</span></span>\n<span id=\"cb11-5\"><a href=\"#cb11-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">}</span></span>\n<span id=\"cb11-6\"><a href=\"#cb11-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> sentence<span class=\"op\">;</span></span>\n<span id=\"cb11-7\"><a href=\"#cb11-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>On each concatenation, a new copy of the string is created, and the two strings are copied over, character by character. The first iteration requires us to copy <span class=\"math inline\"><em>x</em></span> characters. The second iteration requires copying <span class=\"math inline\">2<em>x</em></span> characters. The third iteration requires <span class=\"math inline\">3<em>x</em></span>, and so on. The total time therefore is <span class=\"math inline\"><em>O</em>(<em>x</em>+2<em>x</em>+...+<em>n</em><em>x</em>)</span>. This reduces to <span class=\"math inline\"><em>O</em>(<em>x</em><em>n</em><sup>2</sup>)</span>.</p>\n<p><code>StringBuilder</code> can help you avoid this problem. <code>StringBuilder</code> simply creates a resizable array of all the strings, copying them back to a string only when necessary.</p>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode java\"><code class=\"sourceCode java\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">String</span> <span class=\"fu\">joinWords</span><span class=\"op\">(</span><span class=\"bu\">String</span><span class=\"op\">[]</span> words<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb12-2\"><a href=\"#cb12-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"bu\">StringBuilder</span> sentence <span class=\"op\">=</span> <span class=\"kw\">new</span> <span class=\"bu\">StringBuilder</span><span class=\"op\">();</span></span>\n<span id=\"cb12-3\"><a href=\"#cb12-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">for</span> <span class=\"op\">(</span><span class=\"bu\">String</span> w <span class=\"op\">:</span> words<span class=\"op\">)</span> <span class=\"op\">{</span></span>\n<span id=\"cb12-4\"><a href=\"#cb12-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    sentence<span class=\"op\">.</span><span class=\"fu\">append</span><span class=\"op\">(</span>w<span class=\"op\">);</span></span>\n<span id=\"cb12-5\"><a href=\"#cb12-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"op\">}</span></span>\n<span id=\"cb12-6\"><a href=\"#cb12-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">return</span> sentence<span class=\"op\">.</span><span class=\"fu\">toString</span><span class=\"op\">();</span></span>\n<span id=\"cb12-7\"><a href=\"#cb12-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">}</span></span></code></pre></div>\n<p>A quick Python implementation:</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> StringBuilder:</span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>):</span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._words <span class=\"op\">=</span> <span class=\"bu\">list</span>()</span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> append(<span class=\"va\">self</span>, word):</span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>._words.append(word)</span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> to_string(<span class=\"va\">self</span>):</span>\n<span id=\"cb13-7\"><a href=\"#cb13-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"st\">&quot;&quot;</span>.join(<span class=\"va\">self</span>._words)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb14-1\"><a href=\"#cb14-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>sb <span class=\"op\">=</span> StringBuilder()</span>\n<span id=\"cb14-2\"><a href=\"#cb14-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>sb.append(<span class=\"st\">&quot;hello&quot;</span>)</span>\n<span id=\"cb14-3\"><a href=\"#cb14-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>sb.append(<span class=\"st\">&quot;there&quot;</span>)</span>\n<span id=\"cb14-4\"><a href=\"#cb14-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">assert</span>(sb.to_string() <span class=\"op\">==</span> <span class=\"st\">&quot;hellothere&quot;</span>)</span></code></pre></div>\n"
  },
  {
    "_id": "classify_mnist_additional_exercises",
    "_body": "<h1 id=\"classifying-the-mnist-dataset---additional-exercises\">Classifying the MNIST dataset - Additional Exercises</h1>\n<p>Note that this is taken from Chapter 3 of the Hand-on Machine Learning book.</p>\n<p>It is recommended you review my <strong>Classifying the MNIST dataset - The Hello, World of ML</strong> article to get a background on the MNIST dataset</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib <span class=\"im\">as</span> mpl</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> numpy <span class=\"im\">as</span> np</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> pandas <span class=\"im\">as</span> pd</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> sklearn</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>sklearn.__version__</span></code></pre></div>\n<pre><code>&#39;1.1.1&#39;</code></pre>\n<p>Get the dataset</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.datasets <span class=\"im\">import</span> fetch_openml</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>mnist <span class=\"op\">=</span> fetch_openml(<span class=\"st\">&quot;mnist_784&quot;</span>, version<span class=\"op\">=</span><span class=\"dv\">1</span>)</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>mnist[<span class=\"st\">&#39;data&#39;</span>].to_csv(<span class=\"st\">&#39;./mnist_data.csv&#39;</span>)</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>mnist[<span class=\"st\">&#39;target&#39;</span>].to_csv(<span class=\"st\">&#39;./mnist_target.csv&#39;</span>)</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>mnist.keys()</span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># mnist = dict()</span></span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># mnist[&#39;data&#39;] = pd.read_csv(&#39;./mnist_data.csv&#39;, index_col=0)</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># mnist[&#39;target&#39;] = pd.read_csv(&#39;./mnist_target.csv&#39;, index_col=0).squeeze(&#39;columns&#39;)</span></span></code></pre></div>\n<pre><code>dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;frame&#39;, &#39;categories&#39;, &#39;feature_names&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;details&#39;, &#39;url&#39;])</code></pre>\n<p>Convert the target to a number, and split the dataset into a train and test set</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>X, y <span class=\"op\">=</span> mnist[<span class=\"st\">&quot;data&quot;</span>].to_numpy(), mnist[<span class=\"st\">&quot;target&quot;</span>].to_numpy()</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>y <span class=\"op\">=</span> y.astype(np.uint8)</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train, X_test, y_train, y_test <span class=\"op\">=</span> X[:<span class=\"dv\">60000</span>], X[<span class=\"dv\">60000</span>:], y[:<span class=\"dv\">60000</span>], y[<span class=\"dv\">60000</span>:]</span></code></pre></div>\n<h2 id=\"the-task---97-accuracy-classifier\">The Task - 97% Accuracy Classifier</h2>\n<p>Try to build a classifier for the MNIST dataset that achieves over 97% accuracy on the test set. Hint: the <code>KNeighborsClassifier</code> works quite well for this task; you just need to find good hyperparameter values (try a grid search on the <code>weights</code> and <code>n_neighbors</code> hyperparameters).</p>\n<p>Let‚Äôs build a <code>KNeighborsClassifier</code> model using <code>GridSearchCV</code> to find the best parameters.</p>\n<p><strong><em>NOTE that this cell make take 16+ hours to run</em></strong></p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.neighbors <span class=\"im\">import</span> KNeighborsClassifier</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.model_selection <span class=\"im\">import</span> GridSearchCV</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>param_grid <span class=\"op\">=</span> [{<span class=\"st\">&#39;weights&#39;</span>: [<span class=\"st\">&quot;uniform&quot;</span>, <span class=\"st\">&quot;distance&quot;</span>], <span class=\"st\">&#39;n_neighbors&#39;</span>: [<span class=\"dv\">3</span>, <span class=\"dv\">4</span>, <span class=\"dv\">5</span>]}]</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>knn_clf <span class=\"op\">=</span> KNeighborsClassifier()</span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>grid_search <span class=\"op\">=</span> GridSearchCV(knn_clf, param_grid, cv<span class=\"op\">=</span><span class=\"dv\">5</span>, verbose<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>grid_search.fit(X_train, y_train)</span></code></pre></div>\n<p>What were our best parameters?</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>grid_search.best_params_</span></code></pre></div>\n<pre><code>{&#39;n_neighbors&#39;: 4, &#39;weights&#39;: &#39;distance&#39;}</code></pre>\n<p>What was our best score?</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>grid_search.best_score_</span></code></pre></div>\n<pre><code>0.9716166666666666</code></pre>\n<p>Looks promising. Now lets run the best model on the test set</p>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.metrics <span class=\"im\">import</span> accuracy_score</span>\n<span id=\"cb11-2\"><a href=\"#cb11-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb11-3\"><a href=\"#cb11-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_pred <span class=\"op\">=</span> grid_search.predict(X_test)</span>\n<span id=\"cb11-4\"><a href=\"#cb11-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>accuracy_score(y_test, y_pred)</span></code></pre></div>\n<pre><code>0.9714</code></pre>\n<p>Looks like we achieved 97%!</p>\n<h2 id=\"the-task---data-augmentation\">The Task - Data Augmentation</h2>\n<p>Write a function that can shift the MNIST image in any direction (left, right, up, or down) by one pixel. Then, for each image in the training set, create four shifted copies (one per direction) and add them to the training set. Finally, train your best model on this expanded training set and measure its accuracy on the test set. You should observe that your model performs even better now. This technique of artifically growing the training set is called <em>data augmentation</em> or <em>training set expansion</em>.</p>\n<p>We can use scipy‚Äôs <code>shift</code> function the shift the image</p>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> scipy.ndimage <span class=\"im\">import</span> shift</span>\n<span id=\"cb13-2\"><a href=\"#cb13-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb13-3\"><a href=\"#cb13-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> shift_image(image, dx, dy):</span>\n<span id=\"cb13-4\"><a href=\"#cb13-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    image <span class=\"op\">=</span> image.reshape((<span class=\"dv\">28</span>, <span class=\"dv\">28</span>))</span>\n<span id=\"cb13-5\"><a href=\"#cb13-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    shifted_image <span class=\"op\">=</span> shift(image, [dy, dx], cval<span class=\"op\">=</span><span class=\"dv\">0</span>, mode<span class=\"op\">=</span><span class=\"st\">&quot;constant&quot;</span>)</span>\n<span id=\"cb13-6\"><a href=\"#cb13-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> shifted_image.reshape([<span class=\"op\">-</span><span class=\"dv\">1</span>])</span></code></pre></div>\n<p>Let‚Äôs run a quick example by shifting a single image 5 pixels down and 5 pixels left.</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb14-1\"><a href=\"#cb14-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>image <span class=\"op\">=</span> X_train[<span class=\"dv\">1000</span>]</span>\n<span id=\"cb14-2\"><a href=\"#cb14-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>shifted_image_down <span class=\"op\">=</span> shift_image(image, <span class=\"dv\">0</span>, <span class=\"dv\">5</span>)</span>\n<span id=\"cb14-3\"><a href=\"#cb14-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>shifted_image_left <span class=\"op\">=</span> shift_image(image, <span class=\"op\">-</span><span class=\"dv\">5</span>, <span class=\"dv\">0</span>)</span>\n<span id=\"cb14-4\"><a href=\"#cb14-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb14-5\"><a href=\"#cb14-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">12</span>,<span class=\"dv\">3</span>))</span>\n<span id=\"cb14-6\"><a href=\"#cb14-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">131</span>)</span>\n<span id=\"cb14-7\"><a href=\"#cb14-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.title(<span class=\"st\">&quot;Original&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">14</span>)</span>\n<span id=\"cb14-8\"><a href=\"#cb14-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(image.reshape(<span class=\"dv\">28</span>, <span class=\"dv\">28</span>), interpolation<span class=\"op\">=</span><span class=\"st\">&quot;nearest&quot;</span>, cmap<span class=\"op\">=</span><span class=\"st\">&quot;Greys&quot;</span>)</span>\n<span id=\"cb14-9\"><a href=\"#cb14-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">132</span>)</span>\n<span id=\"cb14-10\"><a href=\"#cb14-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.title(<span class=\"st\">&quot;Shifted down&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">14</span>)</span>\n<span id=\"cb14-11\"><a href=\"#cb14-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(shifted_image_down.reshape(<span class=\"dv\">28</span>, <span class=\"dv\">28</span>), interpolation<span class=\"op\">=</span><span class=\"st\">&quot;nearest&quot;</span>, cmap<span class=\"op\">=</span><span class=\"st\">&quot;Greys&quot;</span>)</span>\n<span id=\"cb14-12\"><a href=\"#cb14-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.subplot(<span class=\"dv\">133</span>)</span>\n<span id=\"cb14-13\"><a href=\"#cb14-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.title(<span class=\"st\">&quot;Shifted left&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">14</span>)</span>\n<span id=\"cb14-14\"><a href=\"#cb14-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.imshow(shifted_image_left.reshape(<span class=\"dv\">28</span>, <span class=\"dv\">28</span>), interpolation<span class=\"op\">=</span><span class=\"st\">&quot;nearest&quot;</span>, cmap<span class=\"op\">=</span><span class=\"st\">&quot;Greys&quot;</span>)</span>\n<span id=\"cb14-15\"><a href=\"#cb14-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/classify_mnist_additional_exercises/classify_mnist_additional_exercises_21_0.png\" /></p>\n<p>Those look good. Lets create the augmented dataset by adding an image shifted up, left, down and right.</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train_augmented <span class=\"op\">=</span> [image <span class=\"cf\">for</span> image <span class=\"kw\">in</span> X_train]</span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_augmented <span class=\"op\">=</span> [label <span class=\"cf\">for</span> label <span class=\"kw\">in</span> y_train]</span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> dx, dy <span class=\"kw\">in</span> ((<span class=\"dv\">1</span>, <span class=\"dv\">0</span>), (<span class=\"op\">-</span><span class=\"dv\">1</span>, <span class=\"dv\">0</span>), (<span class=\"dv\">0</span>, <span class=\"dv\">1</span>), (<span class=\"dv\">0</span>, <span class=\"op\">-</span><span class=\"dv\">1</span>)):</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> image, label <span class=\"kw\">in</span> <span class=\"bu\">zip</span>(X_train, y_train):</span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        X_train_augmented.append(shift_image(image, dx, dy))</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        y_train_augmented.append(label)</span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train_augmented <span class=\"op\">=</span> np.array(X_train_augmented)</span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_augmented <span class=\"op\">=</span> np.array(y_train_augmented)</span></code></pre></div>\n<p>We should make sure we shuffle the dataset to make sure the images that were generated from the original are not all next to each other</p>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>shuffle_idx <span class=\"op\">=</span> np.random.permutation(<span class=\"bu\">len</span>(X_train_augmented))</span>\n<span id=\"cb16-2\"><a href=\"#cb16-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train_augmented <span class=\"op\">=</span> X_train_augmented[shuffle_idx]</span>\n<span id=\"cb16-3\"><a href=\"#cb16-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train_augmented <span class=\"op\">=</span> y_train_augmented[shuffle_idx]</span></code></pre></div>\n<p>Now let‚Äôs create a new <code>KNeighborsClassifier</code> and train it with the augmented data:</p>\n<div class=\"sourceCode\" id=\"cb17\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb17-1\"><a href=\"#cb17-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>knn_clf <span class=\"op\">=</span> KNeighborsClassifier(<span class=\"op\">**</span>grid_search.best_params_)</span>\n<span id=\"cb17-2\"><a href=\"#cb17-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>knn_clf.fit(X_train_augmented, y_train_augmented)</span></code></pre></div>\n<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style>\n<div id=\"sk-container-id-5\" class=\"sk-top-container\">\n<div class=\"sk-text-repr-fallback\">\n<pre>KNeighborsClassifier(n_neighbors=4, weights=&#x27;distance&#x27;)</pre>\n<b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b>\n</div>\n<div class=\"sk-container\" hidden=\"\">\n<div class=\"sk-item\">\n<div class=\"sk-estimator sk-toggleable\">\n<input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label>\n<div class=\"sk-toggleable__content\">\n<pre>KNeighborsClassifier(n_neighbors=4, weights=&#x27;distance&#x27;)</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p>Finally, let‚Äôs test our classifier trained with the augmented data on the test set to see what our accuracy score is.</p>\n<p><strong><em>NOTE that this cell may take up to an hour to run</em></strong></p>\n<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb18-1\"><a href=\"#cb18-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_pred <span class=\"op\">=</span> knn_clf.predict(X_test)</span>\n<span id=\"cb18-2\"><a href=\"#cb18-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>accuracy_score(y_test, y_pred)</span></code></pre></div>\n<pre><code>0.9763</code></pre>\n<p>By simply augmenting the data, we got roughly a 0.5% accuracy boost!</p>\n"
  },
  {
    "_id": "prime_numbers",
    "_body": "<h1 id=\"prime-numbers\">Prime Numbers</h1>\n<p>Every positive integer can be decomposed into a product of primes. For example:</p>\n<p><span class=\"math inline\">84‚ÄÑ=‚ÄÑ2<sup>2</sup>‚ÄÖ*‚ÄÖ3<sup>1</sup>‚ÄÖ*‚ÄÖ5<sup>0</sup>‚ÄÖ*‚ÄÖ7<sup>1</sup>‚ÄÖ*‚ÄÖ11<sup>0</sup>‚ÄÖ*‚ÄÖ13<sup>0</sup>‚ÄÖ*‚ÄÖ17<sup>0</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<p>Note that many of these primes have an exponent of zero.</p>\n<h2 id=\"divisibility\">Divisibility</h2>\n<p>The prime number law stated above means that, in order for a number <span class=\"math inline\"><em>x</em></span> to be divisiable by a number <span class=\"math inline\"><em>y</em></span> (written <code>x\\y</code> or <code>mod(y, x) = 0</code>), all primes in <span class=\"math inline\"><em>x</em></span>‚Äôs prime factorization must be in <span class=\"math inline\"><em>y</em></span>‚Äôs prime factorization. Or, more specifically:</p>\n<p>Let: <span class=\"math inline\"><em>x</em>‚ÄÑ=‚ÄÑ2<sup><em>j</em>0</sup>‚ÄÖ*‚ÄÖ3<sup><em>j</em>1</sup>‚ÄÖ*‚ÄÖ5<sup><em>j</em>2</sup>‚ÄÖ*‚ÄÖ7<sup><em>j</em>3</sup>‚ÄÖ*‚ÄÖ11<sup><em>j</em>4</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<p>Let: <span class=\"math inline\"><em>y</em>‚ÄÑ=‚ÄÑ2<sup><em>k</em>0</sup>‚ÄÖ*‚ÄÖ3<sup><em>k</em>1</sup>‚ÄÖ*‚ÄÖ5<sup><em>k</em>2</sup>‚ÄÖ*‚ÄÖ7<sup><em>k</em>3</sup>‚ÄÖ*‚ÄÖ11<sup><em>k</em>4</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<p>If <code>x\\y</code>, then for all <code>i</code>, <code>ji &lt;= ki</code></p>\n<p>In fact, the greatest common divisor of <code>x</code> and <code>y</code> will be:</p>\n<p><span class=\"math inline\"><em>g</em><em>c</em><em>d</em>(<em>x</em>,<em>y</em>)‚ÄÑ=‚ÄÑ2<sup><em>m</em><em>i</em><em>n</em>(<em>j</em>0,<em>k</em>0)</sup>‚ÄÖ*‚ÄÖ3<sup><em>m</em><em>i</em><em>n</em>(<em>j</em>1,<em>k</em>1)</sup>‚ÄÖ*‚ÄÖ5<sup><em>m</em><em>i</em><em>n</em>(<em>j</em>2,<em>k</em>2)</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<p>The least common multiple of <code>x</code> and <code>y</code> will be:</p>\n<p><span class=\"math inline\"><em>l</em><em>c</em><em>m</em>(<em>x</em>,<em>y</em>)‚ÄÑ=‚ÄÑ2<sup><em>m</em><em>a</em><em>x</em>(<em>j</em>0,<em>k</em>0)</sup>‚ÄÖ*‚ÄÖ3<sup><em>m</em><em>a</em><em>x</em>(<em>j</em>1,<em>k</em>1)</sup>‚ÄÖ*‚ÄÖ5<sup><em>m</em><em>a</em><em>x</em>(<em>j</em>2,<em>k</em>2)</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<blockquote>\n<p>As an exercise, what do you think <span class=\"math inline\"><em>g</em><em>c</em><em>d</em>‚ÄÖ*‚ÄÖ<em>l</em><em>c</em><em>m</em></span> is?</p>\n<p><span class=\"math inline\"><em>g</em><em>c</em><em>d</em>‚ÄÖ*‚ÄÖ<em>l</em><em>c</em><em>m</em>‚ÄÑ=‚ÄÑ2<sup><em>m</em><em>i</em><em>n</em>(<em>j</em>0,<em>k</em>0)</sup>‚ÄÖ*‚ÄÖ2<sup><em>m</em><em>a</em><em>x</em>(<em>j</em>0,<em>k</em>0)</sup>‚ÄÖ*‚ÄÖ3<sup><em>m</em><em>i</em><em>n</em>(<em>j</em>1,<em>k</em>1)</sup>‚ÄÖ*‚ÄÖ3<sup><em>m</em><em>a</em><em>x</em>(<em>j</em>1,<em>k</em>1)</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<p><span class=\"math inline\"><em>g</em><em>c</em><em>d</em>‚ÄÖ*‚ÄÖ<em>l</em><em>c</em><em>m</em>‚ÄÑ=‚ÄÑ2<sup><em>m</em><em>i</em><em>n</em>(<em>j</em>0,<em>k</em>0)‚ÄÖ+‚ÄÖ<em>m</em><em>a</em><em>x</em>(<em>j</em>0,<em>k</em>0)</sup>‚ÄÖ*‚ÄÖ3<sup><em>m</em><em>i</em><em>n</em>(<em>j</em>1,<em>k</em>1)‚ÄÖ+‚ÄÖ<em>m</em><em>a</em><em>x</em>(<em>j</em>1,<em>k</em>1)</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<p><span class=\"math inline\"><em>g</em><em>c</em><em>d</em>‚ÄÖ*‚ÄÖ<em>l</em><em>c</em><em>m</em>‚ÄÑ=‚ÄÑ2<sup><em>j</em>0‚ÄÖ+‚ÄÖ<em>k</em>0</sup>‚ÄÖ*‚ÄÖ3<sup><em>j</em>1‚ÄÖ+‚ÄÖ<em>k</em>1</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<p><span class=\"math inline\"><em>g</em><em>c</em><em>d</em>‚ÄÖ*‚ÄÖ<em>l</em><em>c</em><em>m</em>‚ÄÑ=‚ÄÑ2<sup><em>j</em>0</sup>‚ÄÖ*‚ÄÖ2<sup><em>k</em>0</sup>‚ÄÖ*‚ÄÖ3<sup><em>j</em>1</sup>‚ÄÖ*‚ÄÖ3<sup><em>k</em>1</sup>‚ÄÖ*‚ÄÖ...</span></p>\n<p><span class=\"math inline\"><em>g</em><em>c</em><em>d</em>‚ÄÖ*‚ÄÖ<em>l</em><em>c</em><em>m</em>‚ÄÑ=‚ÄÑ<em>x</em><em>y</em></span></p>\n</blockquote>\n<h2 id=\"checking-for-primailty\">Checking for Primailty</h2>\n<p>The naive way to check for primality is to simply iterate from 2 through <span class=\"math inline\"><em>n</em>‚ÄÖ‚àí‚ÄÖ1</span>, checking for diviibility on each iteration.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> prime_naive(n):</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> n <span class=\"op\">&lt;</span> <span class=\"dv\">2</span>:</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">False</span></span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"dv\">2</span>, n):</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> n <span class=\"op\">%</span> i <span class=\"op\">==</span> <span class=\"dv\">0</span>:</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> <span class=\"va\">False</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> <span class=\"va\">True</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">%</span>timeit prime_naive(<span class=\"dv\">104729</span>)</span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(prime_naive(<span class=\"dv\">104729</span>))</span></code></pre></div>\n<pre><code>19.2 ms ¬± 4.35 ms per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\nTrue</code></pre>\n<p>A small but important improvement is to iterate only up through the square root of n.</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> math</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> prime_slightly_better(n):</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> n <span class=\"op\">&lt;</span> <span class=\"dv\">2</span>:</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">False</span></span>\n<span id=\"cb3-6\"><a href=\"#cb3-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> i <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"dv\">2</span>, math.floor(math.sqrt(n))):</span>\n<span id=\"cb3-7\"><a href=\"#cb3-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> n <span class=\"op\">%</span> i <span class=\"op\">==</span> <span class=\"dv\">0</span>:</span>\n<span id=\"cb3-8\"><a href=\"#cb3-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> <span class=\"va\">False</span></span>\n<span id=\"cb3-9\"><a href=\"#cb3-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> <span class=\"va\">True</span></span>\n<span id=\"cb3-10\"><a href=\"#cb3-10\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb3-11\"><a href=\"#cb3-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">%</span>timeit prime_naive(<span class=\"dv\">104729</span>)</span>\n<span id=\"cb3-12\"><a href=\"#cb3-12\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(prime_naive(<span class=\"dv\">104729</span>))</span></code></pre></div>\n<pre><code>15.4 ms ¬± 5.13 ms per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\nTrue</code></pre>\n<p>The <span class=\"math inline\"><em>n</em><sup>1/2</sup></span> is sufficient because, for every number <span class=\"math inline\"><em>a</em></span> which divides <span class=\"math inline\"><em>n</em></span> evenly, there is a complement <span class=\"math inline\"><em>b</em></span>, where <span class=\"math inline\"><em>a</em>‚ÄÖ*‚ÄÖ<em>b</em>‚ÄÑ=‚ÄÑ<em>n</em></span>. If <span class=\"math inline\"><em>a</em>‚ÄÑ&gt;‚ÄÑ<em>n</em><sup>1/2</sup></span>, then <span class=\"math inline\"><em>b</em>‚ÄÑ&lt;‚ÄÑ<em>n</em><sup>1/2</sup></span>. We therfore don‚Äôt need <span class=\"math inline\"><em>a</em></span> to check <span class=\"math inline\"><em>n</em></span>‚Äôs primailty, since we would have already checked with <span class=\"math inline\"><em>b</em></span>.</p>\n<p>Of course, in reality, all we really need to do is to check if <span class=\"math inline\"><em>n</em></span> is divisible by a prime number.</p>\n<h3 id=\"generating-a-list-of-primes-the-sieve-of-eratosthenes\">Generating a List of Primes: The Sieve of Eratosthenes</h3>\n<p>The Sieve of Eratosthenes is a highly efficient way to generate a list of primes. It works by recognizing that all non-prime numbers are divisible by a prime number.</p>\n<p>We start with a list of all the numbers up through some value <code>max</code>. First, we cross off all numbers divisible by 2. Then, we look for the next prime (the next non-crossed off number) and cross off all numbers divisible by it. By crossing off all numbers divisible by 2, 3, 5, 7, 11, and so on, we wind up with a list of prime numbers from 2 through <code>max</code>.</p>\n<p>The code below implements the Sieve of Eratosthenes:</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> sieve_of_eratosthenes(<span class=\"bu\">max</span>):</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    flags <span class=\"op\">=</span> [<span class=\"va\">True</span> <span class=\"cf\">for</span> _ <span class=\"kw\">in</span> <span class=\"bu\">range</span>(<span class=\"dv\">0</span>, <span class=\"bu\">max</span><span class=\"op\">+</span><span class=\"dv\">1</span>)]</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    flags[<span class=\"dv\">0</span>] <span class=\"op\">=</span> <span class=\"va\">False</span></span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    flags[<span class=\"dv\">1</span>] <span class=\"op\">=</span> <span class=\"va\">False</span></span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    count <span class=\"op\">=</span> <span class=\"dv\">0</span></span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    prime <span class=\"op\">=</span> <span class=\"dv\">2</span></span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">while</span> prime <span class=\"op\">&lt;=</span> math.sqrt(<span class=\"bu\">max</span>):</span>\n<span id=\"cb5-8\"><a href=\"#cb5-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># Cross off remaining multiples of prime</span></span>\n<span id=\"cb5-9\"><a href=\"#cb5-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        cross_off(flags, prime)</span>\n<span id=\"cb5-10\"><a href=\"#cb5-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"co\"># Find next value which is true</span></span>\n<span id=\"cb5-11\"><a href=\"#cb5-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        prime <span class=\"op\">=</span> get_next_prime(flags, prime)</span>\n<span id=\"cb5-12\"><a href=\"#cb5-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> flags</span>\n<span id=\"cb5-13\"><a href=\"#cb5-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-14\"><a href=\"#cb5-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> cross_off(flags, prime):</span>\n<span id=\"cb5-15\"><a href=\"#cb5-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># Cross off remaining multiples of prime.</span></span>\n<span id=\"cb5-16\"><a href=\"#cb5-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># We canstart with (prime*prime), because if we have a k*prime,</span></span>\n<span id=\"cb5-17\"><a href=\"#cb5-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># where k &lt; prime, this value would have already been crossed</span></span>\n<span id=\"cb5-18\"><a href=\"#cb5-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"co\"># off in a prior iteration.</span></span>\n<span id=\"cb5-19\"><a href=\"#cb5-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>    i <span class=\"op\">=</span> prime<span class=\"op\">*</span>prime</span>\n<span id=\"cb5-20\"><a href=\"#cb5-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">while</span> i <span class=\"op\">&lt;</span> <span class=\"bu\">len</span>(flags):</span>\n<span id=\"cb5-21\"><a href=\"#cb5-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        flags[i] <span class=\"op\">=</span> <span class=\"va\">False</span></span>\n<span id=\"cb5-22\"><a href=\"#cb5-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>        i <span class=\"op\">+=</span> prime</span>\n<span id=\"cb5-23\"><a href=\"#cb5-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-24\"><a href=\"#cb5-24\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> get_next_prime(flags, prime):</span>\n<span id=\"cb5-25\"><a href=\"#cb5-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    next_prime <span class=\"op\">=</span> prime <span class=\"op\">+</span> <span class=\"dv\">1</span></span>\n<span id=\"cb5-26\"><a href=\"#cb5-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">while</span> next_prime <span class=\"op\">&lt;</span> <span class=\"bu\">len</span>(flags) <span class=\"kw\">and</span> <span class=\"kw\">not</span> flags[next_prime]:</span>\n<span id=\"cb5-27\"><a href=\"#cb5-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        next_prime <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb5-28\"><a href=\"#cb5-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> next_prime</span>\n<span id=\"cb5-29\"><a href=\"#cb5-29\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb5-30\"><a href=\"#cb5-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>test_prime <span class=\"op\">=</span> <span class=\"dv\">11</span></span>\n<span id=\"cb5-31\"><a href=\"#cb5-31\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"ss\">f&quot;List of primes up to </span><span class=\"sc\">{</span>test_prime<span class=\"sc\">}</span><span class=\"ss\">:&quot;</span>)</span>\n<span id=\"cb5-32\"><a href=\"#cb5-32\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(sieve_of_eratosthenes(test_prime))</span>\n<span id=\"cb5-33\"><a href=\"#cb5-33\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>()</span>\n<span id=\"cb5-34\"><a href=\"#cb5-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>test_large_prime <span class=\"op\">=</span> <span class=\"dv\">104729</span></span>\n<span id=\"cb5-35\"><a href=\"#cb5-35\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">%</span>timeit sieve_of_eratosthenes(test_large_prime)</span>\n<span id=\"cb5-36\"><a href=\"#cb5-36\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(sieve_of_eratosthenes(test_large_prime)[test_large_prime])</span></code></pre></div>\n<pre><code>List of primes up to 11:\n[False, False, True, True, False, True, False, True, False, False, False, True]\n\n86.7 ms ¬± 38.2 ms per loop (mean ¬± std. dev. of 7 runs, 10 loops each)\nTrue</code></pre>\n<p>Of course, there are a number of optimizations that can be made to this. One simple one is to only use off numbers in the array, which would allow us to reduce our space usage by half.</p>\n"
  },
  {
    "_id": "titanic_dataset",
    "_body": "<h1 id=\"titanic-dataset---will-a-passeger-survive\">Titanic Dataset - Will a Passeger Survive?</h1>\n<p>The goal is to predict whether or not a passenger survived based on attributes such as their age, sex, passenger class, where they embarked and so on.</p>\n<p>The challenge is from Kaggle and can be found at <a href=\"https://www.kaggle.com/c/titanic\">https://www.kaggle.com/c/titanic</a>.</p>\n<p>First, let‚Äôs load the dataset from the link above and save the <code>CSV</code> files in <code>./data</code>. We will then load them.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> os</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> pandas <span class=\"im\">as</span> pd</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>TITANIC_PATH <span class=\"op\">=</span> <span class=\"st\">&quot;./data&quot;</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> load_titanic_data(filename, titanic_path<span class=\"op\">=</span>TITANIC_PATH):</span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    csv_path <span class=\"op\">=</span> os.path.join(titanic_path, filename)</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> pd.read_csv(csv_path)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data <span class=\"op\">=</span> load_titanic_data(<span class=\"st\">&quot;train.csv&quot;</span>)</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>test_data <span class=\"op\">=</span> load_titanic_data(<span class=\"st\">&quot;test.csv&quot;</span>)</span></code></pre></div>\n<p>The data is already split into a training set and a test set. However, the test data does not contain the labels: your goal is to train the best model you can using the training data, then make your predictions on the test data and upload them to Kaggle to see your final score.</p>\n<p>Let‚Äôs take a peek at the top few rows of the training set:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data.head()</span></code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<thead>\n<tr style=\"text-align: right;\">\n<th>\n</th>\n<th>\nPassengerId\n</th>\n<th>\nSurvived\n</th>\n<th>\nPclass\n</th>\n<th>\nName\n</th>\n<th>\nSex\n</th>\n<th>\nAge\n</th>\n<th>\nSibSp\n</th>\n<th>\nParch\n</th>\n<th>\nTicket\n</th>\n<th>\nFare\n</th>\n<th>\nCabin\n</th>\n<th>\nEmbarked\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th>\n0\n</th>\n<td>\n1\n</td>\n<td>\n0\n</td>\n<td>\n3\n</td>\n<td>\nBraund, Mr.¬†Owen Harris\n</td>\n<td>\nmale\n</td>\n<td>\n22.0\n</td>\n<td>\n1\n</td>\n<td>\n0\n</td>\n<td>\nA/5 21171\n</td>\n<td>\n7.2500\n</td>\n<td>\nNaN\n</td>\n<td>\nS\n</td>\n</tr>\n<tr>\n<th>\n1\n</th>\n<td>\n2\n</td>\n<td>\n1\n</td>\n<td>\n1\n</td>\n<td>\nCumings, Mrs.¬†John Bradley (Florence Briggs Th‚Ä¶\n</td>\n<td>\nfemale\n</td>\n<td>\n38.0\n</td>\n<td>\n1\n</td>\n<td>\n0\n</td>\n<td>\nPC 17599\n</td>\n<td>\n71.2833\n</td>\n<td>\nC85\n</td>\n<td>\nC\n</td>\n</tr>\n<tr>\n<th>\n2\n</th>\n<td>\n3\n</td>\n<td>\n1\n</td>\n<td>\n3\n</td>\n<td>\nHeikkinen, Miss. Laina\n</td>\n<td>\nfemale\n</td>\n<td>\n26.0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\nSTON/O2. 3101282\n</td>\n<td>\n7.9250\n</td>\n<td>\nNaN\n</td>\n<td>\nS\n</td>\n</tr>\n<tr>\n<th>\n3\n</th>\n<td>\n4\n</td>\n<td>\n1\n</td>\n<td>\n1\n</td>\n<td>\nFutrelle, Mrs.¬†Jacques Heath (Lily May Peel)\n</td>\n<td>\nfemale\n</td>\n<td>\n35.0\n</td>\n<td>\n1\n</td>\n<td>\n0\n</td>\n<td>\n113803\n</td>\n<td>\n53.1000\n</td>\n<td>\nC123\n</td>\n<td>\nS\n</td>\n</tr>\n<tr>\n<th>\n4\n</th>\n<td>\n5\n</td>\n<td>\n0\n</td>\n<td>\n3\n</td>\n<td>\nAllen, Mr.¬†William Henry\n</td>\n<td>\nmale\n</td>\n<td>\n35.0\n</td>\n<td>\n0\n</td>\n<td>\n0\n</td>\n<td>\n373450\n</td>\n<td>\n8.0500\n</td>\n<td>\nNaN\n</td>\n<td>\nS\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>The attributes have the following meaning:</p>\n<ul>\n<li><strong>Survived</strong>: that‚Äôs the target, 0 means the passenger did not survive, while 1 means he/she survived.</li>\n<li><strong>Pclass</strong>: passenger class.</li>\n<li><strong>Name</strong>, <strong>Sex</strong>, <strong>Age</strong>: self-explanatory</li>\n<li><strong>SibSp</strong>: how many siblings &amp; spouses of the passenger aboard the Titanic.</li>\n<li><strong>Parch</strong>: how many children &amp; parents of the passenger aboard the Titanic.</li>\n<li><strong>Ticket</strong>: ticket id</li>\n<li><strong>Fare</strong>: price paid (in pounds)</li>\n<li><strong>Cabin</strong>: passenger‚Äôs cabin number</li>\n<li><strong>Embarked</strong>: where the passenger embarked the Titanic</li>\n</ul>\n<p>Let‚Äôs get more info to see how much data is missing:</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data.info()</span></code></pre></div>\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB</code></pre>\n<p>Okay, the <strong>Age</strong>, <strong>Cabin</strong> and <strong>Embarked</strong> attributes are sometimes null (less than 891 non-null), especially the <strong>Cabin</strong> (77% are null). We will ignore the <strong>Cabin</strong> for now and focus on the rest. The <strong>Age</strong> attribute has about 19% null values, so we will need to decide what to do with them. Replacing null values with the median age seems reasonable.</p>\n<p>The <strong>Name</strong> and <strong>Ticket</strong> attributes may have some value, but they will be a bit tricky to convert into useful numbers that a model can consume. So for now, we will ignore them.</p>\n<p>Let‚Äôs take a look at the numerical attributes:</p>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data.describe()</span></code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<thead>\n<tr style=\"text-align: right;\">\n<th>\n</th>\n<th>\nPassengerId\n</th>\n<th>\nSurvived\n</th>\n<th>\nPclass\n</th>\n<th>\nAge\n</th>\n<th>\nSibSp\n</th>\n<th>\nParch\n</th>\n<th>\nFare\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th>\ncount\n</th>\n<td>\n891.000000\n</td>\n<td>\n891.000000\n</td>\n<td>\n891.000000\n</td>\n<td>\n714.000000\n</td>\n<td>\n891.000000\n</td>\n<td>\n891.000000\n</td>\n<td>\n891.000000\n</td>\n</tr>\n<tr>\n<th>\nmean\n</th>\n<td>\n446.000000\n</td>\n<td>\n0.383838\n</td>\n<td>\n2.308642\n</td>\n<td>\n29.699118\n</td>\n<td>\n0.523008\n</td>\n<td>\n0.381594\n</td>\n<td>\n32.204208\n</td>\n</tr>\n<tr>\n<th>\nstd\n</th>\n<td>\n257.353842\n</td>\n<td>\n0.486592\n</td>\n<td>\n0.836071\n</td>\n<td>\n14.526497\n</td>\n<td>\n1.102743\n</td>\n<td>\n0.806057\n</td>\n<td>\n49.693429\n</td>\n</tr>\n<tr>\n<th>\nmin\n</th>\n<td>\n1.000000\n</td>\n<td>\n0.000000\n</td>\n<td>\n1.000000\n</td>\n<td>\n0.420000\n</td>\n<td>\n0.000000\n</td>\n<td>\n0.000000\n</td>\n<td>\n0.000000\n</td>\n</tr>\n<tr>\n<th>\n25%\n</th>\n<td>\n223.500000\n</td>\n<td>\n0.000000\n</td>\n<td>\n2.000000\n</td>\n<td>\n20.125000\n</td>\n<td>\n0.000000\n</td>\n<td>\n0.000000\n</td>\n<td>\n7.910400\n</td>\n</tr>\n<tr>\n<th>\n50%\n</th>\n<td>\n446.000000\n</td>\n<td>\n0.000000\n</td>\n<td>\n3.000000\n</td>\n<td>\n28.000000\n</td>\n<td>\n0.000000\n</td>\n<td>\n0.000000\n</td>\n<td>\n14.454200\n</td>\n</tr>\n<tr>\n<th>\n75%\n</th>\n<td>\n668.500000\n</td>\n<td>\n1.000000\n</td>\n<td>\n3.000000\n</td>\n<td>\n38.000000\n</td>\n<td>\n1.000000\n</td>\n<td>\n0.000000\n</td>\n<td>\n31.000000\n</td>\n</tr>\n<tr>\n<th>\nmax\n</th>\n<td>\n891.000000\n</td>\n<td>\n1.000000\n</td>\n<td>\n3.000000\n</td>\n<td>\n80.000000\n</td>\n<td>\n8.000000\n</td>\n<td>\n6.000000\n</td>\n<td>\n512.329200\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>Yikes, only 38% <strong>Survived</strong>. :( That‚Äôs close enough to 40%, so accuracy will be a reasonable metric to evaluate our model.</li>\n<li>The mean <strong>Fare</strong> was ¬£32.20, which does not seem so expensive (but it was probably a lot of money back then).</li>\n<li>The mean <strong>Age</strong> was less than 30 years old.</li>\n</ul>\n<p>Let‚Äôs check that the target is indeed 0 or 1:</p>\n<div class=\"sourceCode\" id=\"cb7\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb7-1\"><a href=\"#cb7-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data[<span class=\"st\">&quot;Survived&quot;</span>].value_counts()</span></code></pre></div>\n<pre><code>0    549\n1    342\nName: Survived, dtype: int64</code></pre>\n<p>Now let‚Äôs take a quick look at all the categorical attributes:</p>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data[<span class=\"st\">&quot;Pclass&quot;</span>].value_counts()</span></code></pre></div>\n<pre><code>3    491\n1    216\n2    184\nName: Pclass, dtype: int64</code></pre>\n<div class=\"sourceCode\" id=\"cb11\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb11-1\"><a href=\"#cb11-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data[<span class=\"st\">&quot;Sex&quot;</span>].value_counts()</span></code></pre></div>\n<pre><code>male      577\nfemale    314\nName: Sex, dtype: int64</code></pre>\n<div class=\"sourceCode\" id=\"cb13\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb13-1\"><a href=\"#cb13-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data[<span class=\"st\">&quot;Embarked&quot;</span>].value_counts()</span></code></pre></div>\n<pre><code>S    644\nC    168\nQ     77\nName: Embarked, dtype: int64</code></pre>\n<p>The <strong>Embarked</strong> attribute tells us where the passenger embarked: C=Cherbourg, Q=Queenstown, S=Southampton.</p>\n<p>Now let‚Äôs build our preprocessing pipelines:</p>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.base <span class=\"im\">import</span> BaseEstimator, TransformerMixin</span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.pipeline <span class=\"im\">import</span> Pipeline</span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.impute <span class=\"im\">import</span> SimpleImputer</span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.compose <span class=\"im\">import</span> ColumnTransformer</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.preprocessing <span class=\"im\">import</span> OneHotEncoder</span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>numeric_features <span class=\"op\">=</span> [<span class=\"st\">&quot;Age&quot;</span>, <span class=\"st\">&quot;SibSp&quot;</span>, <span class=\"st\">&quot;Parch&quot;</span>, <span class=\"st\">&quot;Fare&quot;</span>]</span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>numeric_transformer <span class=\"op\">=</span> Pipeline(</span>\n<span id=\"cb15-9\"><a href=\"#cb15-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    steps<span class=\"op\">=</span>[</span>\n<span id=\"cb15-10\"><a href=\"#cb15-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        (<span class=\"st\">&quot;imputer&quot;</span>, SimpleImputer(strategy<span class=\"op\">=</span><span class=\"st\">&quot;median&quot;</span>)),</span>\n<span id=\"cb15-11\"><a href=\"#cb15-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ]</span>\n<span id=\"cb15-12\"><a href=\"#cb15-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>)</span>\n<span id=\"cb15-13\"><a href=\"#cb15-13\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-14\"><a href=\"#cb15-14\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\"># Inspired from stackoverflow.com/questions/25239958</span></span>\n<span id=\"cb15-15\"><a href=\"#cb15-15\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> MostFrequentImputer(BaseEstimator, TransformerMixin):</span>\n<span id=\"cb15-16\"><a href=\"#cb15-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> fit(<span class=\"va\">self</span>, X, y<span class=\"op\">=</span><span class=\"va\">None</span>):</span>\n<span id=\"cb15-17\"><a href=\"#cb15-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.most_frequent_ <span class=\"op\">=</span> pd.Series([X[c].value_counts().index[<span class=\"dv\">0</span>] <span class=\"cf\">for</span> c <span class=\"kw\">in</span> X],</span>\n<span id=\"cb15-18\"><a href=\"#cb15-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>                                        index<span class=\"op\">=</span>X.columns)</span>\n<span id=\"cb15-19\"><a href=\"#cb15-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span></span>\n<span id=\"cb15-20\"><a href=\"#cb15-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> transform(<span class=\"va\">self</span>, X, y<span class=\"op\">=</span><span class=\"va\">None</span>):</span>\n<span id=\"cb15-21\"><a href=\"#cb15-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> X.fillna(<span class=\"va\">self</span>.most_frequent_)</span>\n<span id=\"cb15-22\"><a href=\"#cb15-22\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-23\"><a href=\"#cb15-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>categorical_features <span class=\"op\">=</span> [<span class=\"st\">&quot;Pclass&quot;</span>, <span class=\"st\">&quot;Sex&quot;</span>, <span class=\"st\">&quot;Embarked&quot;</span>]</span>\n<span id=\"cb15-24\"><a href=\"#cb15-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>categorical_transformer <span class=\"op\">=</span> Pipeline(</span>\n<span id=\"cb15-25\"><a href=\"#cb15-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>    steps<span class=\"op\">=</span>[</span>\n<span id=\"cb15-26\"><a href=\"#cb15-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>        (<span class=\"st\">&quot;imputer&quot;</span>, MostFrequentImputer()),</span>\n<span id=\"cb15-27\"><a href=\"#cb15-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>        (<span class=\"st\">&quot;cat_encoder&quot;</span>, OneHotEncoder(sparse<span class=\"op\">=</span><span class=\"va\">False</span>))</span>\n<span id=\"cb15-28\"><a href=\"#cb15-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ]</span>\n<span id=\"cb15-29\"><a href=\"#cb15-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>)</span>\n<span id=\"cb15-30\"><a href=\"#cb15-30\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-31\"><a href=\"#cb15-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>preprocessor <span class=\"op\">=</span> ColumnTransformer(</span>\n<span id=\"cb15-32\"><a href=\"#cb15-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>    transformers<span class=\"op\">=</span>[</span>\n<span id=\"cb15-33\"><a href=\"#cb15-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>        (<span class=\"st\">&quot;num&quot;</span>, numeric_transformer, numeric_features),</span>\n<span id=\"cb15-34\"><a href=\"#cb15-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>        (<span class=\"st\">&quot;cat&quot;</span>, categorical_transformer, categorical_features),</span>\n<span id=\"cb15-35\"><a href=\"#cb15-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>    ]</span>\n<span id=\"cb15-36\"><a href=\"#cb15-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train <span class=\"op\">=</span> preprocessor.fit_transform(train_data)</span>\n<span id=\"cb16-2\"><a href=\"#cb16-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train</span></code></pre></div>\n<pre><code>array([[22.,  1.,  0., ...,  0.,  0.,  1.],\n       [38.,  1.,  0., ...,  1.,  0.,  0.],\n       [26.,  0.,  0., ...,  0.,  0.,  1.],\n       ...,\n       [28.,  1.,  2., ...,  0.,  0.,  1.],\n       [26.,  0.,  0., ...,  1.,  0.,  0.],\n       [32.,  0.,  0., ...,  0.,  1.,  0.]])</code></pre>\n<p>Cool! Now we have a nice preprocessing pipeline that takes the raw data and outputs numerical input features that we can feed to any Machine Learning model we want.</p>\n<p>Now the labels:</p>\n<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb18-1\"><a href=\"#cb18-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_train <span class=\"op\">=</span> train_data[<span class=\"st\">&quot;Survived&quot;</span>]</span></code></pre></div>\n<p>We are now ready to train a classifier. Let‚Äôs start with an <code>SVC</code>:</p>\n<div class=\"sourceCode\" id=\"cb19\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb19-1\"><a href=\"#cb19-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.svm <span class=\"im\">import</span> SVC</span>\n<span id=\"cb19-2\"><a href=\"#cb19-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb19-3\"><a href=\"#cb19-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>svm_clf <span class=\"op\">=</span> SVC(gamma<span class=\"op\">=</span><span class=\"st\">&quot;auto&quot;</span>)</span>\n<span id=\"cb19-4\"><a href=\"#cb19-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>svm_clf.fit(X_train, y_train)</span></code></pre></div>\n<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"‚ñ∏\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"‚ñæ\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style>\n<div id=\"sk-container-id-2\" class=\"sk-top-container\">\n<div class=\"sk-text-repr-fallback\">\n<pre>SVC(gamma=&#x27;auto&#x27;)</pre>\n<b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b>\n</div>\n<div class=\"sk-container\" hidden=\"\">\n<div class=\"sk-item\">\n<div class=\"sk-estimator sk-toggleable\">\n<input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label>\n<div class=\"sk-toggleable__content\">\n<pre>SVC(gamma=&#x27;auto&#x27;)</pre>\n</div>\n</div>\n</div>\n</div>\n</div>\n<p>Great, our model is trained, let‚Äôs use it to make predictions on the test set:</p>\n<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb20-1\"><a href=\"#cb20-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_test <span class=\"op\">=</span> preprocessor.transform(test_data)</span>\n<span id=\"cb20-2\"><a href=\"#cb20-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_pred <span class=\"op\">=</span> svm_clf.predict(X_test)</span></code></pre></div>\n<p>And now we could just build a CSV file with these predictions (respecting the format accepted by Kaggle), then upload it and hope for the best. But first, let‚Äôs use cross-validation to have an idea of how good our model is.</p>\n<div class=\"sourceCode\" id=\"cb21\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb21-1\"><a href=\"#cb21-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.model_selection <span class=\"im\">import</span> cross_val_score</span>\n<span id=\"cb21-2\"><a href=\"#cb21-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb21-3\"><a href=\"#cb21-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>svm_scores <span class=\"op\">=</span> cross_val_score(svm_clf, X_train, y_train, cv<span class=\"op\">=</span><span class=\"dv\">10</span>)</span>\n<span id=\"cb21-4\"><a href=\"#cb21-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>svm_scores.mean()</span></code></pre></div>\n<pre><code>0.7329588014981274</code></pre>\n<p>Ok, over 73% accuracy, which is clearly better than random chance, but it‚Äôs not a great score. Let‚Äôs try to get at least 80% accuracy.</p>\n<p>Let‚Äôs try a <code>RandomForestClassifier</code>:</p>\n<div class=\"sourceCode\" id=\"cb23\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb23-1\"><a href=\"#cb23-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.ensemble <span class=\"im\">import</span> RandomForestClassifier</span>\n<span id=\"cb23-2\"><a href=\"#cb23-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb23-3\"><a href=\"#cb23-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>forest_clf <span class=\"op\">=</span> RandomForestClassifier(n_estimators<span class=\"op\">=</span><span class=\"dv\">100</span>, random_state<span class=\"op\">=</span><span class=\"dv\">42</span>)</span>\n<span id=\"cb23-4\"><a href=\"#cb23-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>forest_scores <span class=\"op\">=</span> cross_val_score(forest_clf, X_train, y_train, cv<span class=\"op\">=</span><span class=\"dv\">10</span>)</span>\n<span id=\"cb23-5\"><a href=\"#cb23-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>forest_scores.mean()</span></code></pre></div>\n<pre><code>0.8126466916354558</code></pre>\n<p>That‚Äôs much better!</p>\n<p>Instead of just looking at the mean accuracy across the 10 cross-validation folds, let‚Äôs plot all 10 scores for each model, along with a box plot highlighting the lower and upper quartiles, and ‚Äúwhiskers‚Äù showing the extent of the scores.</p>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb25-1\"><a href=\"#cb25-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb25-2\"><a href=\"#cb25-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb25-3\"><a href=\"#cb25-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.figure(figsize<span class=\"op\">=</span>(<span class=\"dv\">8</span>, <span class=\"dv\">4</span>))</span>\n<span id=\"cb25-4\"><a href=\"#cb25-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([<span class=\"dv\">1</span>]<span class=\"op\">*</span><span class=\"dv\">10</span>, svm_scores, <span class=\"st\">&quot;.&quot;</span>)</span>\n<span id=\"cb25-5\"><a href=\"#cb25-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.plot([<span class=\"dv\">2</span>]<span class=\"op\">*</span><span class=\"dv\">10</span>, forest_scores, <span class=\"st\">&quot;.&quot;</span>)</span>\n<span id=\"cb25-6\"><a href=\"#cb25-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.boxplot([svm_scores, forest_scores], labels<span class=\"op\">=</span>(<span class=\"st\">&quot;SVM&quot;</span>,<span class=\"st\">&quot;Random Forest&quot;</span>))</span>\n<span id=\"cb25-7\"><a href=\"#cb25-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.ylabel(<span class=\"st\">&quot;Accuracy&quot;</span>, fontsize<span class=\"op\">=</span><span class=\"dv\">14</span>)</span>\n<span id=\"cb25-8\"><a href=\"#cb25-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>plt.show()</span></code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/titanic_dataset/titanic_dataset_31_0.png\" /></p>\n<p>To improve this result further, you could:</p>\n<ul>\n<li>Compare many more models and tune hyperparameters using cross validation and grid search,</li>\n<li>Do more feature engineering, for example:\n<ul>\n<li>replace <strong>SibSp</strong> and <strong>Parch</strong> with their sum,</li>\n<li>try to identify parts of names that correlate well with the <strong>Survived</strong> attribute (e.g.¬†if the name contains ‚ÄúCountess‚Äù, then survival seems more likely),</li>\n</ul></li>\n<li>try to convert numerical attributes to categorical attributes: for example, different age groups had very different survival rates (see below), so it may help to create an age bucket category and use it instead of the age. Similarly, it may be useful to have a special category for people traveling alone since only 30% of them survived (see below).</li>\n</ul>\n<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb26-1\"><a href=\"#cb26-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data[<span class=\"st\">&quot;AgeBucket&quot;</span>] <span class=\"op\">=</span> train_data[<span class=\"st\">&quot;Age&quot;</span>] <span class=\"op\">//</span> <span class=\"dv\">15</span> <span class=\"op\">*</span> <span class=\"dv\">15</span></span>\n<span id=\"cb26-2\"><a href=\"#cb26-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data[[<span class=\"st\">&quot;AgeBucket&quot;</span>, <span class=\"st\">&quot;Survived&quot;</span>]].groupby([<span class=\"st\">&#39;AgeBucket&#39;</span>]).mean()</span></code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<thead>\n<tr style=\"text-align: right;\">\n<th>\n</th>\n<th>\nSurvived\n</th>\n</tr>\n<tr>\n<th>\nAgeBucket\n</th>\n<th>\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th>\n0.0\n</th>\n<td>\n0.576923\n</td>\n</tr>\n<tr>\n<th>\n15.0\n</th>\n<td>\n0.362745\n</td>\n</tr>\n<tr>\n<th>\n30.0\n</th>\n<td>\n0.423256\n</td>\n</tr>\n<tr>\n<th>\n45.0\n</th>\n<td>\n0.404494\n</td>\n</tr>\n<tr>\n<th>\n60.0\n</th>\n<td>\n0.240000\n</td>\n</tr>\n<tr>\n<th>\n75.0\n</th>\n<td>\n1.000000\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"sourceCode\" id=\"cb27\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb27-1\"><a href=\"#cb27-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data[<span class=\"st\">&quot;RelativesOnboard&quot;</span>] <span class=\"op\">=</span> train_data[<span class=\"st\">&quot;SibSp&quot;</span>] <span class=\"op\">+</span> train_data[<span class=\"st\">&quot;Parch&quot;</span>]</span>\n<span id=\"cb27-2\"><a href=\"#cb27-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>train_data[[<span class=\"st\">&quot;RelativesOnboard&quot;</span>, <span class=\"st\">&quot;Survived&quot;</span>]].groupby([<span class=\"st\">&#39;RelativesOnboard&#39;</span>]).mean()</span></code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n<thead>\n<tr style=\"text-align: right;\">\n<th>\n</th>\n<th>\nSurvived\n</th>\n</tr>\n<tr>\n<th>\nRelativesOnboard\n</th>\n<th>\n</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<th>\n0\n</th>\n<td>\n0.303538\n</td>\n</tr>\n<tr>\n<th>\n1\n</th>\n<td>\n0.552795\n</td>\n</tr>\n<tr>\n<th>\n2\n</th>\n<td>\n0.578431\n</td>\n</tr>\n<tr>\n<th>\n3\n</th>\n<td>\n0.724138\n</td>\n</tr>\n<tr>\n<th>\n4\n</th>\n<td>\n0.200000\n</td>\n</tr>\n<tr>\n<th>\n5\n</th>\n<td>\n0.136364\n</td>\n</tr>\n<tr>\n<th>\n6\n</th>\n<td>\n0.333333\n</td>\n</tr>\n<tr>\n<th>\n7\n</th>\n<td>\n0.000000\n</td>\n</tr>\n<tr>\n<th>\n10\n</th>\n<td>\n0.000000\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n"
  },
  {
    "_id": "spam_classifier",
    "_body": "<h1 id=\"spam-classifier\">Spam Classifier</h1>\n<p>The goal is to build a spam classifier. We will need to:</p>\n<ul>\n<li>Download examples of spam and ham from Apache SpamAssassin‚Äôs public datasets.</li>\n<li>Unzip the datasets and familiarize yourself with the data format.</li>\n<li>Split the datasets into a training set and a test set.</li>\n<li>Write a data preparation pipeline to convert each email into a feature vector. Your preparation pipeline should transform an email into a (sparse) vector that indicates the presence or absence of each possible word. For example, if all emails only ever contain four words, ‚ÄúHello‚Äù, ‚Äúhow‚Äù, ‚Äúare‚Äù, ‚Äúyou‚Äù, then the email ‚ÄúHello you Hello Hello you‚Äù would be converted into a vector [1, 0, 0, 1], or [3, 0, 0, 2] if you prefer to count the number of occurrences of each word.</li>\n</ul>\n<p>You may want to add hyperparameters to your preparation pipeline to control whether or not to strip off email headers, convert each email to lowercase, remove punctuation, replace all URLs with ‚ÄúURL‚Äù, replace all numbers with ‚ÄúNUMBER‚Äù, or even perform <em>stemming</em> (i.e., trim off word endings, there are Python libraries available to do this).</p>\n<p>Finally, try out several classifiers and see if you can build a great spam classifier, with both high recall and high precision.</p>\n<p>First, let‚Äôs fetch the data:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> os</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> tarfile</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> urllib.request</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>DOWNLOAD_ROOT <span class=\"op\">=</span> <span class=\"st\">&quot;http://spamassassin.apache.org/old/publiccorpus/&quot;</span></span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>HAM_URL <span class=\"op\">=</span> DOWNLOAD_ROOT <span class=\"op\">+</span> <span class=\"st\">&quot;20030228_easy_ham.tar.bz2&quot;</span></span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>SPAM_URL <span class=\"op\">=</span> DOWNLOAD_ROOT <span class=\"op\">+</span> <span class=\"st\">&quot;20030228_spam.tar.bz2&quot;</span></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>SPAM_PATH <span class=\"op\">=</span> os.path.join(<span class=\"st\">&quot;datasets&quot;</span>, <span class=\"st\">&quot;spam&quot;</span>)</span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> fetch_spam_data(ham_url<span class=\"op\">=</span>HAM_URL, spam_url<span class=\"op\">=</span>SPAM_URL, spam_path<span class=\"op\">=</span>SPAM_PATH):</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"kw\">not</span> os.path.isdir(spam_path):</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        os.makedirs(spam_path)</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> filename, url <span class=\"kw\">in</span> ((<span class=\"st\">&quot;ham.tar.bz2&quot;</span>, ham_url), (<span class=\"st\">&quot;spam.tar.bz2&quot;</span>, spam_url)):</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>        path <span class=\"op\">=</span> os.path.join(spam_path, filename)</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"kw\">not</span> os.path.isfile(path):</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>            urllib.request.urlretrieve(url, path)</span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        tar_bz2_file <span class=\"op\">=</span> tarfile.<span class=\"bu\">open</span>(path)</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        tar_bz2_file.extractall(path<span class=\"op\">=</span>spam_path)</span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>        tar_bz2_file.close()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>fetch_spam_data()</span></code></pre></div>\n<p>Next, let‚Äôs load all the emails:</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>HAM_DIR <span class=\"op\">=</span> os.path.join(SPAM_PATH, <span class=\"st\">&quot;easy_ham&quot;</span>)</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>SPAM_DIR <span class=\"op\">=</span> os.path.join(SPAM_PATH, <span class=\"st\">&quot;spam&quot;</span>)</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>ham_filenames <span class=\"op\">=</span> [name <span class=\"cf\">for</span> name <span class=\"kw\">in</span> <span class=\"bu\">sorted</span>(os.listdir(HAM_DIR)) <span class=\"cf\">if</span> <span class=\"bu\">len</span>(name) <span class=\"op\">&gt;</span> <span class=\"dv\">20</span>]</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>spam_filenames <span class=\"op\">=</span> [name <span class=\"cf\">for</span> name <span class=\"kw\">in</span> <span class=\"bu\">sorted</span>(os.listdir(SPAM_DIR)) <span class=\"cf\">if</span> <span class=\"bu\">len</span>(name) <span class=\"op\">&gt;</span> <span class=\"dv\">20</span>]</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">len</span>(ham_filenames)</span></code></pre></div>\n<pre><code>2500</code></pre>\n<div class=\"sourceCode\" id=\"cb6\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">len</span>(spam_filenames)</span></code></pre></div>\n<pre><code>500</code></pre>\n<p>We can use Python‚Äôs <code>email</code> module to parse these emails (this handles headers, encoding, etc.)</p>\n<div class=\"sourceCode\" id=\"cb8\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb8-1\"><a href=\"#cb8-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> email</span>\n<span id=\"cb8-2\"><a href=\"#cb8-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> email.policy</span>\n<span id=\"cb8-3\"><a href=\"#cb8-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb8-4\"><a href=\"#cb8-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> load_email(is_spam, filename, spam_path<span class=\"op\">=</span>SPAM_PATH):</span>\n<span id=\"cb8-5\"><a href=\"#cb8-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    directory <span class=\"op\">=</span> <span class=\"st\">&quot;spam&quot;</span> <span class=\"cf\">if</span> is_spam <span class=\"cf\">else</span> <span class=\"st\">&quot;easy_ham&quot;</span></span>\n<span id=\"cb8-6\"><a href=\"#cb8-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">with</span> <span class=\"bu\">open</span>(os.path.join(spam_path, directory, filename), <span class=\"st\">&quot;rb&quot;</span>) <span class=\"im\">as</span> f:</span>\n<span id=\"cb8-7\"><a href=\"#cb8-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> email.parser.BytesParser(policy<span class=\"op\">=</span>email.policy.default).parse(f)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb9\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb9-1\"><a href=\"#cb9-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>ham_emails <span class=\"op\">=</span> [load_email(is_spam<span class=\"op\">=</span><span class=\"va\">False</span>, filename<span class=\"op\">=</span>name) <span class=\"cf\">for</span> name <span class=\"kw\">in</span> ham_filenames]</span>\n<span id=\"cb9-2\"><a href=\"#cb9-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>spam_emails <span class=\"op\">=</span> [load_email(is_spam<span class=\"op\">=</span><span class=\"va\">True</span>, filename<span class=\"op\">=</span>name) <span class=\"cf\">for</span> name <span class=\"kw\">in</span> spam_filenames]</span></code></pre></div>\n<p>Let‚Äôs look at one example of ham and one example of spam, to get a feel of what the data looks like:</p>\n<div class=\"sourceCode\" id=\"cb10\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb10-1\"><a href=\"#cb10-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(ham_emails[<span class=\"dv\">1</span>].get_content().strip())</span></code></pre></div>\n<pre><code>Martin A posted:\nTassos Papadopoulos, the Greek sculptor behind the plan, judged that the\n limestone of Mount Kerdylio, 70 miles east of Salonika and not far from the\n Mount Athos monastic community, was ideal for the patriotic sculpture. \n \n As well as Alexander&#39;s granite features, 240 ft high and 170 ft wide, a\n museum, a restored amphitheatre and car park for admiring crowds are\nplanned\n---------------------\nSo is this mountain limestone or granite?\nIf it&#39;s limestone, it&#39;ll weather pretty fast.\n\n------------------------ Yahoo! Groups Sponsor ---------------------~--&gt;\n4 DVDs Free +s&amp;p Join Now\nhttp://us.click.yahoo.com/pt6YBB/NXiEAA/mG3HAA/7gSolB/TM\n---------------------------------------------------------------------~-&gt;\n\nTo unsubscribe from this group, send an email to:\nforteana-unsubscribe@egroups.com\n\n \n\nYour use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/</code></pre>\n<div class=\"sourceCode\" id=\"cb12\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb12-1\"><a href=\"#cb12-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(spam_emails[<span class=\"dv\">6</span>].get_content().strip())</span></code></pre></div>\n<pre><code>Help wanted.  We are a 14 year old fortune 500 company, that is\ngrowing at a tremendous rate.  We are looking for individuals who\nwant to work from home.\n\nThis is an opportunity to make an excellent income.  No experience\nis required.  We will train you.\n\nSo if you are looking to be employed from home with a career that has\nvast opportunities, then go:\n\nhttp://www.basetel.com/wealthnow\n\nWe are looking for energetic and self motivated people.  If that is you\nthan click on the link and fill out the form, and one of our\nemployement specialist will contact you.\n\nTo be removed from our link simple go to:\n\nhttp://www.basetel.com/remove.html\n\n\n4139vOLW7-758DoDY1425FRhM1-764SMFc8513fCsLl40</code></pre>\n<p>Some emails are actually multipart, with images and attachments (which can have their own attachments). Let‚Äôs look at the various types of structures we have:</p>\n<div class=\"sourceCode\" id=\"cb14\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb14-1\"><a href=\"#cb14-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> get_email_structure(email):</span>\n<span id=\"cb14-2\"><a href=\"#cb14-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"bu\">isinstance</span>(email, <span class=\"bu\">str</span>):</span>\n<span id=\"cb14-3\"><a href=\"#cb14-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> email</span>\n<span id=\"cb14-4\"><a href=\"#cb14-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    payload <span class=\"op\">=</span> email.get_payload()</span>\n<span id=\"cb14-5\"><a href=\"#cb14-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> <span class=\"bu\">isinstance</span>(payload, <span class=\"bu\">list</span>):</span>\n<span id=\"cb14-6\"><a href=\"#cb14-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"st\">&quot;multipart(</span><span class=\"sc\">{}</span><span class=\"st\">)&quot;</span>.<span class=\"bu\">format</span>(<span class=\"st\">&quot;, &quot;</span>.join([</span>\n<span id=\"cb14-7\"><a href=\"#cb14-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>            get_email_structure(sub_email)</span>\n<span id=\"cb14-8\"><a href=\"#cb14-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">for</span> sub_email <span class=\"kw\">in</span> payload</span>\n<span id=\"cb14-9\"><a href=\"#cb14-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ]))</span>\n<span id=\"cb14-10\"><a href=\"#cb14-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">else</span>:</span>\n<span id=\"cb14-11\"><a href=\"#cb14-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> email.get_content_type()</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb15\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb15-1\"><a href=\"#cb15-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> collections <span class=\"im\">import</span> Counter</span>\n<span id=\"cb15-2\"><a href=\"#cb15-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb15-3\"><a href=\"#cb15-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> structures_counter(emails):</span>\n<span id=\"cb15-4\"><a href=\"#cb15-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    structures <span class=\"op\">=</span> Counter()</span>\n<span id=\"cb15-5\"><a href=\"#cb15-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> email <span class=\"kw\">in</span> emails:</span>\n<span id=\"cb15-6\"><a href=\"#cb15-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        structure <span class=\"op\">=</span> get_email_structure(email)</span>\n<span id=\"cb15-7\"><a href=\"#cb15-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        structures[structure] <span class=\"op\">+=</span> <span class=\"dv\">1</span></span>\n<span id=\"cb15-8\"><a href=\"#cb15-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> structures</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb16\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb16-1\"><a href=\"#cb16-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>structures_counter(ham_emails).most_common()</span></code></pre></div>\n<pre><code>[(&#39;text/plain&#39;, 2408),\n (&#39;multipart(text/plain, application/pgp-signature)&#39;, 66),\n (&#39;multipart(text/plain, text/html)&#39;, 8),\n (&#39;multipart(text/plain, text/plain)&#39;, 4),\n (&#39;multipart(text/plain)&#39;, 3),\n (&#39;multipart(text/plain, application/octet-stream)&#39;, 2),\n (&#39;multipart(text/plain, text/enriched)&#39;, 1),\n (&#39;multipart(text/plain, application/ms-tnef, text/plain)&#39;, 1),\n (&#39;multipart(multipart(text/plain, text/plain, text/plain), application/pgp-signature)&#39;,\n  1),\n (&#39;multipart(text/plain, video/mng)&#39;, 1),\n (&#39;multipart(text/plain, multipart(text/plain))&#39;, 1),\n (&#39;multipart(text/plain, application/x-pkcs7-signature)&#39;, 1),\n (&#39;multipart(text/plain, multipart(text/plain, text/plain), text/rfc822-headers)&#39;,\n  1),\n (&#39;multipart(text/plain, multipart(text/plain, text/plain), multipart(multipart(text/plain, application/x-pkcs7-signature)))&#39;,\n  1),\n (&#39;multipart(text/plain, application/x-java-applet)&#39;, 1)]</code></pre>\n<div class=\"sourceCode\" id=\"cb18\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb18-1\"><a href=\"#cb18-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>structures_counter(spam_emails).most_common()</span></code></pre></div>\n<pre><code>[(&#39;text/plain&#39;, 218),\n (&#39;text/html&#39;, 183),\n (&#39;multipart(text/plain, text/html)&#39;, 45),\n (&#39;multipart(text/html)&#39;, 20),\n (&#39;multipart(text/plain)&#39;, 19),\n (&#39;multipart(multipart(text/html))&#39;, 5),\n (&#39;multipart(text/plain, image/jpeg)&#39;, 3),\n (&#39;multipart(text/html, application/octet-stream)&#39;, 2),\n (&#39;multipart(text/plain, application/octet-stream)&#39;, 1),\n (&#39;multipart(text/html, text/plain)&#39;, 1),\n (&#39;multipart(multipart(text/html), application/octet-stream, image/jpeg)&#39;, 1),\n (&#39;multipart(multipart(text/plain, text/html), image/gif)&#39;, 1),\n (&#39;multipart/alternative&#39;, 1)]</code></pre>\n<p>It seems that the ham emails are more often plain text, while spam has quite a lot of HTML. Moreover, quite a few ham emails are signed using PGP, while no spam is. In short, it seems that the email structure is useful information to have.</p>\n<p>Now let‚Äôs take a look at the email headers:</p>\n<div class=\"sourceCode\" id=\"cb20\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb20-1\"><a href=\"#cb20-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">for</span> header, value <span class=\"kw\">in</span> spam_emails[<span class=\"dv\">0</span>].items():</span>\n<span id=\"cb20-2\"><a href=\"#cb20-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(header,<span class=\"st\">&quot;:&quot;</span>,value)</span></code></pre></div>\n<pre><code>Return-Path : &lt;12a1mailbot1@web.de&gt;\nDelivered-To : zzzz@localhost.spamassassin.taint.org\nReceived : from localhost (localhost [127.0.0.1])   by phobos.labs.spamassassin.taint.org (Postfix) with ESMTP id 136B943C32    for &lt;zzzz@localhost&gt;; Thu, 22 Aug 2002 08:17:21 -0400 (EDT)\nReceived : from mail.webnote.net [193.120.211.219]  by localhost with POP3 (fetchmail-5.9.0)    for zzzz@localhost (single-drop); Thu, 22 Aug 2002 13:17:21 +0100 (IST)\nReceived : from dd_it7 ([210.97.77.167])    by webnote.net (8.9.3/8.9.3) with ESMTP id NAA04623 for &lt;zzzz@spamassassin.taint.org&gt;; Thu, 22 Aug 2002 13:09:41 +0100\nFrom : 12a1mailbot1@web.de\nReceived : from r-smtp.korea.com - 203.122.2.197 by dd_it7  with Microsoft SMTPSVC(5.5.1775.675.6);  Sat, 24 Aug 2002 09:42:10 +0900\nTo : dcek1a1@netsgo.com\nSubject : Life Insurance - Why Pay More?\nDate : Wed, 21 Aug 2002 20:31:57 -1600\nMIME-Version : 1.0\nMessage-ID : &lt;0103c1042001882DD_IT7@dd_it7&gt;\nContent-Type : text/html; charset=&quot;iso-8859-1&quot;\nContent-Transfer-Encoding : quoted-printable</code></pre>\n<p>There‚Äôs probably a lot of useful information in there, such as the sender‚Äôs email address (12a1mailbot1@web.de looks fishy), but we will just focus on the Subject header:</p>\n<div class=\"sourceCode\" id=\"cb22\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb22-1\"><a href=\"#cb22-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>spam_emails[<span class=\"dv\">0</span>][<span class=\"st\">&quot;Subject&quot;</span>]</span></code></pre></div>\n<pre><code>&#39;Life Insurance - Why Pay More?&#39;</code></pre>\n<p>Okay, before we learn too much about the data, let‚Äôs not forget to split it into a training set and a test set:</p>\n<div class=\"sourceCode\" id=\"cb24\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb24-1\"><a href=\"#cb24-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> numpy <span class=\"im\">as</span> np</span>\n<span id=\"cb24-2\"><a href=\"#cb24-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.model_selection <span class=\"im\">import</span> train_test_split</span>\n<span id=\"cb24-3\"><a href=\"#cb24-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb24-4\"><a href=\"#cb24-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>X <span class=\"op\">=</span> np.array(ham_emails <span class=\"op\">+</span> spam_emails, dtype<span class=\"op\">=</span><span class=\"bu\">object</span>)</span>\n<span id=\"cb24-5\"><a href=\"#cb24-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>y <span class=\"op\">=</span> np.array([<span class=\"dv\">0</span>] <span class=\"op\">*</span> <span class=\"bu\">len</span>(ham_emails) <span class=\"op\">+</span> [<span class=\"dv\">1</span>] <span class=\"op\">*</span> <span class=\"bu\">len</span>(spam_emails))</span>\n<span id=\"cb24-6\"><a href=\"#cb24-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb24-7\"><a href=\"#cb24-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train, X_test, y_train, y_test <span class=\"op\">=</span> train_test_split(X, y, test_size<span class=\"op\">=</span><span class=\"fl\">0.2</span>, random_state<span class=\"op\">=</span><span class=\"dv\">42</span>)</span></code></pre></div>\n<p>Now, let‚Äôs start writing the preprocessing functions. First, we will need a function to convert HTML to plain text. We could use the BeautifulSoup library, but let‚Äôs just hack a solution using regular expressions. The following function first drops the <code>&lt;head&gt;</code> section, then converts all <code>&lt;a&gt;</code> tags to the word HYPERLINK, then it gets rid of all HTML tags, leaving only the plain text. For readability, it also replaces multiple newlines with single newlines, and finally it unescapes html entities (such as <code>&amp;gt;</code> or <code>&amp;nbsp;</code>):</p>\n<div class=\"sourceCode\" id=\"cb25\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb25-1\"><a href=\"#cb25-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">import</span> re</span>\n<span id=\"cb25-2\"><a href=\"#cb25-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> html <span class=\"im\">import</span> unescape</span>\n<span id=\"cb25-3\"><a href=\"#cb25-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb25-4\"><a href=\"#cb25-4\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> html_to_plain_text(html):</span>\n<span id=\"cb25-5\"><a href=\"#cb25-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    text <span class=\"op\">=</span> re.sub(<span class=\"st\">&#39;&lt;head.*?&gt;.*?&lt;/head&gt;&#39;</span>, <span class=\"st\">&#39;&#39;</span>, html, flags<span class=\"op\">=</span>re.M <span class=\"op\">|</span> re.S <span class=\"op\">|</span> re.I)</span>\n<span id=\"cb25-6\"><a href=\"#cb25-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    text <span class=\"op\">=</span> re.sub(<span class=\"st\">&#39;&lt;a\\s.*?&gt;&#39;</span>, <span class=\"st\">&#39; HYPERLINK &#39;</span>, text, flags<span class=\"op\">=</span>re.M <span class=\"op\">|</span> re.S <span class=\"op\">|</span> re.I)</span>\n<span id=\"cb25-7\"><a href=\"#cb25-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    text <span class=\"op\">=</span> re.sub(<span class=\"st\">&#39;&lt;.*?&gt;&#39;</span>, <span class=\"st\">&#39;&#39;</span>, text, flags<span class=\"op\">=</span>re.M <span class=\"op\">|</span> re.S)</span>\n<span id=\"cb25-8\"><a href=\"#cb25-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    text <span class=\"op\">=</span> re.sub(<span class=\"vs\">r&#39;(\\s*\\n)+&#39;</span>, <span class=\"st\">&#39;</span><span class=\"ch\">\\n</span><span class=\"st\">&#39;</span>, text, flags<span class=\"op\">=</span>re.M <span class=\"op\">|</span> re.S)</span>\n<span id=\"cb25-9\"><a href=\"#cb25-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">return</span> unescape(text)</span></code></pre></div>\n<p>Let‚Äôs see if it works. This is HTML spam:</p>\n<div class=\"sourceCode\" id=\"cb26\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb26-1\"><a href=\"#cb26-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>html_spam_emails <span class=\"op\">=</span> [email <span class=\"cf\">for</span> email <span class=\"kw\">in</span> X_train[y_train<span class=\"op\">==</span><span class=\"dv\">1</span>] <span class=\"cf\">if</span> get_email_structure(email) <span class=\"op\">==</span> <span class=\"st\">&quot;text/html&quot;</span>]</span>\n<span id=\"cb26-2\"><a href=\"#cb26-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>sample_html_spam <span class=\"op\">=</span> html_spam_emails[<span class=\"dv\">7</span>]</span>\n<span id=\"cb26-3\"><a href=\"#cb26-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(sample_html_spam.get_content().strip()[:<span class=\"dv\">1000</span>], <span class=\"st\">&quot;...&quot;</span>)</span></code></pre></div>\n<pre><code>&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;&lt;/TITLE&gt;&lt;META http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=windows-1252&quot;&gt;&lt;STYLE&gt;A:link {TEX-DECORATION: none}A:active {TEXT-DECORATION: none}A:visited {TEXT-DECORATION: none}A:hover {COLOR: #0033ff; TEXT-DECORATION: underline}&lt;/STYLE&gt;&lt;META content=&quot;MSHTML 6.00.2713.1100&quot; name=&quot;GENERATOR&quot;&gt;&lt;/HEAD&gt;\n&lt;BODY text=&quot;#000000&quot; vLink=&quot;#0033ff&quot; link=&quot;#0033ff&quot; bgColor=&quot;#CCCC99&quot;&gt;&lt;TABLE borderColor=&quot;#660000&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;0&quot; border=&quot;0&quot; width=&quot;100%&quot;&gt;&lt;TR&gt;&lt;TD bgColor=&quot;#CCCC99&quot; valign=&quot;top&quot; colspan=&quot;2&quot; height=&quot;27&quot;&gt;\n&lt;font size=&quot;6&quot; face=&quot;Arial, Helvetica, sans-serif&quot; color=&quot;#660000&quot;&gt;\n&lt;b&gt;OTC&lt;/b&gt;&lt;/font&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD height=&quot;2&quot; bgcolor=&quot;#6a694f&quot;&gt;\n&lt;font size=&quot;5&quot; face=&quot;Times New Roman, Times, serif&quot; color=&quot;#FFFFFF&quot;&gt;\n&lt;b&gt;&amp;nbsp;Newsletter&lt;/b&gt;&lt;/font&gt;&lt;/TD&gt;&lt;TD height=&quot;2&quot; bgcolor=&quot;#6a694f&quot;&gt;&lt;div align=&quot;right&quot;&gt;&lt;font color=&quot;#FFFFFF&quot;&gt;\n&lt;b&gt;Discover Tomorrow&#39;s Winners&amp;nbsp;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD height=&quot;25&quot; colspan=&quot;2&quot; bgcolor=&quot;#CCCC99&quot;&gt;&lt;table width=&quot;100%&quot; border=&quot;0&quot;  ...</code></pre>\n<p>And this is the resulting plain text:</p>\n<div class=\"sourceCode\" id=\"cb28\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb28-1\"><a href=\"#cb28-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(html_to_plain_text(sample_html_spam.get_content())[:<span class=\"dv\">1000</span>], <span class=\"st\">&quot;...&quot;</span>)</span></code></pre></div>\n<pre><code>OTC\n¬†Newsletter\nDiscover Tomorrow&#39;s Winners¬†\nFor Immediate Release\nCal-Bay (Stock Symbol: CBYI)\nWatch for analyst &quot;Strong Buy Recommendations&quot; and several advisory newsletters picking CBYI.  CBYI has filed to be traded on the OTCBB, share prices historically INCREASE when companies get listed on this larger trading exchange. CBYI is trading around 25 cents and should skyrocket to $2.66 - $3.25 a share in the near future.\nPut CBYI on your watch list, acquire a position TODAY.\nREASONS TO INVEST IN CBYI\nA profitable company and is on track to beat ALL earnings estimates!\nOne of the FASTEST growing distributors in environmental &amp; safety equipment instruments.\nExcellent management team, several EXCLUSIVE contracts.  IMPRESSIVE client list including the U.S. Air Force, Anheuser-Busch, Chevron Refining and Mitsubishi Heavy Industries, GE-Energy &amp; Environmental Research.\nRAPIDLY GROWING INDUSTRY\nIndustry revenues exceed $900 million, estimates indicate that there could be as much as $25 billi ...</code></pre>\n<p>Great! Now let‚Äôs write a function that takes an email as input and returns its content as plain text, whatever its format is:</p>\n<div class=\"sourceCode\" id=\"cb30\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb30-1\"><a href=\"#cb30-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> email_to_text(email):</span>\n<span id=\"cb30-2\"><a href=\"#cb30-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    html <span class=\"op\">=</span> <span class=\"va\">None</span></span>\n<span id=\"cb30-3\"><a href=\"#cb30-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> part <span class=\"kw\">in</span> email.walk():</span>\n<span id=\"cb30-4\"><a href=\"#cb30-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        ctype <span class=\"op\">=</span> part.get_content_type()</span>\n<span id=\"cb30-5\"><a href=\"#cb30-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> <span class=\"kw\">not</span> ctype <span class=\"kw\">in</span> (<span class=\"st\">&quot;text/plain&quot;</span>, <span class=\"st\">&quot;text/html&quot;</span>):</span>\n<span id=\"cb30-6\"><a href=\"#cb30-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">continue</span></span>\n<span id=\"cb30-7\"><a href=\"#cb30-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">try</span>:</span>\n<span id=\"cb30-8\"><a href=\"#cb30-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>            content <span class=\"op\">=</span> part.get_content()</span>\n<span id=\"cb30-9\"><a href=\"#cb30-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">except</span>: <span class=\"co\"># in case of encoding issues</span></span>\n<span id=\"cb30-10\"><a href=\"#cb30-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>            content <span class=\"op\">=</span> <span class=\"bu\">str</span>(part.get_payload())</span>\n<span id=\"cb30-11\"><a href=\"#cb30-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">if</span> ctype <span class=\"op\">==</span> <span class=\"st\">&quot;text/plain&quot;</span>:</span>\n<span id=\"cb30-12\"><a href=\"#cb30-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">return</span> content</span>\n<span id=\"cb30-13\"><a href=\"#cb30-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">else</span>:</span>\n<span id=\"cb30-14\"><a href=\"#cb30-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>            html <span class=\"op\">=</span> content</span>\n<span id=\"cb30-15\"><a href=\"#cb30-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">if</span> html:</span>\n<span id=\"cb30-16\"><a href=\"#cb30-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> html_to_plain_text(html)</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb31\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb31-1\"><a href=\"#cb31-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(email_to_text(sample_html_spam)[:<span class=\"dv\">100</span>], <span class=\"st\">&quot;...&quot;</span>)</span></code></pre></div>\n<pre><code>OTC\n¬†Newsletter\nDiscover Tomorrow&#39;s Winners¬†\nFor Immediate Release\nCal-Bay (Stock Symbol: CBYI)\nWat ...</code></pre>\n<p>Let‚Äôs throw in some stemming! For this to work, you need to install the Natural Language Toolkit (NLTK).</p>\n<div class=\"sourceCode\" id=\"cb33\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb33-1\"><a href=\"#cb33-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">try</span>:</span>\n<span id=\"cb33-2\"><a href=\"#cb33-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"im\">import</span> nltk</span>\n<span id=\"cb33-3\"><a href=\"#cb33-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb33-4\"><a href=\"#cb33-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    stemmer <span class=\"op\">=</span> nltk.PorterStemmer()</span>\n<span id=\"cb33-5\"><a href=\"#cb33-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"cf\">for</span> word <span class=\"kw\">in</span> (<span class=\"st\">&quot;Computations&quot;</span>, <span class=\"st\">&quot;Computation&quot;</span>, <span class=\"st\">&quot;Computing&quot;</span>, <span class=\"st\">&quot;Computed&quot;</span>, <span class=\"st\">&quot;Compute&quot;</span>, <span class=\"st\">&quot;Compulsive&quot;</span>):</span>\n<span id=\"cb33-6\"><a href=\"#cb33-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"bu\">print</span>(word, <span class=\"st\">&quot;=&gt;&quot;</span>, stemmer.stem(word))</span>\n<span id=\"cb33-7\"><a href=\"#cb33-7\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">except</span> <span class=\"pp\">ImportError</span>:</span>\n<span id=\"cb33-8\"><a href=\"#cb33-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;Error: stemming requires the NLTK module.&quot;</span>)</span>\n<span id=\"cb33-9\"><a href=\"#cb33-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>    stemmer <span class=\"op\">=</span> <span class=\"va\">None</span></span></code></pre></div>\n<pre><code>Computations =&gt; comput\nComputation =&gt; comput\nComputing =&gt; comput\nComputed =&gt; comput\nCompute =&gt; comput\nCompulsive =&gt; compuls</code></pre>\n<p>We will also need a way to replace URLs with the word ‚ÄúURL‚Äù. For this, we could use hard core regular expressions but we will just use the urlextract library.</p>\n<div class=\"sourceCode\" id=\"cb35\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb35-1\"><a href=\"#cb35-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">try</span>:</span>\n<span id=\"cb35-2\"><a href=\"#cb35-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"im\">import</span> urlextract <span class=\"co\"># may require an Internet connection to download root domain names</span></span>\n<span id=\"cb35-3\"><a href=\"#cb35-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    </span>\n<span id=\"cb35-4\"><a href=\"#cb35-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    url_extractor <span class=\"op\">=</span> urlextract.URLExtract()</span>\n<span id=\"cb35-5\"><a href=\"#cb35-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(url_extractor.find_urls(<span class=\"st\">&quot;Will it detect github.com and https://youtu.be/7Pq-S557XQU?t=3m32s&quot;</span>))</span>\n<span id=\"cb35-6\"><a href=\"#cb35-6\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"cf\">except</span> <span class=\"pp\">ImportError</span>:</span>\n<span id=\"cb35-7\"><a href=\"#cb35-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"bu\">print</span>(<span class=\"st\">&quot;Error: replacing URLs requires the urlextract module.&quot;</span>)</span>\n<span id=\"cb35-8\"><a href=\"#cb35-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>    url_extractor <span class=\"op\">=</span> <span class=\"va\">None</span></span></code></pre></div>\n<pre><code>[&#39;github.com&#39;, &#39;https://youtu.be/7Pq-S557XQU?t=3m32s&#39;]</code></pre>\n<p>We are ready to put all this together into a transformer that we will use to convert emails to word counters. Note that we split sentences into words using Python‚Äôs <code>split()</code> method, which uses whitespaces for word boundaries. This works for many written languages, but not all. For example, Chinese and Japanese scripts generally don‚Äôt use spaces between words, and Vietnamese often uses spaces even between syllables. It‚Äôs okay in this exercise, because the dataset is (mostly) in English.</p>\n<div class=\"sourceCode\" id=\"cb37\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb37-1\"><a href=\"#cb37-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.base <span class=\"im\">import</span> BaseEstimator, TransformerMixin</span>\n<span id=\"cb37-2\"><a href=\"#cb37-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb37-3\"><a href=\"#cb37-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> EmailToWordCounterTransformer(BaseEstimator, TransformerMixin):</span>\n<span id=\"cb37-4\"><a href=\"#cb37-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, strip_headers<span class=\"op\">=</span><span class=\"va\">True</span>, lower_case<span class=\"op\">=</span><span class=\"va\">True</span>, remove_punctuation<span class=\"op\">=</span><span class=\"va\">True</span>,</span>\n<span id=\"cb37-5\"><a href=\"#cb37-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>                 replace_urls<span class=\"op\">=</span><span class=\"va\">True</span>, replace_numbers<span class=\"op\">=</span><span class=\"va\">True</span>, stemming<span class=\"op\">=</span><span class=\"va\">True</span>):</span>\n<span id=\"cb37-6\"><a href=\"#cb37-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.strip_headers <span class=\"op\">=</span> strip_headers</span>\n<span id=\"cb37-7\"><a href=\"#cb37-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.lower_case <span class=\"op\">=</span> lower_case</span>\n<span id=\"cb37-8\"><a href=\"#cb37-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.remove_punctuation <span class=\"op\">=</span> remove_punctuation</span>\n<span id=\"cb37-9\"><a href=\"#cb37-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.replace_urls <span class=\"op\">=</span> replace_urls</span>\n<span id=\"cb37-10\"><a href=\"#cb37-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.replace_numbers <span class=\"op\">=</span> replace_numbers</span>\n<span id=\"cb37-11\"><a href=\"#cb37-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.stemming <span class=\"op\">=</span> stemming</span>\n<span id=\"cb37-12\"><a href=\"#cb37-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> fit(<span class=\"va\">self</span>, X, y<span class=\"op\">=</span><span class=\"va\">None</span>):</span>\n<span id=\"cb37-13\"><a href=\"#cb37-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span></span>\n<span id=\"cb37-14\"><a href=\"#cb37-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> transform(<span class=\"va\">self</span>, X, y<span class=\"op\">=</span><span class=\"va\">None</span>):</span>\n<span id=\"cb37-15\"><a href=\"#cb37-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        X_transformed <span class=\"op\">=</span> []</span>\n<span id=\"cb37-16\"><a href=\"#cb37-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> email <span class=\"kw\">in</span> X:</span>\n<span id=\"cb37-17\"><a href=\"#cb37-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>            text <span class=\"op\">=</span> email_to_text(email) <span class=\"kw\">or</span> <span class=\"st\">&quot;&quot;</span></span>\n<span id=\"cb37-18\"><a href=\"#cb37-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> <span class=\"va\">self</span>.lower_case:</span>\n<span id=\"cb37-19\"><a href=\"#cb37-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>                text <span class=\"op\">=</span> text.lower()</span>\n<span id=\"cb37-20\"><a href=\"#cb37-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> <span class=\"va\">self</span>.replace_urls <span class=\"kw\">and</span> url_extractor <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb37-21\"><a href=\"#cb37-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>                urls <span class=\"op\">=</span> <span class=\"bu\">list</span>(<span class=\"bu\">set</span>(url_extractor.find_urls(text)))</span>\n<span id=\"cb37-22\"><a href=\"#cb37-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>                urls.sort(key<span class=\"op\">=</span><span class=\"kw\">lambda</span> url: <span class=\"bu\">len</span>(url), reverse<span class=\"op\">=</span><span class=\"va\">True</span>)</span>\n<span id=\"cb37-23\"><a href=\"#cb37-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"cf\">for</span> url <span class=\"kw\">in</span> urls:</span>\n<span id=\"cb37-24\"><a href=\"#cb37-24\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    text <span class=\"op\">=</span> text.replace(url, <span class=\"st\">&quot; URL &quot;</span>)</span>\n<span id=\"cb37-25\"><a href=\"#cb37-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> <span class=\"va\">self</span>.replace_numbers:</span>\n<span id=\"cb37-26\"><a href=\"#cb37-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>                text <span class=\"op\">=</span> re.sub(<span class=\"vs\">r&#39;\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?&#39;</span>, <span class=\"st\">&#39;NUMBER&#39;</span>, text)</span>\n<span id=\"cb37-27\"><a href=\"#cb37-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> <span class=\"va\">self</span>.remove_punctuation:</span>\n<span id=\"cb37-28\"><a href=\"#cb37-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>                text <span class=\"op\">=</span> re.sub(<span class=\"vs\">r&#39;\\W+&#39;</span>, <span class=\"st\">&#39; &#39;</span>, text, flags<span class=\"op\">=</span>re.M)</span>\n<span id=\"cb37-29\"><a href=\"#cb37-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>            word_counts <span class=\"op\">=</span> Counter(text.split())</span>\n<span id=\"cb37-30\"><a href=\"#cb37-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">if</span> <span class=\"va\">self</span>.stemming <span class=\"kw\">and</span> stemmer <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb37-31\"><a href=\"#cb37-31\" aria-hidden=\"true\" tabindex=\"-1\"></a>                stemmed_word_counts <span class=\"op\">=</span> Counter()</span>\n<span id=\"cb37-32\"><a href=\"#cb37-32\" aria-hidden=\"true\" tabindex=\"-1\"></a>                <span class=\"cf\">for</span> word, count <span class=\"kw\">in</span> word_counts.items():</span>\n<span id=\"cb37-33\"><a href=\"#cb37-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    stemmed_word <span class=\"op\">=</span> stemmer.stem(word)</span>\n<span id=\"cb37-34\"><a href=\"#cb37-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>                    stemmed_word_counts[stemmed_word] <span class=\"op\">+=</span> count</span>\n<span id=\"cb37-35\"><a href=\"#cb37-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>                word_counts <span class=\"op\">=</span> stemmed_word_counts</span>\n<span id=\"cb37-36\"><a href=\"#cb37-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>            X_transformed.append(word_counts)</span>\n<span id=\"cb37-37\"><a href=\"#cb37-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> np.array(X_transformed)</span></code></pre></div>\n<p>Let‚Äôs try this transformer on a few emails:</p>\n<div class=\"sourceCode\" id=\"cb38\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb38-1\"><a href=\"#cb38-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_few <span class=\"op\">=</span> X_train[:<span class=\"dv\">3</span>]</span>\n<span id=\"cb38-2\"><a href=\"#cb38-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_few_wordcounts <span class=\"op\">=</span> EmailToWordCounterTransformer().fit_transform(X_few)</span>\n<span id=\"cb38-3\"><a href=\"#cb38-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_few_wordcounts</span></code></pre></div>\n<pre><code>array([Counter({&#39;chuck&#39;: 1, &#39;murcko&#39;: 1, &#39;wrote&#39;: 1, &#39;stuff&#39;: 1, &#39;yawn&#39;: 1, &#39;r&#39;: 1}),\n       Counter({&#39;the&#39;: 11, &#39;of&#39;: 9, &#39;and&#39;: 8, &#39;all&#39;: 3, &#39;christian&#39;: 3, &#39;to&#39;: 3, &#39;by&#39;: 3, &#39;jefferson&#39;: 2, &#39;i&#39;: 2, &#39;have&#39;: 2, &#39;superstit&#39;: 2, &#39;one&#39;: 2, &#39;on&#39;: 2, &#39;been&#39;: 2, &#39;ha&#39;: 2, &#39;half&#39;: 2, &#39;rogueri&#39;: 2, &#39;teach&#39;: 2, &#39;jesu&#39;: 2, &#39;some&#39;: 1, &#39;interest&#39;: 1, &#39;quot&#39;: 1, &#39;url&#39;: 1, &#39;thoma&#39;: 1, &#39;examin&#39;: 1, &#39;known&#39;: 1, &#39;word&#39;: 1, &#39;do&#39;: 1, &#39;not&#39;: 1, &#39;find&#39;: 1, &#39;in&#39;: 1, &#39;our&#39;: 1, &#39;particular&#39;: 1, &#39;redeem&#39;: 1, &#39;featur&#39;: 1, &#39;they&#39;: 1, &#39;are&#39;: 1, &#39;alik&#39;: 1, &#39;found&#39;: 1, &#39;fabl&#39;: 1, &#39;mytholog&#39;: 1, &#39;million&#39;: 1, &#39;innoc&#39;: 1, &#39;men&#39;: 1, &#39;women&#39;: 1, &#39;children&#39;: 1, &#39;sinc&#39;: 1, &#39;introduct&#39;: 1, &#39;burnt&#39;: 1, &#39;tortur&#39;: 1, &#39;fine&#39;: 1, &#39;imprison&#39;: 1, &#39;what&#39;: 1, &#39;effect&#39;: 1, &#39;thi&#39;: 1, &#39;coercion&#39;: 1, &#39;make&#39;: 1, &#39;world&#39;: 1, &#39;fool&#39;: 1, &#39;other&#39;: 1, &#39;hypocrit&#39;: 1, &#39;support&#39;: 1, &#39;error&#39;: 1, &#39;over&#39;: 1, &#39;earth&#39;: 1, &#39;six&#39;: 1, &#39;histor&#39;: 1, &#39;american&#39;: 1, &#39;john&#39;: 1, &#39;e&#39;: 1, &#39;remsburg&#39;: 1, &#39;letter&#39;: 1, &#39;william&#39;: 1, &#39;short&#39;: 1, &#39;again&#39;: 1, &#39;becom&#39;: 1, &#39;most&#39;: 1, &#39;pervert&#39;: 1, &#39;system&#39;: 1, &#39;that&#39;: 1, &#39;ever&#39;: 1, &#39;shone&#39;: 1, &#39;man&#39;: 1, &#39;absurd&#39;: 1, &#39;untruth&#39;: 1, &#39;were&#39;: 1, &#39;perpetr&#39;: 1, &#39;upon&#39;: 1, &#39;a&#39;: 1, &#39;larg&#39;: 1, &#39;band&#39;: 1, &#39;dupe&#39;: 1, &#39;import&#39;: 1, &#39;led&#39;: 1, &#39;paul&#39;: 1, &#39;first&#39;: 1, &#39;great&#39;: 1, &#39;corrupt&#39;: 1}),\n       Counter({&#39;url&#39;: 4, &#39;s&#39;: 3, &#39;group&#39;: 3, &#39;to&#39;: 3, &#39;in&#39;: 2, &#39;forteana&#39;: 2, &#39;martin&#39;: 2, &#39;an&#39;: 2, &#39;and&#39;: 2, &#39;we&#39;: 2, &#39;is&#39;: 2, &#39;yahoo&#39;: 2, &#39;unsubscrib&#39;: 2, &#39;y&#39;: 1, &#39;adamson&#39;: 1, &#39;wrote&#39;: 1, &#39;for&#39;: 1, &#39;altern&#39;: 1, &#39;rather&#39;: 1, &#39;more&#39;: 1, &#39;factual&#39;: 1, &#39;base&#39;: 1, &#39;rundown&#39;: 1, &#39;on&#39;: 1, &#39;hamza&#39;: 1, &#39;career&#39;: 1, &#39;includ&#39;: 1, &#39;hi&#39;: 1, &#39;belief&#39;: 1, &#39;that&#39;: 1, &#39;all&#39;: 1, &#39;non&#39;: 1, &#39;muslim&#39;: 1, &#39;yemen&#39;: 1, &#39;should&#39;: 1, &#39;be&#39;: 1, &#39;murder&#39;: 1, &#39;outright&#39;: 1, &#39;know&#39;: 1, &#39;how&#39;: 1, &#39;unbias&#39;: 1, &#39;memri&#39;: 1, &#39;don&#39;: 1, &#39;t&#39;: 1, &#39;html&#39;: 1, &#39;rob&#39;: 1, &#39;sponsor&#39;: 1, &#39;number&#39;: 1, &#39;dvd&#39;: 1, &#39;free&#39;: 1, &#39;p&#39;: 1, &#39;join&#39;: 1, &#39;now&#39;: 1, &#39;from&#39;: 1, &#39;thi&#39;: 1, &#39;send&#39;: 1, &#39;email&#39;: 1, &#39;egroup&#39;: 1, &#39;com&#39;: 1, &#39;your&#39;: 1, &#39;use&#39;: 1, &#39;of&#39;: 1, &#39;subject&#39;: 1})],\n      dtype=object)</code></pre>\n<p>This looks about right!</p>\n<p>Now we have the word counts, and we need to convert them to vectors. For this, we will build another transformer whose <code>fit()</code> method will build the vocabulary (an ordered list of the most common words) and whose <code>transform()</code> method will use the vocabulary to convert word counts to vectors. The output is a sparse matrix.</p>\n<div class=\"sourceCode\" id=\"cb40\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb40-1\"><a href=\"#cb40-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> scipy.sparse <span class=\"im\">import</span> csr_matrix</span>\n<span id=\"cb40-2\"><a href=\"#cb40-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb40-3\"><a href=\"#cb40-3\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> WordCounterToVectorTransformer(BaseEstimator, TransformerMixin):</span>\n<span id=\"cb40-4\"><a href=\"#cb40-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, vocabulary_size<span class=\"op\">=</span><span class=\"dv\">1000</span>):</span>\n<span id=\"cb40-5\"><a href=\"#cb40-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.vocabulary_size <span class=\"op\">=</span> vocabulary_size</span>\n<span id=\"cb40-6\"><a href=\"#cb40-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> fit(<span class=\"va\">self</span>, X, y<span class=\"op\">=</span><span class=\"va\">None</span>):</span>\n<span id=\"cb40-7\"><a href=\"#cb40-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>        total_count <span class=\"op\">=</span> Counter()</span>\n<span id=\"cb40-8\"><a href=\"#cb40-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> word_count <span class=\"kw\">in</span> X:</span>\n<span id=\"cb40-9\"><a href=\"#cb40-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">for</span> word, count <span class=\"kw\">in</span> word_count.items():</span>\n<span id=\"cb40-10\"><a href=\"#cb40-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>                total_count[word] <span class=\"op\">+=</span> <span class=\"bu\">min</span>(count, <span class=\"dv\">10</span>)</span>\n<span id=\"cb40-11\"><a href=\"#cb40-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>        most_common <span class=\"op\">=</span> total_count.most_common()[:<span class=\"va\">self</span>.vocabulary_size]</span>\n<span id=\"cb40-12\"><a href=\"#cb40-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.vocabulary_ <span class=\"op\">=</span> {word: index <span class=\"op\">+</span> <span class=\"dv\">1</span> <span class=\"cf\">for</span> index, (word, count) <span class=\"kw\">in</span> <span class=\"bu\">enumerate</span>(most_common)}</span>\n<span id=\"cb40-13\"><a href=\"#cb40-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> <span class=\"va\">self</span></span>\n<span id=\"cb40-14\"><a href=\"#cb40-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> transform(<span class=\"va\">self</span>, X, y<span class=\"op\">=</span><span class=\"va\">None</span>):</span>\n<span id=\"cb40-15\"><a href=\"#cb40-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>        rows <span class=\"op\">=</span> []</span>\n<span id=\"cb40-16\"><a href=\"#cb40-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>        cols <span class=\"op\">=</span> []</span>\n<span id=\"cb40-17\"><a href=\"#cb40-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>        data <span class=\"op\">=</span> []</span>\n<span id=\"cb40-18\"><a href=\"#cb40-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">for</span> row, word_count <span class=\"kw\">in</span> <span class=\"bu\">enumerate</span>(X):</span>\n<span id=\"cb40-19\"><a href=\"#cb40-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>            <span class=\"cf\">for</span> word, count <span class=\"kw\">in</span> word_count.items():</span>\n<span id=\"cb40-20\"><a href=\"#cb40-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>                rows.append(row)</span>\n<span id=\"cb40-21\"><a href=\"#cb40-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>                cols.append(<span class=\"va\">self</span>.vocabulary_.get(word, <span class=\"dv\">0</span>))</span>\n<span id=\"cb40-22\"><a href=\"#cb40-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>                data.append(count)</span>\n<span id=\"cb40-23\"><a href=\"#cb40-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"cf\">return</span> csr_matrix((data, (rows, cols)), shape<span class=\"op\">=</span>(<span class=\"bu\">len</span>(X), <span class=\"va\">self</span>.vocabulary_size <span class=\"op\">+</span> <span class=\"dv\">1</span>))</span></code></pre></div>\n<div class=\"sourceCode\" id=\"cb41\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb41-1\"><a href=\"#cb41-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>vocab_transformer <span class=\"op\">=</span> WordCounterToVectorTransformer(vocabulary_size<span class=\"op\">=</span><span class=\"dv\">10</span>)</span>\n<span id=\"cb41-2\"><a href=\"#cb41-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_few_vectors <span class=\"op\">=</span> vocab_transformer.fit_transform(X_few_wordcounts)</span>\n<span id=\"cb41-3\"><a href=\"#cb41-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_few_vectors</span></code></pre></div>\n<pre><code>&lt;3x11 sparse matrix of type &#39;&lt;class &#39;numpy.int64&#39;&gt;&#39;\n    with 20 stored elements in Compressed Sparse Row format&gt;</code></pre>\n<div class=\"sourceCode\" id=\"cb43\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb43-1\"><a href=\"#cb43-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_few_vectors.toarray()</span></code></pre></div>\n<pre><code>array([[ 6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],\n       [99, 11,  9,  8,  3,  1,  3,  1,  3,  2,  3],\n       [67,  0,  1,  2,  3,  4,  1,  2,  0,  1,  0]])</code></pre>\n<p>What does this matrix mean? Well, the 99 in the second row, first column, means that the second email contains 99 words that are not part of the vocabulary. The 11 next to it means that the first word in the vocabulary is present 11 times in this email. The 9 next to it means that the second word is present 9 times, and so on. You can look at the vocabulary to know which words we are talking about. The first word is ‚Äúthe‚Äù, the second word is ‚Äúof‚Äù, etc.</p>\n<div class=\"sourceCode\" id=\"cb45\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb45-1\"><a href=\"#cb45-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>vocab_transformer.vocabulary_</span></code></pre></div>\n<pre><code>{&#39;the&#39;: 1,\n &#39;of&#39;: 2,\n &#39;and&#39;: 3,\n &#39;to&#39;: 4,\n &#39;url&#39;: 5,\n &#39;all&#39;: 6,\n &#39;in&#39;: 7,\n &#39;christian&#39;: 8,\n &#39;on&#39;: 9,\n &#39;by&#39;: 10}</code></pre>\n<p>We are now ready to train our first spam classifier! Let‚Äôs transform the whole dataset:</p>\n<div class=\"sourceCode\" id=\"cb47\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb47-1\"><a href=\"#cb47-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.pipeline <span class=\"im\">import</span> Pipeline</span>\n<span id=\"cb47-2\"><a href=\"#cb47-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb47-3\"><a href=\"#cb47-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>preprocess_pipeline <span class=\"op\">=</span> Pipeline([</span>\n<span id=\"cb47-4\"><a href=\"#cb47-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    (<span class=\"st\">&quot;email_to_wordcount&quot;</span>, EmailToWordCounterTransformer()),</span>\n<span id=\"cb47-5\"><a href=\"#cb47-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    (<span class=\"st\">&quot;wordcount_to_vector&quot;</span>, WordCounterToVectorTransformer()),</span>\n<span id=\"cb47-6\"><a href=\"#cb47-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>])</span>\n<span id=\"cb47-7\"><a href=\"#cb47-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb47-8\"><a href=\"#cb47-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_train_transformed <span class=\"op\">=</span> preprocess_pipeline.fit_transform(X_train)</span></code></pre></div>\n<p>Note: to be future-proof, we set solver=‚Äúlbfgs‚Äù since this will be the default value in Scikit-Learn 0.22.</p>\n<div class=\"sourceCode\" id=\"cb48\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb48-1\"><a href=\"#cb48-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.linear_model <span class=\"im\">import</span> LogisticRegression</span>\n<span id=\"cb48-2\"><a href=\"#cb48-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.model_selection <span class=\"im\">import</span> cross_val_score</span>\n<span id=\"cb48-3\"><a href=\"#cb48-3\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb48-4\"><a href=\"#cb48-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>log_clf <span class=\"op\">=</span> LogisticRegression(solver<span class=\"op\">=</span><span class=\"st\">&quot;lbfgs&quot;</span>, max_iter<span class=\"op\">=</span><span class=\"dv\">1000</span>, random_state<span class=\"op\">=</span><span class=\"dv\">42</span>)</span>\n<span id=\"cb48-5\"><a href=\"#cb48-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>score <span class=\"op\">=</span> cross_val_score(log_clf, X_train_transformed, y_train, cv<span class=\"op\">=</span><span class=\"dv\">3</span>, verbose<span class=\"op\">=</span><span class=\"dv\">3</span>)</span>\n<span id=\"cb48-6\"><a href=\"#cb48-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>score.mean()</span></code></pre></div>\n<pre><code>[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n\n\n[CV] END ................................ score: (test=0.981) total time=   0.4s\n\n\n[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.4s remaining:    0.0s\n\n\n[CV] END ................................ score: (test=0.984) total time=   0.5s\n\n\n[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.9s remaining:    0.0s\n\n\n[CV] END ................................ score: (test=0.990) total time=   0.5s\n\n\n[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    1.4s finished\n\n\n\n\n\n0.985</code></pre>\n<p>Over 98.5%, not bad. However, remember that we are using the ‚Äúeasy‚Äù dataset. You can try with the harder datasets, the results won‚Äôt be so amazing. You would have to try multiple models, select the best ones and fine-tune them using cross-validation, and so on.</p>\n<p>To conclude here, we‚Äôll just print out the precision/recall we get on the test set:</p>\n<div class=\"sourceCode\" id=\"cb50\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb50-1\"><a href=\"#cb50-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"im\">from</span> sklearn.metrics <span class=\"im\">import</span> precision_score, recall_score</span>\n<span id=\"cb50-2\"><a href=\"#cb50-2\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb50-3\"><a href=\"#cb50-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>X_test_transformed <span class=\"op\">=</span> preprocess_pipeline.transform(X_test)</span>\n<span id=\"cb50-4\"><a href=\"#cb50-4\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb50-5\"><a href=\"#cb50-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>log_clf <span class=\"op\">=</span> LogisticRegression(solver<span class=\"op\">=</span><span class=\"st\">&quot;lbfgs&quot;</span>, max_iter<span class=\"op\">=</span><span class=\"dv\">1000</span>, random_state<span class=\"op\">=</span><span class=\"dv\">42</span>)</span>\n<span id=\"cb50-6\"><a href=\"#cb50-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>log_clf.fit(X_train_transformed, y_train)</span>\n<span id=\"cb50-7\"><a href=\"#cb50-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb50-8\"><a href=\"#cb50-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>y_pred <span class=\"op\">=</span> log_clf.predict(X_test_transformed)</span>\n<span id=\"cb50-9\"><a href=\"#cb50-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb50-10\"><a href=\"#cb50-10\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"st\">&quot;Precision: </span><span class=\"sc\">{:.2f}</span><span class=\"st\">%&quot;</span>.<span class=\"bu\">format</span>(<span class=\"dv\">100</span> <span class=\"op\">*</span> precision_score(y_test, y_pred)))</span>\n<span id=\"cb50-11\"><a href=\"#cb50-11\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"bu\">print</span>(<span class=\"st\">&quot;Recall: </span><span class=\"sc\">{:.2f}</span><span class=\"st\">%&quot;</span>.<span class=\"bu\">format</span>(<span class=\"dv\">100</span> <span class=\"op\">*</span> recall_score(y_test, y_pred)))</span></code></pre></div>\n<pre><code>Precision: 96.88%\nRecall: 97.89%</code></pre>\n"
  },
  {
    "_id": "trees_and_graphs",
    "_body": "<h1 id=\"trees-and-graphs\">Trees and Graphs</h1>\n<h2 id=\"trees\">Trees</h2>\n<p>We‚Äôll discuss trees first and then graphs, even though trees are really just a type of graph</p>\n<h3 id=\"types-of-trees\">Types of Trees</h3>\n<p>A nice way to understand a tree is with a recursive explanation. A tree is a data structure composed of nodes.</p>\n<ul>\n<li>Each tree has a root node.</li>\n<li>The root node has zero or more child nodes.</li>\n<li>Each child node has zero or more childe nodes, and so on.</li>\n</ul>\n<p>A tree cannot contain cycles. The nodes may or may not be in a particular order, they could have any data type as values, and they may or may not have links back to their parent nodes.</p>\n<p>A very simple class definition for <code>Node</code> is:</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Node:</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, name):</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.name <span class=\"op\">=</span> name</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.children <span class=\"op\">=</span> <span class=\"bu\">list</span>()</span></code></pre></div>\n<p>You might also have a <code>Tree</code> class to wrap this node.</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">class</span> Tree:</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>    <span class=\"kw\">def</span> <span class=\"fu\">__init__</span>(<span class=\"va\">self</span>, root):</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>        <span class=\"va\">self</span>.root: Node <span class=\"op\">=</span> root</span></code></pre></div>\n<h4 id=\"trees-vs.-binary-trees\">Trees vs.¬†Binary Trees</h4>\n<p>A binary tree is a tree in which each node has up to two children. Not all trees are binary trees. For example, this tree is not a binary tree. You could call it a ternary tree.</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/00_ternary_tree.png\" /></p>\n<p>There are occasions when you might have a tree that is not a binary tree. For example, suppose you were using a tree to represent a bunch of phone numbers. In this case, you might use a 10-ary tree, with each node having up to 10 children (one for each digit).</p>\n<p>A node is called a ‚Äúleaf‚Äù node if it has no children.</p>\n<h4 id=\"binary-tree-vs-binary-search-tree\">Binary Tree vs Binary Search Tree</h4>\n<p>A binary search tree is a binary tree in which every node fits a specific ordering property: <strong>all left descendents &lt;= n &lt; all right descendents</strong>. This must be true for each node n.</p>\n<p>Note that this inequality must be true for all of a node‚Äôs descendents, not just its immediate children.</p>\n<p>A binary search tree:</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/01_binary_search_tree.png\" /></p>\n<p>Not a binary search tree:</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/02_not_binary_search_tree.png\" /></p>\n<p>A binary search tree imposes the condition that, for each node, its left descendents are less than or equal to the current node, which is less than the right descendents.</p>\n<h4 id=\"balanced-vs.-unbalanced\">Balanced vs.¬†Unbalanced</h4>\n<p>While many trees are balanced, not all are. Note that balancing a tree does not mean the left and right subtrees are exactly the same size (like you see under ‚Äúperfect binary trees‚Äù below).</p>\n<p>One way to think about it is that a ‚Äúbalanced‚Äù tree really means something more like ‚Äúnot terribly imbalanced‚Äù. It‚Äôs balanced enought to ensure <code>O(log n)</code> times for <code>insert</code> and <code>find</code>, but it‚Äôs not necessarily as balanced as it could be.</p>\n<h4 id=\"complete-binary-trees\">Complete Binary Trees</h4>\n<p>A complete binary tree is a binary tree in which every level of the tree is fully filled, except for perhaps the last level. To the extent that the last level is filled, it is filled left to right.</p>\n<p>Not a complete binary tree:</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/03_not_complete_binary_tree.png\" /></p>\n<p>A complete binary tree:</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/04_complete_binary_tree.png\" /></p>\n<h4 id=\"full-binary-trees\">Full Binary Trees</h4>\n<p>A full binary tree is a binary tree in which every node has either zero or two children. That is, no nodes have only one child.</p>\n<p>Not a full binary tree:</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/05_not_full_binary_tree.png\" /></p>\n<p>A full binary tree:</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/06_full_binary_tree.png\" /></p>\n<h4 id=\"perfect-binary-trees\">Perfect Binary Trees</h4>\n<p>A perfect binary tree is one that is both full and complete. All leaf nodes will be at the same level, and the level has the maximum number of nodes.</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/07_perfect_binary_tree.png\" /></p>\n<p>Note that perfect trees are rare, as a perfect tree must have exactly <span class=\"math inline\">2<sup><em>k</em></sup>‚ÄÖ‚àí‚ÄÖ1</span> nodes (where <span class=\"math inline\"><em>k</em></span> is the number of levels).</p>\n<h3 id=\"binary-tree-traversal\">Binary Tree Traversal</h3>\n<h4 id=\"in-order-traversal\">In-Order Traversal</h4>\n<p>In-order traversal means to ‚Äúvisit‚Äù (often, print) the left branch, then the current node, then the right branch.</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> in_order_traversal(node):</span>\n<span id=\"cb3-2\"><a href=\"#cb3-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">if</span> node <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb3-3\"><a href=\"#cb3-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    in_order_traversal(node.left)</span>\n<span id=\"cb3-4\"><a href=\"#cb3-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    visit(node)</span>\n<span id=\"cb3-5\"><a href=\"#cb3-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    in_order_traversal(node.right)</span></code></pre></div>\n<p>When performed on a binary search tree, it visits the nodes in ascending order (hence the name ‚Äúin-order‚Äù).</p>\n<h4 id=\"pre-order-traversal\">Pre-Order Traversal</h4>\n<p>Pre-order traversal visits the current node before its child nodes (hence the name ‚Äúpre-order‚Äù).</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> in_order_traversal(node):</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">if</span> node <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    visit(node)</span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    in_order_traversal(node.left)</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    in_order_traversal(node.right)</span></code></pre></div>\n<p>In a pre-order traversal, the root is always the first node visited.</p>\n<h4 id=\"post-order-traversal\">Post-Order Traversal</h4>\n<p>Post-order traversal visits the current node after its child nodes (hence the name ‚Äúpost-order‚Äù).</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"kw\">def</span> in_order_traversal(node):</span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>  <span class=\"cf\">if</span> node <span class=\"kw\">is</span> <span class=\"kw\">not</span> <span class=\"va\">None</span>:</span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>    in_order_traversal(node.left)</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>    in_order_traversal(node.right)</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>    visit(node)</span></code></pre></div>\n<p>In a post-order traversal, the root is always the last node visited.</p>\n<h3 id=\"binary-heaps-min-heaps-and-max-heaps\">Binary Heaps (Min-Heaps and Max-Heaps)</h3>\n<p>We‚Äôll only discuss min-heaps here. Max-heaps are essentially equivalent, but the elements are in descending order rather than ascending order.</p>\n<p>A min-heap is a <em>complete</em> binary tree (that is, totally filled other than the rightmost elements on the last level) where each node is smaller than its children. The root, therefore, it the minimum element in the tree.</p>\n<p>For example:</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/08_min_heap.png\" /></p>\n<p>We have two key operations on a min-heap: <code>insert</code> and <code>extract_min</code>.</p>\n<p><code>Insert</code></p>\n<p>When we insert into a min-heap, we always start by inserting the element at the bottom. We insert at the rightmost spot so as to maintain the complete tree property.</p>\n<p>Then, we ‚Äúfix‚Äù the tree by swapping the new element with its parent, until we find an appropriate spot for the element. We essentially bubble up the minimum element.</p>\n<ul>\n<li>Step 1: Insert 2</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/09_min_heap_insert_1.png\" /></p>\n<ul>\n<li>Step 2: Swap 2 and 7</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/10_min_heap_insert_2.png\" /></p>\n<ul>\n<li>Step 3: Swap 2 and 4</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/11_min_heap_insert_3.png\" /></p>\n<p>This take <code>O(log n)</code> time, where <code>n</code> is the number of nodes in the heap.</p>\n<p><code>Extract Minimum Element</code></p>\n<p>Finding the minimum element of a min-heap is easy: it‚Äôs always at the top. The trickier part is how to remove it (in fact, this isn‚Äôt that tricky).</p>\n<p>First, we remove the minimum element and swap it with the last element in the heap (the bottommost rightnost element). Then, we bubble down this element, swapping it with one of its children until the min-heap property is restored.</p>\n<p>Do we swap it with the left child or the right child? This depends on their values. There‚Äôs no inherent ordering between the left and right element, but you‚Äôll need to take the smaller one in order to maintain the min-heap ordering.</p>\n<ul>\n<li>Step 1: Replace min with 80</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/12_min_heap_remove_min_1.png\" /></p>\n<ul>\n<li>Step 2: Swap 23 and 80</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/13_min_heap_remove_min_2.png\" /></p>\n<ul>\n<li>Step 3: Swap 32 and 80</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/14_min_heap_remove_min_3.png\" /></p>\n<p>This algorithm will take <code>O(log n)</code> time.</p>\n<h3 id=\"tries-prefix-trees\">Tries (Prefix Trees)</h3>\n<p>A trie (sometimes called a prefix tree) is a funny data structure. A trie is a variant of an n-ary tree in which characters are stored at each node. Each path down the tree may represent a word.</p>\n<p>The <code>*</code> nodes (sometimes called ‚Äúnull nodes‚Äù) are often used to indicate complete words. For example, the fact that there is a <code>*</code> node under <code>MANY</code> indicates that <code>MANY</code> is a complete word. The existence of the <code>MA</code> path indicates there are words that start with <code>MA</code>.</p>\n<p>The actual implementation of these <code>*</code> nodes might be a special type of child (such as a <code>TerminatingTrieNode</code>, which inherits from <code>TrieNode</code>). Or, we could use just a boolean flat <code>terminates</code> within the ‚Äúparent‚Äù node.</p>\n<p>A node in a trie could have anywhere from <code>0</code> to <code>ALPHABET_SIZE + 1</code> children.</p>\n<p><img src=\"https://raw.githubusercontent.com/brombaut/articles-authored/main/assets/images/trees_and_graphs/15_prefix_trees.png\" /></p>\n<p>Very commonly, a trie us used to store the entire (English) language for quick prefix lookups. While a hash table can quickly look up where a string is a valid word, it cannot tell us if a string is a prefix of any valid words. A trie can do this very quickly.</p>\n<p>How quickly? A trie can check is a string is a valid prefix in <code>O(K)</code> time, where <code>K</code> is the length of the string. This is actually the same runtime as a hash table will take. Although we often refer to has table lookups as being <code>O(1)</code> time, this isn‚Äôt entirely true. A hash table must read through all the characters in the input, which take <code>O(K)</code> time in the case of a word lookup.</p>\n<p>Many problems involving lists of valid words leverage a trie as an optimization. In situations when we search through the tree on related prefixes repeatedly (e.g., looking up <code>M</code>, then <code>MA</code>, then <code>MAN</code>, the <code>MANY</code>), we might pass around a reference to the current node in the tree. This will allow us to just check if <code>Y</code> is a child of <code>MAN</code>, rather than starting from the root each time.</p>\n<h2 id=\"graphs\">Graphs</h2>\n<p>TODO</p>\n"
  }
]